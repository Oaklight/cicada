{
    "name": "build123d",
    "classes": [
        {
            "name": "build123d.Align",
            "signature": "build123d.Align()",
            "methods": [],
            "variables": [
                "CENTER",
                "MAX",
                "MIN",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.AngularDirection",
            "signature": "build123d.AngularDirection()",
            "methods": [],
            "variables": [
                "CLOCKWISE",
                "COUNTER_CLOCKWISE",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.ApproxOption",
            "signature": "build123d.ApproxOption()",
            "methods": [],
            "variables": [
                "ARC",
                "NONE",
                "SPLINE",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Arrow",
            "signature": "build123d.Arrow(arrow_size: float, shaft_path: Union[build123d.topology.Edge, build123d.topology.Wire], shaft_width: float, head_at_start: bool = True, head_type: build123d.build_enums.HeadType = <HeadType.CURVED>, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.ArrowHead",
            "signature": "build123d.ArrowHead(size: float, head_type: build123d.build_enums.HeadType = <HeadType.CURVED>, rotation: float = 0, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.AutoNameEnum",
            "signature": "build123d.AutoNameEnum()",
            "methods": [],
            "variables": [
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Axis",
            "signature": "build123d.Axis(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Axis.angle_between",
                    "signature": "build123d.Axis.angle_between(self, other: 'Axis') -> 'float'"
                },
                {
                    "name": "build123d.Axis.intersect",
                    "signature": "build123d.Axis.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Axis.is_coaxial",
                    "signature": "build123d.Axis.is_coaxial(self, other: 'Axis', angular_tolerance: 'float' = 1e-05, linear_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.is_normal",
                    "signature": "build123d.Axis.is_normal(self, other: 'Axis', angular_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.is_opposite",
                    "signature": "build123d.Axis.is_opposite(self, other: 'Axis', angular_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.is_parallel",
                    "signature": "build123d.Axis.is_parallel(self, other: 'Axis', angular_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.located",
                    "signature": "build123d.Axis.located(self, new_location: 'Location')"
                },
                {
                    "name": "build123d.Axis.reverse",
                    "signature": "build123d.Axis.reverse(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Axis.to_plane",
                    "signature": "build123d.Axis.to_plane(self) -> 'Plane'"
                }
            ],
            "variables": [
                "location"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.AxisMeta",
            "signature": "build123d.AxisMeta()",
            "methods": [],
            "variables": [
                "X",
                "Y",
                "Z"
            ],
            "parent_classes": [
                "type"
            ]
        },
        {
            "name": "build123d.BallJoint",
            "signature": "build123d.BallJoint(label: 'str', to_part: 'Optional[Union[Solid, Compound]]' = None, joint_location: 'Optional[Location]' = None, angular_range: 'tuple[tuple[float, float], tuple[float, float], tuple[float, float]]' = ((0, 360), (0, 360), (0, 360)), angle_reference: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)))",
            "methods": [
                {
                    "name": "build123d.BallJoint.connect_to",
                    "signature": "build123d.BallJoint.connect_to(self, other: 'RigidJoint', *, angles: 'RotationLike' = None)"
                },
                {
                    "name": "build123d.BallJoint.relative_to",
                    "signature": "build123d.BallJoint.relative_to(self, other: 'RigidJoint', *, angles: 'RotationLike' = None)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.BaseEdgeObject",
            "signature": "build123d.BaseEdgeObject(curve: 'Edge', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.BaseLineObject",
            "signature": "build123d.BaseLineObject(curve: 'Wire', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Wire",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.BasePartObject",
            "signature": "build123d.BasePartObject(part: 'Union[Part, Solid]', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = None, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.BaseSketchObject",
            "signature": "build123d.BaseSketchObject(obj: 'Union[Compound, Face]', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = None, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Bezier",
            "signature": "build123d.Bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.BoundBox",
            "signature": "build123d.BoundBox(bounding_box: 'Bnd_Box') -> 'None'",
            "methods": [
                {
                    "name": "build123d.BoundBox.add",
                    "signature": "build123d.BoundBox.add(self, obj: 'Union[tuple[float, float, float], Vector, BoundBox]', tol: 'float' = None) -> 'BoundBox'"
                },
                {
                    "name": "build123d.BoundBox.center",
                    "signature": "build123d.BoundBox.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BoundBox.find_outside_box_2d",
                    "signature": "build123d.BoundBox.find_outside_box_2d(bb1: 'BoundBox', bb2: 'BoundBox') -> 'Optional[BoundBox]'"
                },
                {
                    "name": "build123d.BoundBox.is_inside",
                    "signature": "build123d.BoundBox.is_inside(self, second_box: 'BoundBox') -> 'bool'"
                },
                {
                    "name": "build123d.BoundBox.to_align_offset",
                    "signature": "build123d.BoundBox.to_align_offset(self, align: 'Tuple[float, float]') -> 'Tuple[float, float]'"
                }
            ],
            "variables": [
                "diagonal"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Box",
            "signature": "build123d.Box(length: 'float', width: 'float', height: 'float', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.BuildLine",
            "signature": "build123d.BuildLine(workplane: 'Union[Face, Plane, Location]' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BuildLine.face",
                    "signature": "build123d.BuildLine.face(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.faces",
                    "signature": "build123d.BuildLine.faces(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.solid",
                    "signature": "build123d.BuildLine.solid(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.solids",
                    "signature": "build123d.BuildLine.solids(self, *args)"
                }
            ],
            "variables": [
                "max_dimension",
                "new_edges"
            ],
            "parent_classes": [
                "Builder"
            ]
        },
        {
            "name": "build123d.BuildPart",
            "signature": "build123d.BuildPart(*workplanes: 'Union[Face, Plane, Location]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "location",
                "max_dimension",
                "new_edges",
                "pending_edges_as_wire"
            ],
            "parent_classes": [
                "Builder"
            ]
        },
        {
            "name": "build123d.BuildSketch",
            "signature": "build123d.BuildSketch(*workplanes: 'Union[Face, Plane, Location]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BuildSketch.consolidate_edges",
                    "signature": "build123d.BuildSketch.consolidate_edges(self) -> 'Union[Wire, list[Wire]]'"
                },
                {
                    "name": "build123d.BuildSketch.solid",
                    "signature": "build123d.BuildSketch.solid(self, *args)"
                },
                {
                    "name": "build123d.BuildSketch.solids",
                    "signature": "build123d.BuildSketch.solids(self, *args)"
                }
            ],
            "variables": [
                "max_dimension",
                "new_edges",
                "sketch"
            ],
            "parent_classes": [
                "Builder"
            ]
        },
        {
            "name": "build123d.Builder",
            "signature": "build123d.Builder(*workplanes: 'Union[Face, Plane, Location]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Builder.edge",
                    "signature": "build123d.Builder.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
                },
                {
                    "name": "build123d.Builder.edges",
                    "signature": "build123d.Builder.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Builder.face",
                    "signature": "build123d.Builder.face(self, select: 'Select' = <Select.ALL>) -> 'Face'"
                },
                {
                    "name": "build123d.Builder.faces",
                    "signature": "build123d.Builder.faces(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Builder.solid",
                    "signature": "build123d.Builder.solid(self, select: 'Select' = <Select.ALL>) -> 'Solid'"
                },
                {
                    "name": "build123d.Builder.solids",
                    "signature": "build123d.Builder.solids(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Builder.validate_inputs",
                    "signature": "build123d.Builder.validate_inputs(self, validating_class, objects: 'Union[Shape, Iterable[Shape]]' = None)"
                },
                {
                    "name": "build123d.Builder.vertex",
                    "signature": "build123d.Builder.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
                },
                {
                    "name": "build123d.Builder.vertices",
                    "signature": "build123d.Builder.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Builder.wire",
                    "signature": "build123d.Builder.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
                },
                {
                    "name": "build123d.Builder.wires",
                    "signature": "build123d.Builder.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "max_dimension",
                "new_edges"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.CenterArc",
            "signature": "build123d.CenterArc(center: 'VectorLike', radius: 'float', start_angle: 'float', arc_size: 'float', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.CenterOf",
            "signature": "build123d.CenterOf()",
            "methods": [],
            "variables": [
                "BOUNDING_BOX",
                "GEOMETRY",
                "MASS",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Circle",
            "signature": "build123d.Circle(radius: 'float', align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Color",
            "signature": "build123d.Color(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Color.to_tuple",
                    "signature": "build123d.Color.to_tuple(self)"
                }
            ],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.ColorIndex",
            "signature": "build123d.ColorIndex()",
            "methods": [],
            "variables": [
                "BLACK",
                "BLUE",
                "CYAN",
                "GRAY",
                "GREEN",
                "LIGHT_GRAY",
                "MAGENTA",
                "RED",
                "YELLOW",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Comparable",
            "signature": "build123d.Comparable()",
            "methods": [],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.Compound",
            "signature": "build123d.Compound(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Compound.center",
                    "signature": "build123d.Compound.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Compound.cut",
                    "signature": "build123d.Compound.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.do_children_intersect",
                    "signature": "build123d.Compound.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Compound.first_level_shapes",
                    "signature": "build123d.Compound.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Compound.fuse",
                    "signature": "build123d.Compound.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.get_type",
                    "signature": "build123d.Compound.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Compound.intersect",
                    "signature": "build123d.Compound.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.make_compound",
                    "signature": "build123d.Compound.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.make_text",
                    "signature": "build123d.Compound.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Compound.make_triad",
                    "signature": "build123d.Compound.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.unwrap",
                    "signature": "build123d.Compound.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Cone",
            "signature": "build123d.Cone(bottom_radius: 'float', top_radius: 'float', height: 'float', arc_size: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.CounterBoreHole",
            "signature": "build123d.CounterBoreHole(radius: 'float', counter_bore_radius: 'float', counter_bore_depth: 'float', depth: 'float' = None, mode: 'Mode' = <Mode.SUBTRACT>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.CounterSinkHole",
            "signature": "build123d.CounterSinkHole(radius: 'float', counter_sink_radius: 'float', depth: 'float' = None, counter_sink_angle: 'float' = 82, mode: 'Mode' = <Mode.SUBTRACT>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Curve",
            "signature": "build123d.Curve()",
            "methods": [
                {
                    "name": "build123d.Curve.wires",
                    "signature": "build123d.Curve.wires(self) -> 'list[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Cylinder",
            "signature": "build123d.Cylinder(radius: 'float', height: 'float', arc_size: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.CylindricalJoint",
            "signature": "build123d.CylindricalJoint(label: 'str', to_part: 'Union[Solid, Compound]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), angle_reference: 'VectorLike' = None, linear_range: 'tuple[float, float]' = (0, inf), angular_range: 'tuple[float, float]' = (0, 360))",
            "methods": [
                {
                    "name": "build123d.CylindricalJoint.connect_to",
                    "signature": "build123d.CylindricalJoint.connect_to(self, other: 'RigidJoint', *, position: 'float' = None, angle: 'float' = None)"
                },
                {
                    "name": "build123d.CylindricalJoint.relative_to",
                    "signature": "build123d.CylindricalJoint.relative_to(self, other: 'RigidJoint', *, position: 'float' = None, angle: 'float' = None)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.DimensionLine",
            "signature": "build123d.DimensionLine(path: Union[build123d.topology.Wire, build123d.topology.Edge, list[Union[build123d.geometry.Vector, build123d.topology.Vertex, tuple[float, float, float]]]], draft: build123d.drafting.Draft = None, sketch: build123d.topology.Sketch = None, label: str = None, arrows: tuple[bool, bool] = (True, True), tolerance: Union[float, tuple[float, float]] = None, label_angle: bool = False, mode: build123d.build_enums.Mode = <Mode.ADD>) -> build123d.topology.Sketch",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.DotLength",
            "signature": "build123d.DotLength()",
            "methods": [],
            "variables": [
                "INKSCAPE_COMPAT",
                "QCAD_IMPERIAL",
                "TRUE_DOT",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.DoubleTangentArc",
            "signature": "build123d.DoubleTangentArc(pnt: 'VectorLike', tangent: 'VectorLike', other: 'Union[Curve, Edge, Wire]', keep: 'Keep' = <Keep.TOP>, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Draft",
            "signature": "build123d.Draft(font_size: float = 5.0, font: str = 'Arial', font_style: build123d.build_enums.FontStyle = <FontStyle.REGULAR>, head_type: build123d.build_enums.HeadType = <HeadType.CURVED>, arrow_length: float = 3.0, line_width: float = 0.5, pad_around_text: float = 2.0, unit: build123d.build_enums.Unit = <Unit.MM>, number_display: build123d.build_enums.NumberDisplay = <NumberDisplay.DECIMAL>, display_units: bool = True, decimal_precision: int = 2, fractional_precision: int = 64, extension_gap: float = 2.0) -> None",
            "methods": [],
            "variables": [
                "arrow_length",
                "decimal_precision",
                "display_units",
                "extension_gap",
                "font",
                "font_size",
                "font_style",
                "fractional_precision",
                "head_type",
                "is_metric",
                "line_width",
                "number_display",
                "pad_around_text",
                "unit",
                "unit_LUT"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Drawing",
            "signature": "build123d.Drawing(shape: build123d.topology.Shape, *, look_at: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = None, look_from: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = (1, -1, 1), look_up: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = (0, 0, 1), with_hidden: bool = True, focus: Optional[float] = None)",
            "methods": [],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.Edge",
            "signature": "build123d.Edge(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Edge.close",
                    "signature": "build123d.Edge.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Edge.distribute_locations",
                    "signature": "build123d.Edge.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Edge.find_intersection_points",
                    "signature": "build123d.Edge.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.Edge.find_tangent",
                    "signature": "build123d.Edge.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.Edge.intersect",
                    "signature": "build123d.Edge.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.Edge.make_bezier",
                    "signature": "build123d.Edge.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_circle",
                    "signature": "build123d.Edge.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_ellipse",
                    "signature": "build123d.Edge.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_helix",
                    "signature": "build123d.Edge.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Edge.make_line",
                    "signature": "build123d.Edge.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_mid_way",
                    "signature": "build123d.Edge.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_spline",
                    "signature": "build123d.Edge.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_spline_approx",
                    "signature": "build123d.Edge.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_tangent_arc",
                    "signature": "build123d.Edge.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_three_point_arc",
                    "signature": "build123d.Edge.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.param_at_point",
                    "signature": "build123d.Edge.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Edge.project_to_shape",
                    "signature": "build123d.Edge.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.Edge.reversed",
                    "signature": "build123d.Edge.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.to_axis",
                    "signature": "build123d.Edge.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Edge.to_wire",
                    "signature": "build123d.Edge.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Edge.trim",
                    "signature": "build123d.Edge.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.trim_to_length",
                    "signature": "build123d.Edge.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Ellipse",
            "signature": "build123d.Ellipse(x_radius: 'float', y_radius: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.EllipticalCenterArc",
            "signature": "build123d.EllipticalCenterArc(center: 'VectorLike', x_radius: 'float', y_radius: 'float', start_angle: 'float' = 0.0, end_angle: 'float' = 90.0, rotation: 'float' = 0.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.EllipticalStartArc",
            "signature": "build123d.EllipticalStartArc(start: 'VectorLike', end: 'VectorLike', x_radius: 'float', y_radius: 'float', rotation: 'float' = 0.0, large_arc: 'bool' = False, sweep_flag: 'bool' = True, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), mode: 'Mode' = <Mode.ADD>) -> 'Edge'",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Export2D",
            "signature": "build123d.Export2D()",
            "methods": [],
            "variables": [
                "DEFAULT_COLOR_INDEX",
                "DEFAULT_LINE_TYPE",
                "DEFAULT_LINE_WEIGHT",
                "LINETYPE_DEFS",
                "LTYPE_SCALE",
                "PARAMETRIC_TOLERANCE"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.ExportDXF",
            "signature": "build123d.ExportDXF(version: str = 'AC1027', unit: build123d.build_enums.Unit = <Unit.MM>, color: Optional[build123d.exporters.ColorIndex] = None, line_weight: Optional[float] = None, line_type: Optional[build123d.exporters.LineType] = None)",
            "methods": [
                {
                    "name": "build123d.ExportDXF.add_layer",
                    "signature": "build123d.ExportDXF.add_layer(self, name: str, *, color: Optional[build123d.exporters.ColorIndex] = None, line_weight: Optional[float] = None, line_type: Optional[build123d.exporters.LineType] = None) -> Self"
                },
                {
                    "name": "build123d.ExportDXF.add_shape",
                    "signature": "build123d.ExportDXF.add_shape(self, shape: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]], layer: str = '') -> Self"
                },
                {
                    "name": "build123d.ExportDXF.write",
                    "signature": "build123d.ExportDXF.write(self, file_name: Union[os.PathLike, str, bytes])"
                }
            ],
            "variables": [
                "DEFAULT_COLOR_INDEX",
                "DEFAULT_LINE_TYPE",
                "DEFAULT_LINE_WEIGHT",
                "LINETYPE_DEFS",
                "LTYPE_SCALE",
                "METRIC_UNITS",
                "PARAMETRIC_TOLERANCE"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.ExportSVG",
            "signature": "build123d.ExportSVG(unit: build123d.build_enums.Unit = <Unit.MM>, scale: float = 1, margin: float = 0, fit_to_stroke: bool = True, precision: int = 6, fill_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = None, line_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = <ColorIndex.BLACK: 7>, line_weight: float = 0.09, line_type: build123d.exporters.LineType = <LineType.CONTINUOUS: 'CONTINUOUS'>, dot_length: Union[build123d.exporters.DotLength, float] = <DotLength.INKSCAPE_COMPAT: 0.01>)",
            "methods": [
                {
                    "name": "build123d.ExportSVG.add_layer",
                    "signature": "build123d.ExportSVG.add_layer(self, name: str, *, fill_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = None, line_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = <ColorIndex.BLACK: 7>, line_weight: float = 0.09, line_type: build123d.exporters.LineType = <LineType.CONTINUOUS: 'CONTINUOUS'>) -> Self"
                },
                {
                    "name": "build123d.ExportSVG.add_shape",
                    "signature": "build123d.ExportSVG.add_shape(self, shape: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]], layer: str = '', reverse_wires: bool = False)"
                },
                {
                    "name": "build123d.ExportSVG.write",
                    "signature": "build123d.ExportSVG.write(self, path: Union[os.PathLike, str, bytes])"
                }
            ],
            "variables": [
                "DEFAULT_COLOR_INDEX",
                "DEFAULT_LINE_TYPE",
                "DEFAULT_LINE_WEIGHT",
                "LINETYPE_DEFS",
                "LTYPE_SCALE",
                "PARAMETRIC_TOLERANCE"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.ExtensionLine",
            "signature": "build123d.ExtensionLine(border: Union[build123d.topology.Wire, build123d.topology.Edge, list[Union[build123d.geometry.Vector, build123d.topology.Vertex, tuple[float, float, float]]]], offset: float, draft: build123d.drafting.Draft, sketch: build123d.topology.Sketch = None, label: str = None, arrows: tuple[bool, bool] = (True, True), tolerance: Union[float, tuple[float, float]] = None, label_angle: bool = False, project_line: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = None, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Extrinsic",
            "signature": "build123d.Extrinsic()",
            "methods": [],
            "variables": [
                "XYX",
                "XYZ",
                "XZX",
                "XZY",
                "YXY",
                "YXZ",
                "YZX",
                "YZY",
                "ZXY",
                "ZXZ",
                "ZYX",
                "ZYZ",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Face",
            "signature": "build123d.Face(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Face.center",
                    "signature": "build123d.Face.center(self, center_of=<CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Face.chamfer_2d",
                    "signature": "build123d.Face.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.fillet_2d",
                    "signature": "build123d.Face.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Face'"
                },
                {
                    "name": "build123d.Face.inner_wires",
                    "signature": "build123d.Face.inner_wires(self) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.Face.is_coplanar",
                    "signature": "build123d.Face.is_coplanar(self, plane: 'Plane') -> 'bool'"
                },
                {
                    "name": "build123d.Face.is_inside",
                    "signature": "build123d.Face.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Face.location_at",
                    "signature": "build123d.Face.location_at(self, u: 'float', v: 'float', x_dir: 'VectorLike' = None) -> 'Location'"
                },
                {
                    "name": "build123d.Face.make_bezier_surface",
                    "signature": "build123d.Face.make_bezier_surface(points: 'list[list[VectorLike]]', weights: 'list[list[float]]' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_from_wires",
                    "signature": "build123d.Face.make_from_wires(outer_wire: 'Wire', inner_wires: 'Iterable[Wire]' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_holes",
                    "signature": "build123d.Face.make_holes(self, interior_wires: 'list[Wire]') -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_plane",
                    "signature": "build123d.Face.make_plane(plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_rect",
                    "signature": "build123d.Face.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_surface",
                    "signature": "build123d.Face.make_surface(exterior: 'Union[Wire, Iterable[Edge]]', surface_points: 'Iterable[VectorLike]' = None, interior_wires: 'Iterable[Wire]' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_surface_from_array_of_points",
                    "signature": "build123d.Face.make_surface_from_array_of_points(points: 'list[list[VectorLike]]', tol: 'float' = 0.01, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 3) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_surface_from_curves",
                    "signature": "build123d.Face.make_surface_from_curves(curve1: 'Union[Edge, Wire]', curve2: 'Union[Edge, Wire]') -> 'Face'"
                },
                {
                    "name": "build123d.Face.normal_at",
                    "signature": "build123d.Face.normal_at(self, *args, **kwargs) -> 'Vector'"
                },
                {
                    "name": "build123d.Face.offset",
                    "signature": "build123d.Face.offset(self, amount: 'float') -> 'Face'"
                },
                {
                    "name": "build123d.Face.outer_wire",
                    "signature": "build123d.Face.outer_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Face.position_at",
                    "signature": "build123d.Face.position_at(self, u: 'float', v: 'float') -> 'Vector'"
                },
                {
                    "name": "build123d.Face.project_to_shape",
                    "signature": "build123d.Face.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike', taper: 'float' = 0) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Face.project_to_shape_alt",
                    "signature": "build123d.Face.project_to_shape_alt(self, target_object: 'Shape', direction: 'VectorLike') -> 'Union[None, Face, Compound]'"
                },
                {
                    "name": "build123d.Face.sew_faces",
                    "signature": "build123d.Face.sew_faces(faces: 'Iterable[Face]') -> 'list[ShapeList[Face]]'"
                },
                {
                    "name": "build123d.Face.sweep",
                    "signature": "build123d.Face.sweep(profile: 'Union[Curve, Edge, Wire]', path: 'Union[Curve, Edge, Wire]', transition=<Transition.TRANSFORMED>) -> 'Face'"
                },
                {
                    "name": "build123d.Face.thicken",
                    "signature": "build123d.Face.thicken(self, depth: 'float', normal_override: 'Optional[VectorLike]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Face.wire",
                    "signature": "build123d.Face.wire(self) -> 'Wire'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "center_location",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "geometry",
                "height",
                "is_leaf",
                "is_manifold",
                "is_planar",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume",
                "width"
            ],
            "parent_classes": [
                "Shape",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.FilletPolyline",
            "signature": "build123d.FilletPolyline(*pts: 'Union[VectorLike, Iterable[VectorLike]]', radius: 'float', close: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Wire",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.FontStyle",
            "signature": "build123d.FontStyle()",
            "methods": [],
            "variables": [
                "BOLD",
                "ITALIC",
                "REGULAR",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.FrameMethod",
            "signature": "build123d.FrameMethod()",
            "methods": [],
            "variables": [
                "CORRECTED",
                "FRENET",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.GeomType",
            "signature": "build123d.GeomType()",
            "methods": [],
            "variables": [
                "BEZIER",
                "BSPLINE",
                "CIRCLE",
                "CONE",
                "CYLINDER",
                "ELLIPSE",
                "EXTRUSION",
                "HYPERBOLA",
                "LINE",
                "OFFSET",
                "OTHER",
                "PARABOLA",
                "PLANE",
                "REVOLUTION",
                "SPHERE",
                "TORUS",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.GridLocations",
            "signature": "build123d.GridLocations(x_spacing: 'float', y_spacing: 'float', x_count: 'int', y_count: 'int', align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>))",
            "methods": [],
            "variables": [
                "locations"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.GroupBy",
            "signature": "build123d.GroupBy(key_f: 'Callable[[T], K]', shapelist: 'Iterable[T]', *, reverse: 'bool' = False)",
            "methods": [
                {
                    "name": "build123d.GroupBy.group",
                    "signature": "build123d.GroupBy.group(self, key: 'K')"
                },
                {
                    "name": "build123d.GroupBy.group_for",
                    "signature": "build123d.GroupBy.group_for(self, shape: 'T')"
                }
            ],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.HeadType",
            "signature": "build123d.HeadType()",
            "methods": [],
            "variables": [
                "CURVED",
                "FILLETED",
                "STRAIGHT",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Helix",
            "signature": "build123d.Helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), direction: 'VectorLike' = (0, 0, 1), cone_angle: 'float' = 0, lefthand: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.HexLocations",
            "signature": "build123d.HexLocations(radius: 'float', x_count: 'int', y_count: 'int', major_radius: 'bool' = False, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>))",
            "methods": [],
            "variables": [
                "locations"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Hole",
            "signature": "build123d.Hole(radius: 'float', depth: 'float' = None, mode: 'Mode' = <Mode.SUBTRACT>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.IntersectingLine",
            "signature": "build123d.IntersectingLine(start: 'VectorLike', direction: 'VectorLike', other: 'Union[Curve, Edge, Wire]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Intrinsic",
            "signature": "build123d.Intrinsic()",
            "methods": [],
            "variables": [
                "XYX",
                "XYZ",
                "XZX",
                "XZY",
                "YXY",
                "YXZ",
                "YZX",
                "YZY",
                "ZXY",
                "ZXZ",
                "ZYX",
                "ZYZ",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.JernArc",
            "signature": "build123d.JernArc(start: 'VectorLike', tangent: 'VectorLike', radius: 'float', arc_size: 'float', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Joint",
            "signature": "build123d.Joint(label: 'str', parent: 'Union[Solid, Compound]')",
            "methods": [
                {
                    "name": "build123d.Joint.connect_to",
                    "signature": "build123d.Joint.connect_to(self, other: 'Joint')"
                },
                {
                    "name": "build123d.Joint.relative_to",
                    "signature": "build123d.Joint.relative_to(self, other: 'Joint') -> 'Location'"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Keep",
            "signature": "build123d.Keep()",
            "methods": [],
            "variables": [
                "BOTH",
                "BOTTOM",
                "INSIDE",
                "OUTSIDE",
                "TOP",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Kind",
            "signature": "build123d.Kind()",
            "methods": [],
            "variables": [
                "ARC",
                "INTERSECTION",
                "TANGENT",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.LengthMode",
            "signature": "build123d.LengthMode()",
            "methods": [],
            "variables": [
                "DIAGONAL",
                "HORIZONTAL",
                "VERTICAL",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Line",
            "signature": "build123d.Line(*pts: 'Union[VectorLike, Iterable[VectorLike]]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.LineType",
            "signature": "build123d.LineType()",
            "methods": [],
            "variables": [
                "BORDER",
                "BORDER2",
                "BORDERX2",
                "CENTER",
                "CENTER2",
                "CENTERX2",
                "CONTINUOUS",
                "DASHDOT",
                "DASHDOT2",
                "DASHDOTX2",
                "DASHED",
                "DASHED2",
                "DASHEDX2",
                "DIVIDE",
                "DIVIDE2",
                "DIVIDEX2",
                "DOT",
                "DOT2",
                "DOTX2",
                "HIDDEN",
                "HIDDEN2",
                "HIDDENX2",
                "ISO_DASH",
                "ISO_DASH_DOT",
                "ISO_DASH_DOUBLE_DOT",
                "ISO_DASH_SPACE",
                "ISO_DASH_TRIPLE_DOT",
                "ISO_DOT",
                "ISO_DOUBLE_DASH_DOT",
                "ISO_DOUBLE_DASH_DOUBLE_DOT",
                "ISO_DOUBLE_DASH_TRIPLE_DOT",
                "ISO_LONG_DASH_DOT",
                "ISO_LONG_DASH_DOUBLE_DOT",
                "ISO_LONG_DASH_DOUBLE_SHORT_DASH",
                "ISO_LONG_DASH_SHORT_DASH",
                "ISO_LONG_DASH_TRIPLE_DOT",
                "PHANTOM",
                "PHANTOM2",
                "PHANTOMX2"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.LinearJoint",
            "signature": "build123d.LinearJoint(label: 'str', to_part: 'Union[Solid, Compound]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), linear_range: 'tuple[float, float]' = (0, inf))",
            "methods": [
                {
                    "name": "build123d.LinearJoint.connect_to",
                    "signature": "build123d.LinearJoint.connect_to(self, other: 'Joint', **kwargs)"
                },
                {
                    "name": "build123d.LinearJoint.relative_to",
                    "signature": "build123d.LinearJoint.relative_to(self, other, **kwargs)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Location",
            "signature": "build123d.Location(*args)",
            "methods": [
                {
                    "name": "build123d.Location.intersect",
                    "signature": "build123d.Location.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Location.inverse",
                    "signature": "build123d.Location.inverse(self) -> 'Location'"
                },
                {
                    "name": "build123d.Location.to_axis",
                    "signature": "build123d.Location.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Location.to_tuple",
                    "signature": "build123d.Location.to_tuple(self) -> 'tuple[tuple[float, float, float], tuple[float, float, float]]'"
                }
            ],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.LocationEncoder",
            "signature": "build123d.LocationEncoder()",
            "methods": [
                {
                    "name": "build123d.LocationEncoder.default",
                    "signature": "build123d.LocationEncoder.default(self, o: 'Location') -> 'dict'"
                },
                {
                    "name": "build123d.LocationEncoder.location_hook",
                    "signature": "build123d.LocationEncoder.location_hook(obj) -> 'dict'"
                }
            ],
            "variables": [
                "item_separator",
                "key_separator"
            ],
            "parent_classes": [
                "JSONEncoder"
            ]
        },
        {
            "name": "build123d.LocationList",
            "signature": "build123d.LocationList(locations: 'list[Location]')",
            "methods": [],
            "variables": [
                "locations"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Locations",
            "signature": "build123d.Locations(*pts: 'Union[VectorLike, Vertex, Location, Face, Plane, Axis, Iterable[VectorLike, Vertex, Location, Face, Plane, Axis]]')",
            "methods": [],
            "variables": [
                "locations"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Matrix",
            "signature": "build123d.Matrix(matrix=None)",
            "methods": [
                {
                    "name": "build123d.Matrix.inverse",
                    "signature": "build123d.Matrix.inverse(self) -> 'Matrix'"
                },
                {
                    "name": "build123d.Matrix.multiply",
                    "signature": "build123d.Matrix.multiply(self, other)"
                },
                {
                    "name": "build123d.Matrix.rotate",
                    "signature": "build123d.Matrix.rotate(self, axis: 'Axis', angle: 'float')"
                },
                {
                    "name": "build123d.Matrix.transposed_list",
                    "signature": "build123d.Matrix.transposed_list(self) -> 'Sequence[float]'"
                }
            ],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.MeshType",
            "signature": "build123d.MeshType()",
            "methods": [],
            "variables": [
                "MODEL",
                "OTHER",
                "SOLIDSUPPORT",
                "SUPPORT",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Mesher",
            "signature": "build123d.Mesher(unit: build123d.build_enums.Unit = <Unit.MM>)",
            "methods": [
                {
                    "name": "build123d.Mesher.add_code_to_metadata",
                    "signature": "build123d.Mesher.add_code_to_metadata(self)"
                },
                {
                    "name": "build123d.Mesher.add_meta_data",
                    "signature": "build123d.Mesher.add_meta_data(self, name_space: str, name: str, value: str, metadata_type: str, must_preserve: bool)"
                },
                {
                    "name": "build123d.Mesher.add_shape",
                    "signature": "build123d.Mesher.add_shape(self, shape: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]], linear_deflection: float = 0.001, angular_deflection: float = 0.1, mesh_type: build123d.build_enums.MeshType = <MeshType.MODEL>, part_number: str = None, uuid_value: <module 'uuid' from '/home/pding/mambaforge/envs/codecad/lib/python3.11/uuid.py'> = None)"
                },
                {
                    "name": "build123d.Mesher.get_mesh_properties",
                    "signature": "build123d.Mesher.get_mesh_properties(self) -> list[dict]"
                },
                {
                    "name": "build123d.Mesher.get_meta_data",
                    "signature": "build123d.Mesher.get_meta_data(self) -> list[dict]"
                },
                {
                    "name": "build123d.Mesher.get_meta_data_by_key",
                    "signature": "build123d.Mesher.get_meta_data_by_key(self, name_space: str, name: str) -> dict"
                },
                {
                    "name": "build123d.Mesher.read",
                    "signature": "build123d.Mesher.read(self, file_name: Union[os.PathLike, str, bytes]) -> list[build123d.topology.Shape]"
                },
                {
                    "name": "build123d.Mesher.write",
                    "signature": "build123d.Mesher.write(self, file_name: Union[os.PathLike, str, bytes])"
                }
            ],
            "variables": [
                "library_version",
                "mesh_count",
                "model_unit",
                "triangle_counts",
                "vertex_counts"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Mixin1D",
            "signature": "build123d.Mixin1D()",
            "methods": [
                {
                    "name": "build123d.Mixin1D.center",
                    "signature": "build123d.Mixin1D.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.common_plane",
                    "signature": "build123d.Mixin1D.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Mixin1D.end_point",
                    "signature": "build123d.Mixin1D.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.location_at",
                    "signature": "build123d.Mixin1D.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Mixin1D.locations",
                    "signature": "build123d.Mixin1D.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Mixin1D.normal",
                    "signature": "build123d.Mixin1D.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.offset_2d",
                    "signature": "build123d.Mixin1D.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Mixin1D.param_at",
                    "signature": "build123d.Mixin1D.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Mixin1D.perpendicular_line",
                    "signature": "build123d.Mixin1D.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Mixin1D.position_at",
                    "signature": "build123d.Mixin1D.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.positions",
                    "signature": "build123d.Mixin1D.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Mixin1D.project",
                    "signature": "build123d.Mixin1D.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Mixin1D.start_point",
                    "signature": "build123d.Mixin1D.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.tangent_angle_at",
                    "signature": "build123d.Mixin1D.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Mixin1D.tangent_at",
                    "signature": "build123d.Mixin1D.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                }
            ],
            "variables": [
                "is_closed",
                "is_forward",
                "length",
                "radius",
                "volume"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Mixin3D",
            "signature": "build123d.Mixin3D()",
            "methods": [
                {
                    "name": "build123d.Mixin3D.center",
                    "signature": "build123d.Mixin3D.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin3D.chamfer",
                    "signature": "build123d.Mixin3D.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Mixin3D.dprism",
                    "signature": "build123d.Mixin3D.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Mixin3D.fillet",
                    "signature": "build123d.Mixin3D.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Mixin3D.hollow",
                    "signature": "build123d.Mixin3D.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Mixin3D.is_inside",
                    "signature": "build123d.Mixin3D.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Mixin3D.max_fillet",
                    "signature": "build123d.Mixin3D.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Mixin3D.offset_3d",
                    "signature": "build123d.Mixin3D.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                }
            ],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.Mode",
            "signature": "build123d.Mode()",
            "methods": [],
            "variables": [
                "ADD",
                "INTERSECT",
                "PRIVATE",
                "REPLACE",
                "SUBTRACT",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.NumberDisplay",
            "signature": "build123d.NumberDisplay()",
            "methods": [],
            "variables": [
                "DECIMAL",
                "FRACTION",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.PageSize",
            "signature": "build123d.PageSize()",
            "methods": [],
            "variables": [
                "A0",
                "A1",
                "A10",
                "A2",
                "A3",
                "A4",
                "A5",
                "A6",
                "A7",
                "A8",
                "A9",
                "LEDGER",
                "LEGAL",
                "LETTER",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Part",
            "signature": "build123d.Part()",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Plane",
            "signature": "build123d.Plane(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Plane.contains",
                    "signature": "build123d.Plane.contains(self, obj: 'Union[VectorLike, Axis]', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Plane.from_local_coords",
                    "signature": "build123d.Plane.from_local_coords(self, obj: 'Union[tuple, Vector, Any, BoundBox]')"
                },
                {
                    "name": "build123d.Plane.get_topods_face_normal",
                    "signature": "build123d.Plane.get_topods_face_normal(face: 'TopoDS_Face') -> 'Vector'"
                },
                {
                    "name": "build123d.Plane.intersect",
                    "signature": "build123d.Plane.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Plane.location_between",
                    "signature": "build123d.Plane.location_between(self, other: 'Plane') -> 'Location'"
                },
                {
                    "name": "build123d.Plane.move",
                    "signature": "build123d.Plane.move(self, loc: 'Location') -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.offset",
                    "signature": "build123d.Plane.offset(self, amount: 'float') -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.reverse",
                    "signature": "build123d.Plane.reverse(self) -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.rotated",
                    "signature": "build123d.Plane.rotated(self, rotation: 'VectorLike' = (0, 0, 0), ordering: 'Union[Extrinsic, Intrinsic]' = None) -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.shift_origin",
                    "signature": "build123d.Plane.shift_origin(self, locator: \"Union[Axis, VectorLike, 'Vertex']\") -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.to_gp_ax2",
                    "signature": "build123d.Plane.to_gp_ax2(self) -> 'gp_Ax2'"
                },
                {
                    "name": "build123d.Plane.to_local_coords",
                    "signature": "build123d.Plane.to_local_coords(self, obj: 'Union[VectorLike, Any, BoundBox]')"
                }
            ],
            "variables": [
                "location",
                "origin"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.PlaneMeta",
            "signature": "build123d.PlaneMeta()",
            "methods": [],
            "variables": [
                "XY",
                "XZ",
                "YX",
                "YZ",
                "ZX",
                "ZY",
                "back",
                "bottom",
                "front",
                "isometric",
                "left",
                "right",
                "top"
            ],
            "parent_classes": [
                "type"
            ]
        },
        {
            "name": "build123d.PolarLine",
            "signature": "build123d.PolarLine(start: 'VectorLike', length: 'float', angle: 'float' = None, direction: 'VectorLike' = None, length_mode: 'LengthMode' = <LengthMode.DIAGONAL>, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.PolarLocations",
            "signature": "build123d.PolarLocations(radius: 'float', count: 'int', start_angle: 'float' = 0.0, angular_range: 'float' = 360.0, rotate: 'bool' = True, endpoint: 'bool' = False)",
            "methods": [],
            "variables": [
                "locations"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Polygon",
            "signature": "build123d.Polygon(*pts: 'Union[VectorLike, Iterable[VectorLike]]', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Polyline",
            "signature": "build123d.Polyline(*pts: 'Union[VectorLike, Iterable[VectorLike]]', close: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Wire",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Pos",
            "signature": "build123d.Pos(*args, **kwargs)",
            "methods": [],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ],
            "parent_classes": [
                "Location"
            ]
        },
        {
            "name": "build123d.PositionMode",
            "signature": "build123d.PositionMode()",
            "methods": [],
            "variables": [
                "LENGTH",
                "PARAMETER",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.PrecisionMode",
            "signature": "build123d.PrecisionMode()",
            "methods": [],
            "variables": [
                "AVERAGE",
                "GREATEST",
                "LEAST",
                "SESSION",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.RadiusArc",
            "signature": "build123d.RadiusArc(start_point: 'VectorLike', end_point: 'VectorLike', radius: 'float', short_sagitta: 'bool' = True, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Rectangle",
            "signature": "build123d.Rectangle(width: 'float', height: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.RectangleRounded",
            "signature": "build123d.RectangleRounded(width: 'float', height: 'float', radius: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.RegularPolygon",
            "signature": "build123d.RegularPolygon(radius: 'float', side_count: 'int', major_radius: 'bool' = True, rotation: 'float' = 0, align: 'tuple[Align, Align]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.RevoluteJoint",
            "signature": "build123d.RevoluteJoint(label: 'str', to_part: 'Union[Solid, Compound]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), angle_reference: 'VectorLike' = None, angular_range: 'tuple[float, float]' = (0, 360))",
            "methods": [
                {
                    "name": "build123d.RevoluteJoint.connect_to",
                    "signature": "build123d.RevoluteJoint.connect_to(self, other: 'RigidJoint', *, angle: 'float' = None)"
                },
                {
                    "name": "build123d.RevoluteJoint.relative_to",
                    "signature": "build123d.RevoluteJoint.relative_to(self, other: 'RigidJoint', *, angle: 'float' = None)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.RigidJoint",
            "signature": "build123d.RigidJoint(label: 'str', to_part: 'Optional[Union[Solid, Compound]]' = None, joint_location: 'Union[Location, None]' = None)",
            "methods": [
                {
                    "name": "build123d.RigidJoint.connect_to",
                    "signature": "build123d.RigidJoint.connect_to(self, other: 'Joint', **kwargs)"
                },
                {
                    "name": "build123d.RigidJoint.relative_to",
                    "signature": "build123d.RigidJoint.relative_to(self, other: 'Joint', **kwargs) -> 'Location'"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Rot",
            "signature": "build123d.Rot(*args, **kwargs)",
            "methods": [],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ],
            "parent_classes": [
                "Location"
            ]
        },
        {
            "name": "build123d.Rotation",
            "signature": "build123d.Rotation(*args, **kwargs)",
            "methods": [],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ],
            "parent_classes": [
                "Location"
            ]
        },
        {
            "name": "build123d.SagittaArc",
            "signature": "build123d.SagittaArc(start_point: 'VectorLike', end_point: 'VectorLike', sagitta: 'float', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Select",
            "signature": "build123d.Select()",
            "methods": [],
            "variables": [
                "ALL",
                "LAST",
                "NEW",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Shape",
            "signature": "build123d.Shape(obj: 'TopoDS_Shape' = None, label: 'str' = '', color: 'Color' = None, parent: 'Compound' = None)",
            "methods": [
                {
                    "name": "build123d.Shape.bounding_box",
                    "signature": "build123d.Shape.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Shape.cast",
                    "signature": "build123d.Shape.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.center",
                    "signature": "build123d.Shape.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Shape.clean",
                    "signature": "build123d.Shape.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.closest_points",
                    "signature": "build123d.Shape.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Shape.combined_center",
                    "signature": "build123d.Shape.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Shape.compound",
                    "signature": "build123d.Shape.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Shape.compounds",
                    "signature": "build123d.Shape.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Shape.compute_mass",
                    "signature": "build123d.Shape.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Shape.copy",
                    "signature": "build123d.Shape.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.copy_attributes_to",
                    "signature": "build123d.Shape.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Shape.cut",
                    "signature": "build123d.Shape.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.distance",
                    "signature": "build123d.Shape.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Shape.distance_to",
                    "signature": "build123d.Shape.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Shape.distance_to_with_closest_points",
                    "signature": "build123d.Shape.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Shape.distances",
                    "signature": "build123d.Shape.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Shape.edge",
                    "signature": "build123d.Shape.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Shape.edges",
                    "signature": "build123d.Shape.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Shape.export_brep",
                    "signature": "build123d.Shape.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Shape.export_step",
                    "signature": "build123d.Shape.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Shape.export_stl",
                    "signature": "build123d.Shape.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Shape.extrude",
                    "signature": "build123d.Shape.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.face",
                    "signature": "build123d.Shape.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Shape.faces",
                    "signature": "build123d.Shape.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Shape.faces_intersected_by_axis",
                    "signature": "build123d.Shape.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Shape.find_intersection",
                    "signature": "build123d.Shape.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Shape.find_intersection_points",
                    "signature": "build123d.Shape.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Shape.fix",
                    "signature": "build123d.Shape.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.fuse",
                    "signature": "build123d.Shape.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.hash_code",
                    "signature": "build123d.Shape.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Shape.intersect",
                    "signature": "build123d.Shape.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Shape.is_equal",
                    "signature": "build123d.Shape.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Shape.is_null",
                    "signature": "build123d.Shape.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Shape.is_same",
                    "signature": "build123d.Shape.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Shape.is_valid",
                    "signature": "build123d.Shape.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Shape.locate",
                    "signature": "build123d.Shape.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.located",
                    "signature": "build123d.Shape.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.mesh",
                    "signature": "build123d.Shape.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Shape.mirror",
                    "signature": "build123d.Shape.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.move",
                    "signature": "build123d.Shape.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.moved",
                    "signature": "build123d.Shape.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.project_faces",
                    "signature": "build123d.Shape.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Shape.project_to_viewport",
                    "signature": "build123d.Shape.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Shape.relocate",
                    "signature": "build123d.Shape.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Shape.rotate",
                    "signature": "build123d.Shape.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.scale",
                    "signature": "build123d.Shape.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.shape_type",
                    "signature": "build123d.Shape.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Shape.shell",
                    "signature": "build123d.Shape.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Shape.shells",
                    "signature": "build123d.Shape.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Shape.show_topology",
                    "signature": "build123d.Shape.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Shape.solid",
                    "signature": "build123d.Shape.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Shape.solids",
                    "signature": "build123d.Shape.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Shape.split",
                    "signature": "build123d.Shape.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.split_by_perimeter",
                    "signature": "build123d.Shape.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Shape.tessellate",
                    "signature": "build123d.Shape.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Shape.to_arcs",
                    "signature": "build123d.Shape.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Shape.to_splines",
                    "signature": "build123d.Shape.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Shape.to_vtk_poly_data",
                    "signature": "build123d.Shape.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Shape.transform_geometry",
                    "signature": "build123d.Shape.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.transform_shape",
                    "signature": "build123d.Shape.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.transformed",
                    "signature": "build123d.Shape.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.translate",
                    "signature": "build123d.Shape.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.vertex",
                    "signature": "build123d.Shape.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Shape.vertices",
                    "signature": "build123d.Shape.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Shape.wire",
                    "signature": "build123d.Shape.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Shape.wires",
                    "signature": "build123d.Shape.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size"
            ],
            "parent_classes": [
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.ShapeList",
            "signature": "build123d.ShapeList()",
            "methods": [
                {
                    "name": "build123d.ShapeList.compound",
                    "signature": "build123d.ShapeList.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.ShapeList.compounds",
                    "signature": "build123d.ShapeList.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.ShapeList.edge",
                    "signature": "build123d.ShapeList.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.ShapeList.edges",
                    "signature": "build123d.ShapeList.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.ShapeList.face",
                    "signature": "build123d.ShapeList.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.ShapeList.faces",
                    "signature": "build123d.ShapeList.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ShapeList.filter_by",
                    "signature": "build123d.ShapeList.filter_by(self, filter_by: 'Union[ShapePredicate, Axis, Plane, GeomType]', reverse: 'bool' = False, tolerance: 'float' = 1e-05) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.filter_by_position",
                    "signature": "build123d.ShapeList.filter_by_position(self, axis: 'Axis', minimum: 'float', maximum: 'float', inclusive: 'tuple[bool, bool]' = (True, True)) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.group_by",
                    "signature": "build123d.ShapeList.group_by(self, group_by: 'Union[Callable[[Shape], K], Axis, Edge, Wire, SortBy]' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), reverse=False, tol_digits=6) -> 'GroupBy[T, K]'"
                },
                {
                    "name": "build123d.ShapeList.shell",
                    "signature": "build123d.ShapeList.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.ShapeList.shells",
                    "signature": "build123d.ShapeList.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.ShapeList.solid",
                    "signature": "build123d.ShapeList.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.ShapeList.solids",
                    "signature": "build123d.ShapeList.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.ShapeList.sort_by",
                    "signature": "build123d.ShapeList.sort_by(self, sort_by: 'Union[Axis, Edge, Wire, SortBy]' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), reverse: 'bool' = False) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.sort_by_distance",
                    "signature": "build123d.ShapeList.sort_by_distance(self, other: 'Union[Shape, VectorLike]', reverse: 'bool' = False) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.vertex",
                    "signature": "build123d.ShapeList.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.ShapeList.vertices",
                    "signature": "build123d.ShapeList.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.ShapeList.wire",
                    "signature": "build123d.ShapeList.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.ShapeList.wires",
                    "signature": "build123d.ShapeList.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "first",
                "last"
            ],
            "parent_classes": [
                "list"
            ]
        },
        {
            "name": "build123d.ShapePredicate",
            "signature": "build123d.ShapePredicate(*args, **kwargs)",
            "methods": [],
            "variables": [],
            "parent_classes": []
        },
        {
            "name": "build123d.Shell",
            "signature": "build123d.Shell(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Shell.center",
                    "signature": "build123d.Shell.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Shell.make_loft",
                    "signature": "build123d.Shell.make_loft(objs: 'Iterable[Union[Vertex, Wire]]', ruled: 'bool' = False) -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.make_shell",
                    "signature": "build123d.Shell.make_shell(faces: 'Iterable[Face]') -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.sweep",
                    "signature": "build123d.Shell.sweep(profile: 'Union[Curve, Edge, Wire]', path: 'Union[Curve, Edge, Wire]', transition=<Transition.TRANSFORMED>) -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.thicken",
                    "signature": "build123d.Shell.thicken(self, depth: 'float') -> 'Solid'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Side",
            "signature": "build123d.Side()",
            "methods": [],
            "variables": [
                "BOTH",
                "LEFT",
                "RIGHT",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Sketch",
            "signature": "build123d.Sketch()",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.SkipClean",
            "signature": "build123d.SkipClean()",
            "methods": [],
            "variables": [
                "clean"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.SlotArc",
            "signature": "build123d.SlotArc(arc: 'Union[Edge, Wire]', height: 'float', rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.SlotCenterPoint",
            "signature": "build123d.SlotCenterPoint(center: 'VectorLike', point: 'VectorLike', height: 'float', rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.SlotCenterToCenter",
            "signature": "build123d.SlotCenterToCenter(center_separation: 'float', height: 'float', rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.SlotOverall",
            "signature": "build123d.SlotOverall(width: 'float', height: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Solid",
            "signature": "build123d.Solid(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Solid.extrude_linear_with_rotation",
                    "signature": "build123d.Solid.extrude_linear_with_rotation(section: 'Union[Face, Wire]', center: 'VectorLike', normal: 'VectorLike', angle: 'float', inner_wires: 'list[Wire]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.extrude_taper",
                    "signature": "build123d.Solid.extrude_taper(profile: 'Face', direction: 'VectorLike', taper: 'float', flip_inner: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.extrude_until",
                    "signature": "build123d.Solid.extrude_until(section: 'Face', target_object: 'Union[Compound, Solid]', direction: 'VectorLike', until: 'Until' = <Until.NEXT>) -> 'Union[Compound, Solid]'"
                },
                {
                    "name": "build123d.Solid.from_bounding_box",
                    "signature": "build123d.Solid.from_bounding_box(bbox: 'BoundBox') -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_box",
                    "signature": "build123d.Solid.make_box(length: 'float', width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_cone",
                    "signature": "build123d.Solid.make_cone(base_radius: 'float', top_radius: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), angle: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_cylinder",
                    "signature": "build123d.Solid.make_cylinder(radius: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), angle: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_loft",
                    "signature": "build123d.Solid.make_loft(objs: 'Iterable[Union[Vertex, Wire]]', ruled: 'bool' = False) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_solid",
                    "signature": "build123d.Solid.make_solid(shell: 'Shell') -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_sphere",
                    "signature": "build123d.Solid.make_sphere(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), angle1: 'float' = -90, angle2: 'float' = 90, angle3: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_torus",
                    "signature": "build123d.Solid.make_torus(major_radius: 'float', minor_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 0, end_angle: 'float' = 360, major_angle: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_wedge",
                    "signature": "build123d.Solid.make_wedge(delta_x: 'float', delta_y: 'float', delta_z: 'float', min_x: 'float', min_z: 'float', max_x: 'float', max_z: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.revolve",
                    "signature": "build123d.Solid.revolve(section: 'Union[Face, Wire]', angle: 'float', axis: 'Axis', inner_wires: 'list[Wire]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.sweep",
                    "signature": "build123d.Solid.sweep(section: 'Union[Face, Wire]', path: 'Union[Wire, Edge]', inner_wires: 'list[Wire]' = None, make_solid: 'bool' = True, is_frenet: 'bool' = False, mode: 'Union[Vector, Wire, Edge, None]' = None, transition: 'Transition' = <Transition.TRANSFORMED>) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.sweep_multi",
                    "signature": "build123d.Solid.sweep_multi(profiles: 'Iterable[Union[Wire, Face]]', path: 'Union[Wire, Edge]', make_solid: 'bool' = True, is_frenet: 'bool' = False, mode: 'Union[Vector, Wire, Edge, None]' = None) -> 'Solid'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.SortBy",
            "signature": "build123d.SortBy()",
            "methods": [],
            "variables": [
                "AREA",
                "DISTANCE",
                "LENGTH",
                "RADIUS",
                "VOLUME",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Sphere",
            "signature": "build123d.Sphere(radius: 'float', arc_size1: 'float' = -90, arc_size2: 'float' = 90, arc_size3: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Spline",
            "signature": "build123d.Spline(*pts: 'Union[VectorLike, Iterable[VectorLike]]', tangents: 'Iterable[VectorLike]' = None, tangent_scalars: 'Iterable[float]' = None, periodic: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.TangentArc",
            "signature": "build123d.TangentArc(*pts: 'Union[VectorLike, Iterable[VectorLike]]', tangent: 'VectorLike', tangent_from_first: 'bool' = True, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.TechnicalDrawing",
            "signature": "build123d.TechnicalDrawing(designed_by: str = 'build123d', design_date: Optional[datetime.date] = None, page_size: build123d.build_enums.PageSize = <PageSize.A4>, title: str = 'Title', sub_title: str = 'Sub Title', drawing_number: str = 'B3D-1', sheet_number: int = None, drawing_scale: float = 1.0, nominal_text_size: float = 10.0, line_width: float = 0.5, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "margin",
                "orientation",
                "page_sizes",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Text",
            "signature": "build123d.Text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'str' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), path: 'Union[Edge, Wire]' = None, position_on_path: 'float' = 0.0, rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>) -> 'Compound'",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.ThreePointArc",
            "signature": "build123d.ThreePointArc(*pts: 'Union[VectorLike, Iterable[VectorLike]]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "Edge",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Torus",
            "signature": "build123d.Torus(major_radius: 'float', minor_radius: 'float', minor_start_angle: 'float' = 0, minor_end_angle: 'float' = 360, major_angle: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Transition",
            "signature": "build123d.Transition()",
            "methods": [],
            "variables": [
                "RIGHT",
                "ROUND",
                "TRANSFORMED",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Trapezoid",
            "signature": "build123d.Trapezoid(width: 'float', height: 'float', left_side_angle: 'float', right_side_angle: 'float' = None, rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Triangle",
            "signature": "build123d.Triangle(*, a: 'float' = None, b: 'float' = None, c: 'float' = None, A: 'float' = None, B: 'float' = None, C: 'float' = None, align: 'Union[None, Align, tuple[Align, Align]]' = None, rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Unit",
            "signature": "build123d.Unit()",
            "methods": [],
            "variables": [
                "CM",
                "FT",
                "IN",
                "M",
                "MC",
                "MM",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Until",
            "signature": "build123d.Until()",
            "methods": [],
            "variables": [
                "FIRST",
                "LAST",
                "NEXT",
                "PREVIOUS",
                "name",
                "value"
            ],
            "parent_classes": []
        },
        {
            "name": "build123d.Vector",
            "signature": "build123d.Vector(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Vector.center",
                    "signature": "build123d.Vector.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.cross",
                    "signature": "build123d.Vector.cross(self, vec: 'Vector') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.distance_to_plane",
                    "signature": "build123d.Vector.distance_to_plane(self, plane: 'Plane') -> 'float'"
                },
                {
                    "name": "build123d.Vector.dot",
                    "signature": "build123d.Vector.dot(self, vec: 'Vector') -> 'float'"
                },
                {
                    "name": "build123d.Vector.get_angle",
                    "signature": "build123d.Vector.get_angle(self, vec: 'Vector') -> 'float'"
                },
                {
                    "name": "build123d.Vector.get_signed_angle",
                    "signature": "build123d.Vector.get_signed_angle(self, vec: 'Vector', normal: 'Vector' = None) -> 'float'"
                },
                {
                    "name": "build123d.Vector.intersect",
                    "signature": "build123d.Vector.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Vector.multiply",
                    "signature": "build123d.Vector.multiply(self, scale: 'float') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.normalized",
                    "signature": "build123d.Vector.normalized(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.project_to_line",
                    "signature": "build123d.Vector.project_to_line(self, line: 'Vector') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.project_to_plane",
                    "signature": "build123d.Vector.project_to_plane(self, plane: 'Plane') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.reverse",
                    "signature": "build123d.Vector.reverse(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.rotate",
                    "signature": "build123d.Vector.rotate(self, axis: 'Axis', angle: 'float') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.signed_distance_from_plane",
                    "signature": "build123d.Vector.signed_distance_from_plane(self, plane: 'Plane') -> 'float'"
                },
                {
                    "name": "build123d.Vector.to_dir",
                    "signature": "build123d.Vector.to_dir(self) -> 'gp_Dir'"
                },
                {
                    "name": "build123d.Vector.to_pnt",
                    "signature": "build123d.Vector.to_pnt(self) -> 'gp_Pnt'"
                },
                {
                    "name": "build123d.Vector.to_tuple",
                    "signature": "build123d.Vector.to_tuple(self) -> 'tuple[float, float, float]'"
                },
                {
                    "name": "build123d.Vector.transform",
                    "signature": "build123d.Vector.transform(self, affine_transform: 'Matrix', is_direction: 'bool' = False) -> 'Vector'"
                }
            ],
            "variables": [
                "X",
                "Y",
                "Z",
                "length",
                "wrapped"
            ],
            "parent_classes": [
                "_vector_add_sub_wrapper"
            ]
        },
        {
            "name": "build123d.Vertex",
            "signature": "build123d.Vertex(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Vertex.center",
                    "signature": "build123d.Vertex.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vertex.to_tuple",
                    "signature": "build123d.Vertex.to_tuple(self) -> 'tuple[float, float, float]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Wedge",
            "signature": "build123d.Wedge(xsize: 'float', ysize: 'float', zsize: 'float', xmin: 'float', zmin: 'float', xmax: 'float', zmax: 'float', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Compound",
                "Mixin3D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.Wire",
            "signature": "build123d.Wire(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Wire.chamfer_2d",
                    "signature": "build123d.Wire.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.close",
                    "signature": "build123d.Wire.close(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.combine",
                    "signature": "build123d.Wire.combine(wires: 'Iterable[Union[Wire, Edge]]', tol: 'float' = 1e-09) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.Wire.fillet_2d",
                    "signature": "build123d.Wire.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.fix_degenerate_edges",
                    "signature": "build123d.Wire.fix_degenerate_edges(self, precision: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_circle",
                    "signature": "build123d.Wire.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_convex_hull",
                    "signature": "build123d.Wire.make_convex_hull(edges: 'Iterable[Edge]', tolerance: 'float' = 0.001) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_ellipse",
                    "signature": "build123d.Wire.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, closed: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_polygon",
                    "signature": "build123d.Wire.make_polygon(vertices: 'Iterable[VectorLike]', close: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_rect",
                    "signature": "build123d.Wire.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_wire",
                    "signature": "build123d.Wire.make_wire(edges: 'Iterable[Edge]', sequenced: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.order_edges",
                    "signature": "build123d.Wire.order_edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Wire.param_at_point",
                    "signature": "build123d.Wire.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Wire.project_to_shape",
                    "signature": "build123d.Wire.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Wire]'"
                },
                {
                    "name": "build123d.Wire.stitch",
                    "signature": "build123d.Wire.stitch(self, other: 'Wire') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.to_wire",
                    "signature": "build123d.Wire.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.trim",
                    "signature": "build123d.Wire.trim(self: 'Wire', start: 'float', end: 'float') -> 'Wire'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ],
            "parent_classes": [
                "Shape",
                "Mixin1D",
                "NodeMixin"
            ]
        },
        {
            "name": "build123d.WorkplaneList",
            "signature": "build123d.WorkplaneList(*workplanes: 'Union[Face, Plane, Location]')",
            "methods": [
                {
                    "name": "build123d.WorkplaneList.localize",
                    "signature": "build123d.WorkplaneList.localize(*points: 'VectorLike') -> 'Union[list[Vector], Vector]'"
                }
            ],
            "variables": [],
            "parent_classes": []
        }
    ],
    "functions": [
        {
            "name": "build123d.add",
            "signature": "build123d.add(objects: Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound, build123d.build_common.Builder, Iterable[Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound, build123d.build_common.Builder]]], rotation: Union[float, tuple[float, float, float], build123d.geometry.Rotation] = None, clean: bool = True, mode: build123d.build_enums.Mode = <Mode.ADD>) -> build123d.topology.Compound"
        },
        {
            "name": "build123d.ansi_pattern",
            "signature": "build123d.ansi_pattern(*args)"
        },
        {
            "name": "build123d.bounding_box",
            "signature": "build123d.bounding_box(objects: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]] = None, mode: build123d.build_enums.Mode = <Mode.PRIVATE>) -> Union[build123d.topology.Sketch, build123d.topology.Part]"
        },
        {
            "name": "build123d.chamfer",
            "signature": "build123d.chamfer(objects: Union[build123d.topology.Edge, build123d.topology.Vertex, Iterable[Union[build123d.topology.Edge, build123d.topology.Vertex]]], length: float, length2: float = None, angle: float = None, reference: Union[build123d.topology.Edge, build123d.topology.Face] = None) -> Union[build123d.topology.Sketch, build123d.topology.Part]"
        },
        {
            "name": "build123d.delta",
            "signature": "build123d.delta(shapes_one: 'Iterable[Shape]', shapes_two: 'Iterable[Shape]') -> 'list[Shape]'"
        },
        {
            "name": "build123d.downcast",
            "signature": "build123d.downcast(obj: 'TopoDS_Shape') -> 'TopoDS_Shape'"
        },
        {
            "name": "build123d.edge",
            "signature": "build123d.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
        },
        {
            "name": "build123d.edges",
            "signature": "build123d.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.edges_to_wires",
            "signature": "build123d.edges_to_wires(edges: 'Iterable[Edge]', tol: 'float' = 1e-06) -> 'list[Wire]'"
        },
        {
            "name": "build123d.export_brep",
            "signature": "build123d.export_brep(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes, _io.BytesIO]) -> bool"
        },
        {
            "name": "build123d.export_gltf",
            "signature": "build123d.export_gltf(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes], unit: build123d.build_enums.Unit = <Unit.MM>, binary: bool = False, linear_deflection: float = 0.001, angular_deflection: float = 0.1) -> bool"
        },
        {
            "name": "build123d.export_step",
            "signature": "build123d.export_step(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes], unit: build123d.build_enums.Unit = <Unit.MM>, write_pcurves: bool = True, precision_mode: build123d.build_enums.PrecisionMode = <PrecisionMode.AVERAGE>) -> bool"
        },
        {
            "name": "build123d.export_stl",
            "signature": "build123d.export_stl(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes], tolerance: float = 0.001, angular_tolerance: float = 0.1, ascii_format: bool = False) -> bool"
        },
        {
            "name": "build123d.extrude",
            "signature": "build123d.extrude(to_extrude: 'Union[Face, Sketch]' = None, amount: 'float' = None, dir: 'VectorLike' = None, until: 'Until' = None, target: 'Union[Compound, Solid]' = None, both: 'bool' = False, taper: 'float' = 0.0, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.face",
            "signature": "build123d.face(self, select: 'Select' = <Select.ALL>) -> 'Face'"
        },
        {
            "name": "build123d.faces",
            "signature": "build123d.faces(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Face]'"
        },
        {
            "name": "build123d.fillet",
            "signature": "build123d.fillet(objects: Union[build123d.topology.Edge, build123d.topology.Vertex, Iterable[Union[build123d.topology.Edge, build123d.topology.Vertex]]], radius: float) -> Union[build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Curve]"
        },
        {
            "name": "build123d.fix",
            "signature": "build123d.fix(obj: 'TopoDS_Shape') -> 'TopoDS_Shape'"
        },
        {
            "name": "build123d.flatten_sequence",
            "signature": "build123d.flatten_sequence(*obj: 'T') -> 'list[Any]'"
        },
        {
            "name": "build123d.full_round",
            "signature": "build123d.full_round(edge: 'Edge', invert: 'bool' = False, voronoi_point_count: 'int' = 100, mode: 'Mode' = <Mode.REPLACE>) -> 'tuple[Sketch, Vector, float]'"
        },
        {
            "name": "build123d.import_brep",
            "signature": "build123d.import_brep(file_name: Union[os.PathLike, str, bytes]) -> build123d.topology.Shape"
        },
        {
            "name": "build123d.import_step",
            "signature": "build123d.import_step(filename: Union[os.PathLike, str, bytes]) -> build123d.topology.Compound"
        },
        {
            "name": "build123d.import_stl",
            "signature": "build123d.import_stl(file_name: Union[os.PathLike, str, bytes]) -> build123d.topology.Face"
        },
        {
            "name": "build123d.import_svg",
            "signature": "build123d.import_svg(svg_file: Union[str, pathlib.Path, TextIO], *, flip_y: bool = True, ignore_visibility: bool = False, label_by: str = 'id', is_inkscape_label: bool = False) -> build123d.topology.ShapeList[typing.Union[build123d.topology.Wire, build123d.topology.Face]]"
        },
        {
            "name": "build123d.import_svg_as_buildline_code",
            "signature": "build123d.import_svg_as_buildline_code(file_name: Union[os.PathLike, str, bytes]) -> tuple[str, str]"
        },
        {
            "name": "build123d.isclose_b",
            "signature": "build123d.isclose_b(a: 'float', b: 'float', rel_tol=1e-09, abs_tol=1e-14) -> 'bool'"
        },
        {
            "name": "build123d.iso_pattern",
            "signature": "build123d.iso_pattern(*args)"
        },
        {
            "name": "build123d.loft",
            "signature": "build123d.loft(sections: 'Union[Face, Sketch, Iterable[Union[Vertex, Face, Sketch]]]' = None, ruled: 'bool' = False, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.make_brake_formed",
            "signature": "build123d.make_brake_formed(thickness: 'float', station_widths: 'Union[float, Iterable[float]]', line: 'Union[Edge, Wire, Curve]' = None, side: 'Side' = <Side.LEFT>, kind: 'Kind' = <Kind.ARC>, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.make_face",
            "signature": "build123d.make_face(edges: 'Union[Edge, Iterable[Edge]]' = None, mode: 'Mode' = <Mode.ADD>) -> 'Sketch'"
        },
        {
            "name": "build123d.make_hull",
            "signature": "build123d.make_hull(edges: 'Union[Edge, Iterable[Edge]]' = None, mode: 'Mode' = <Mode.ADD>) -> 'Sketch'"
        },
        {
            "name": "build123d.mirror",
            "signature": "build123d.mirror(objects: Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Compound, build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, Iterable[Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Compound, build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part]]] = None, about: build123d.geometry.Plane = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, -1.00, 0.00)), mode: build123d.build_enums.Mode = <Mode.ADD>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Compound]"
        },
        {
            "name": "build123d.modify_copyreg",
            "signature": "build123d.modify_copyreg()"
        },
        {
            "name": "build123d.new_edges",
            "signature": "build123d.new_edges(*objects: 'Shape', combined: 'Shape') -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.offset",
            "signature": "build123d.offset(objects: Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound, Iterable[Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound]]] = None, amount: float = 0, openings: Union[build123d.topology.Face, list[build123d.topology.Face]] = None, kind: build123d.build_enums.Kind = <Kind.ARC>, side: build123d.build_enums.Side = <Side.BOTH>, closed: bool = True, min_edge_length: float = None, mode: build123d.build_enums.Mode = <Mode.REPLACE>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Compound]"
        },
        {
            "name": "build123d.pack",
            "signature": "build123d.pack(objects: 'Collection[Shape]', padding: 'float', align_z: 'bool' = False) -> 'Collection[Shape]'"
        },
        {
            "name": "build123d.polar",
            "signature": "build123d.polar(length: 'float', angle: 'float') -> 'tuple[float, float]'"
        },
        {
            "name": "build123d.project",
            "signature": "build123d.project(objects: Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Wire, build123d.geometry.Vector, build123d.topology.Vertex, Iterable[Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Wire, build123d.geometry.Vector, build123d.topology.Vertex]]] = None, workplane: build123d.geometry.Plane = None, target: Union[build123d.topology.Solid, build123d.topology.Compound, build123d.topology.Part] = None, mode: build123d.build_enums.Mode = <Mode.ADD>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Compound, build123d.topology.ShapeList[build123d.geometry.Vector]]"
        },
        {
            "name": "build123d.project_workplane",
            "signature": "build123d.project_workplane(origin: 'Union[VectorLike, Vertex]', x_dir: 'Union[VectorLike, Vertex]', projection_dir: 'VectorLike', distance: 'float') -> 'Plane'"
        },
        {
            "name": "build123d.revolve",
            "signature": "build123d.revolve(profiles: 'Union[Face, Iterable[Face]]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), revolution_arc: 'float' = 360.0, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.scale",
            "signature": "build123d.scale(objects: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]] = None, by: Union[float, tuple[float, float, float]] = 1, mode: build123d.build_enums.Mode = <Mode.REPLACE>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Compound]"
        },
        {
            "name": "build123d.section",
            "signature": "build123d.section(obj: 'Part' = None, section_by: 'Union[Plane, Iterable[Plane]]' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, -1.00, 0.00)), height: 'float' = 0.0, clean: 'bool' = True, mode: 'Mode' = <Mode.PRIVATE>) -> 'Sketch'"
        },
        {
            "name": "build123d.shapetype",
            "signature": "build123d.shapetype(obj: 'TopoDS_Shape') -> 'TopAbs_ShapeEnum'"
        },
        {
            "name": "build123d.solid",
            "signature": "build123d.solid(self, select: 'Select' = <Select.ALL>) -> 'Solid'"
        },
        {
            "name": "build123d.solids",
            "signature": "build123d.solids(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Solid]'"
        },
        {
            "name": "build123d.sort_wires_by_build_order",
            "signature": "build123d.sort_wires_by_build_order(wire_list: 'list[Wire]') -> 'list[list[Wire]]'"
        },
        {
            "name": "build123d.split",
            "signature": "build123d.split(objects: Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, Iterable[Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid]]] = None, bisect_by: Union[build123d.geometry.Plane, build123d.topology.Face] = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, -1.00, 0.00)), keep: build123d.build_enums.Keep = <Keep.TOP>, mode: build123d.build_enums.Mode = <Mode.REPLACE>)"
        },
        {
            "name": "build123d.sweep",
            "signature": "build123d.sweep(sections: Union[build123d.topology.Compound, build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, Iterable[Union[build123d.topology.Compound, build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid]]] = None, path: Union[build123d.topology.Curve, build123d.topology.Edge, build123d.topology.Wire, Iterable[build123d.topology.Edge]] = None, multisection: bool = False, is_frenet: bool = False, transition: build123d.build_enums.Transition = <Transition.TRANSFORMED>, normal: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = None, binormal: Union[build123d.topology.Edge, build123d.topology.Wire] = None, clean: bool = True, mode: build123d.build_enums.Mode = <Mode.ADD>) -> Union[build123d.topology.Part, build123d.topology.Sketch]"
        },
        {
            "name": "build123d.thicken",
            "signature": "build123d.thicken(to_thicken: 'Union[Face, Sketch]' = None, amount: 'float' = None, normal_override: 'VectorLike' = None, both: 'bool' = False, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.topo_explore_common_vertex",
            "signature": "build123d.topo_explore_common_vertex(edge1: 'Union[Edge, TopoDS_Edge]', edge2: 'Union[Edge, TopoDS_Edge]') -> 'Union[Vertex, None]'"
        },
        {
            "name": "build123d.topo_explore_connected_edges",
            "signature": "build123d.topo_explore_connected_edges(edge: 'Edge', parent: 'Shape' = None) -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.trace",
            "signature": "build123d.trace(lines: 'Union[Curve, Edge, Wire, Iterable[Union[Curve, Edge, Wire]]]' = None, line_width: 'float' = 1, mode: 'Mode' = <Mode.ADD>) -> 'Sketch'"
        },
        {
            "name": "build123d.tuplify",
            "signature": "build123d.tuplify(obj: 'Any', dim: 'int') -> 'tuple'"
        },
        {
            "name": "build123d.unit_conversion_scale",
            "signature": "build123d.unit_conversion_scale(from_unit: build123d.build_enums.Unit, to_unit: build123d.build_enums.Unit) -> float"
        },
        {
            "name": "build123d.unwrapped_shapetype",
            "signature": "build123d.unwrapped_shapetype(obj: 'Shape') -> 'TopAbs_ShapeEnum'"
        },
        {
            "name": "build123d.validate_inputs",
            "signature": "build123d.validate_inputs(context: 'Builder', validating_class, objects: 'Iterable[Shape]' = None)"
        },
        {
            "name": "build123d.vertex",
            "signature": "build123d.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
        },
        {
            "name": "build123d.vertices",
            "signature": "build123d.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
        },
        {
            "name": "build123d.wire",
            "signature": "build123d.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
        },
        {
            "name": "build123d.wires",
            "signature": "build123d.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
        }
    ],
    "variables": [
        {
            "name": "K",
            "value": "~K",
            "type": "TypeVar"
        },
        {
            "name": "P",
            "value": "~P",
            "type": "ParamSpec"
        },
        {
            "name": "T",
            "value": "~T",
            "type": "TypeVar"
        },
        {
            "name": "T2",
            "value": "~T2",
            "type": "TypeVar"
        }
    ]
}