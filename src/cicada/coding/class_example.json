{
    "name": "build123d.Box",
    "signature": "build123d.Box(length: 'float', width: 'float', height: 'float', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
    "methods": [
        {
            "name": "build123d.Box.bounding_box",
            "signature": "build123d.Box.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
        },
        {
            "name": "build123d.Box.cast",
            "signature": "build123d.Box.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
        },
        {
            "name": "build123d.Box.center",
            "signature": "build123d.Box.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
        },
        {
            "name": "build123d.Box.chamfer",
            "signature": "build123d.Box.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
        },
        {
            "name": "build123d.Box.clean",
            "signature": "build123d.Box.clean(self) -> 'Self'"
        },
        {
            "name": "build123d.Box.closest_points",
            "signature": "build123d.Box.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
        },
        {
            "name": "build123d.Box.combined_center",
            "signature": "build123d.Box.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
        },
        {
            "name": "build123d.Box.compound",
            "signature": "build123d.Box.compound(self) -> 'Compound'"
        },
        {
            "name": "build123d.Box.compounds",
            "signature": "build123d.Box.compounds(self) -> 'ShapeList[Compound]'"
        },
        {
            "name": "build123d.Box.compute_mass",
            "signature": "build123d.Box.compute_mass(obj: 'Shape') -> 'float'"
        },
        {
            "name": "build123d.Box.copy",
            "signature": "build123d.Box.copy(self) -> 'Self'"
        },
        {
            "name": "build123d.Box.copy_attributes_to",
            "signature": "build123d.Box.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
        },
        {
            "name": "build123d.Box.cut",
            "signature": "build123d.Box.cut(self, *to_cut: 'Shape') -> 'Compound'"
        },
        {
            "name": "build123d.Box.distance",
            "signature": "build123d.Box.distance(self, other: 'Shape') -> 'float'"
        },
        {
            "name": "build123d.Box.distance_to",
            "signature": "build123d.Box.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
        },
        {
            "name": "build123d.Box.distance_to_with_closest_points",
            "signature": "build123d.Box.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
        },
        {
            "name": "build123d.Box.distances",
            "signature": "build123d.Box.distances(self, *others: 'Shape') -> 'Iterator[float]'"
        },
        {
            "name": "build123d.Box.do_children_intersect",
            "signature": "build123d.Box.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
        },
        {
            "name": "build123d.Box.dprism",
            "signature": "build123d.Box.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
        },
        {
            "name": "build123d.Box.edge",
            "signature": "build123d.Box.edge(self) -> 'Edge'"
        },
        {
            "name": "build123d.Box.edges",
            "signature": "build123d.Box.edges(self) -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.Box.export_brep",
            "signature": "build123d.Box.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
        },
        {
            "name": "build123d.Box.export_step",
            "signature": "build123d.Box.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
        },
        {
            "name": "build123d.Box.export_stl",
            "signature": "build123d.Box.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
        },
        {
            "name": "build123d.Box.extrude",
            "signature": "build123d.Box.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
        },
        {
            "name": "build123d.Box.face",
            "signature": "build123d.Box.face(self) -> 'Face'"
        },
        {
            "name": "build123d.Box.faces",
            "signature": "build123d.Box.faces(self) -> 'ShapeList[Face]'"
        },
        {
            "name": "build123d.Box.faces_intersected_by_axis",
            "signature": "build123d.Box.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
        },
        {
            "name": "build123d.Box.fillet",
            "signature": "build123d.Box.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
        },
        {
            "name": "build123d.Box.find_intersection",
            "signature": "build123d.Box.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
        },
        {
            "name": "build123d.Box.find_intersection_points",
            "signature": "build123d.Box.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
        },
        {
            "name": "build123d.Box.first_level_shapes",
            "signature": "build123d.Box.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
        },
        {
            "name": "build123d.Box.fix",
            "signature": "build123d.Box.fix(self) -> 'Self'"
        },
        {
            "name": "build123d.Box.fuse",
            "signature": "build123d.Box.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
        },
        {
            "name": "build123d.Box.get_type",
            "signature": "build123d.Box.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
        },
        {
            "name": "build123d.Box.hash_code",
            "signature": "build123d.Box.hash_code(self) -> 'int'"
        },
        {
            "name": "build123d.Box.hollow",
            "signature": "build123d.Box.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
        },
        {
            "name": "build123d.Box.intersect",
            "signature": "build123d.Box.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
        },
        {
            "name": "build123d.Box.is_equal",
            "signature": "build123d.Box.is_equal(self, other: 'Shape') -> 'bool'"
        },
        {
            "name": "build123d.Box.is_inside",
            "signature": "build123d.Box.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
        },
        {
            "name": "build123d.Box.is_null",
            "signature": "build123d.Box.is_null(self) -> 'bool'"
        },
        {
            "name": "build123d.Box.is_same",
            "signature": "build123d.Box.is_same(self, other: 'Shape') -> 'bool'"
        },
        {
            "name": "build123d.Box.is_valid",
            "signature": "build123d.Box.is_valid(self) -> 'bool'"
        },
        {
            "name": "build123d.Box.iter_path_reverse",
            "signature": "build123d.Box.iter_path_reverse(self)"
        },
        {
            "name": "build123d.Box.locate",
            "signature": "build123d.Box.locate(self, loc: 'Location') -> 'Self'"
        },
        {
            "name": "build123d.Box.located",
            "signature": "build123d.Box.located(self, loc: 'Location') -> 'Self'"
        },
        {
            "name": "build123d.Box.make_compound",
            "signature": "build123d.Box.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
        },
        {
            "name": "build123d.Box.make_text",
            "signature": "build123d.Box.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
        },
        {
            "name": "build123d.Box.make_triad",
            "signature": "build123d.Box.make_triad(axes_scale: 'float') -> 'Compound'"
        },
        {
            "name": "build123d.Box.max_fillet",
            "signature": "build123d.Box.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
        },
        {
            "name": "build123d.Box.mesh",
            "signature": "build123d.Box.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
        },
        {
            "name": "build123d.Box.mirror",
            "signature": "build123d.Box.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
        },
        {
            "name": "build123d.Box.move",
            "signature": "build123d.Box.move(self, loc: 'Location') -> 'Self'"
        },
        {
            "name": "build123d.Box.moved",
            "signature": "build123d.Box.moved(self, loc: 'Location') -> 'Self'"
        },
        {
            "name": "build123d.Box.offset_3d",
            "signature": "build123d.Box.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
        },
        {
            "name": "build123d.Box.project_faces",
            "signature": "build123d.Box.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
        },
        {
            "name": "build123d.Box.project_to_viewport",
            "signature": "build123d.Box.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
        },
        {
            "name": "build123d.Box.relocate",
            "signature": "build123d.Box.relocate(self, loc: 'Location')"
        },
        {
            "name": "build123d.Box.rotate",
            "signature": "build123d.Box.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
        },
        {
            "name": "build123d.Box.scale",
            "signature": "build123d.Box.scale(self, factor: 'float') -> 'Self'"
        },
        {
            "name": "build123d.Box.shape_type",
            "signature": "build123d.Box.shape_type(self) -> 'Shapes'"
        },
        {
            "name": "build123d.Box.shell",
            "signature": "build123d.Box.shell(self) -> 'Shell'"
        },
        {
            "name": "build123d.Box.shells",
            "signature": "build123d.Box.shells(self) -> 'ShapeList[Shell]'"
        },
        {
            "name": "build123d.Box.show_topology",
            "signature": "build123d.Box.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
        },
        {
            "name": "build123d.Box.solid",
            "signature": "build123d.Box.solid(self) -> 'Solid'"
        },
        {
            "name": "build123d.Box.solids",
            "signature": "build123d.Box.solids(self) -> 'ShapeList[Solid]'"
        },
        {
            "name": "build123d.Box.split",
            "signature": "build123d.Box.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
        },
        {
            "name": "build123d.Box.split_by_perimeter",
            "signature": "build123d.Box.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
        },
        {
            "name": "build123d.Box.tessellate",
            "signature": "build123d.Box.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
        },
        {
            "name": "build123d.Box.to_arcs",
            "signature": "build123d.Box.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
        },
        {
            "name": "build123d.Box.to_splines",
            "signature": "build123d.Box.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
        },
        {
            "name": "build123d.Box.to_vtk_poly_data",
            "signature": "build123d.Box.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
        },
        {
            "name": "build123d.Box.transform_geometry",
            "signature": "build123d.Box.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
        },
        {
            "name": "build123d.Box.transform_shape",
            "signature": "build123d.Box.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
        },
        {
            "name": "build123d.Box.transformed",
            "signature": "build123d.Box.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
        },
        {
            "name": "build123d.Box.translate",
            "signature": "build123d.Box.translate(self, vector: 'VectorLike') -> 'Self'"
        },
        {
            "name": "build123d.Box.unwrap",
            "signature": "build123d.Box.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
        },
        {
            "name": "build123d.Box.vertex",
            "signature": "build123d.Box.vertex(self) -> 'Vertex'"
        },
        {
            "name": "build123d.Box.vertices",
            "signature": "build123d.Box.vertices(self) -> 'ShapeList[Vertex]'"
        },
        {
            "name": "build123d.Box.wire",
            "signature": "build123d.Box.wire(self) -> 'Wire'"
        },
        {
            "name": "build123d.Box.wires",
            "signature": "build123d.Box.wires(self) -> 'ShapeList[Wire]'"
        }
    ],
    "variables": [
        "ancestors",
        "anchestors",
        "area",
        "children",
        "color",
        "depth",
        "descendants",
        "geom_type",
        "height",
        "is_leaf",
        "is_manifold",
        "is_root",
        "leaves",
        "location",
        "orientation",
        "parent",
        "path",
        "position",
        "root",
        "separator",
        "siblings",
        "size",
        "volume"
    ]
}