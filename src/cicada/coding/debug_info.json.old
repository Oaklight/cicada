{
    "name": "build123d",
    "classes": [
        {
            "name": "build123d.Align",
            "signature": "build123d.Align()",
            "methods": [],
            "variables": [
                "CENTER",
                "MAX",
                "MIN",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.AngularDirection",
            "signature": "build123d.AngularDirection()",
            "methods": [],
            "variables": [
                "CLOCKWISE",
                "COUNTER_CLOCKWISE",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.ApproxOption",
            "signature": "build123d.ApproxOption()",
            "methods": [],
            "variables": [
                "ARC",
                "NONE",
                "SPLINE",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Arrow",
            "signature": "build123d.Arrow(arrow_size: float, shaft_path: Union[build123d.topology.Edge, build123d.topology.Wire], shaft_width: float, head_at_start: bool = True, head_type: build123d.build_enums.HeadType = <HeadType.CURVED>, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Arrow.bounding_box",
                    "signature": "build123d.Arrow.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Arrow.cast",
                    "signature": "build123d.Arrow.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.center",
                    "signature": "build123d.Arrow.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Arrow.chamfer",
                    "signature": "build123d.Arrow.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.clean",
                    "signature": "build123d.Arrow.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.closest_points",
                    "signature": "build123d.Arrow.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Arrow.combined_center",
                    "signature": "build123d.Arrow.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Arrow.compound",
                    "signature": "build123d.Arrow.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.compounds",
                    "signature": "build123d.Arrow.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Arrow.compute_mass",
                    "signature": "build123d.Arrow.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Arrow.copy",
                    "signature": "build123d.Arrow.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.copy_attributes_to",
                    "signature": "build123d.Arrow.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Arrow.cut",
                    "signature": "build123d.Arrow.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.distance",
                    "signature": "build123d.Arrow.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Arrow.distance_to",
                    "signature": "build123d.Arrow.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Arrow.distance_to_with_closest_points",
                    "signature": "build123d.Arrow.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Arrow.distances",
                    "signature": "build123d.Arrow.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Arrow.do_children_intersect",
                    "signature": "build123d.Arrow.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Arrow.dprism",
                    "signature": "build123d.Arrow.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Arrow.edge",
                    "signature": "build123d.Arrow.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Arrow.edges",
                    "signature": "build123d.Arrow.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Arrow.export_brep",
                    "signature": "build123d.Arrow.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.export_step",
                    "signature": "build123d.Arrow.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Arrow.export_stl",
                    "signature": "build123d.Arrow.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.extrude",
                    "signature": "build123d.Arrow.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.face",
                    "signature": "build123d.Arrow.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Arrow.faces",
                    "signature": "build123d.Arrow.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Arrow.faces_intersected_by_axis",
                    "signature": "build123d.Arrow.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Arrow.fillet",
                    "signature": "build123d.Arrow.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.find_intersection",
                    "signature": "build123d.Arrow.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Arrow.find_intersection_points",
                    "signature": "build123d.Arrow.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Arrow.first_level_shapes",
                    "signature": "build123d.Arrow.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Arrow.fix",
                    "signature": "build123d.Arrow.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.fuse",
                    "signature": "build123d.Arrow.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.get_type",
                    "signature": "build123d.Arrow.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Arrow.hash_code",
                    "signature": "build123d.Arrow.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Arrow.hollow",
                    "signature": "build123d.Arrow.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Arrow.intersect",
                    "signature": "build123d.Arrow.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.is_equal",
                    "signature": "build123d.Arrow.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.is_inside",
                    "signature": "build123d.Arrow.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.is_null",
                    "signature": "build123d.Arrow.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.is_same",
                    "signature": "build123d.Arrow.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.is_valid",
                    "signature": "build123d.Arrow.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Arrow.iter_path_reverse",
                    "signature": "build123d.Arrow.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Arrow.locate",
                    "signature": "build123d.Arrow.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.located",
                    "signature": "build123d.Arrow.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.make_compound",
                    "signature": "build123d.Arrow.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.make_text",
                    "signature": "build123d.Arrow.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Arrow.make_triad",
                    "signature": "build123d.Arrow.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.max_fillet",
                    "signature": "build123d.Arrow.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Arrow.mesh",
                    "signature": "build123d.Arrow.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Arrow.mirror",
                    "signature": "build123d.Arrow.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.move",
                    "signature": "build123d.Arrow.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.moved",
                    "signature": "build123d.Arrow.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.offset_3d",
                    "signature": "build123d.Arrow.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Arrow.project_faces",
                    "signature": "build123d.Arrow.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Arrow.project_to_viewport",
                    "signature": "build123d.Arrow.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Arrow.relocate",
                    "signature": "build123d.Arrow.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Arrow.rotate",
                    "signature": "build123d.Arrow.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.scale",
                    "signature": "build123d.Arrow.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.shape_type",
                    "signature": "build123d.Arrow.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Arrow.shell",
                    "signature": "build123d.Arrow.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Arrow.shells",
                    "signature": "build123d.Arrow.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Arrow.show_topology",
                    "signature": "build123d.Arrow.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Arrow.solid",
                    "signature": "build123d.Arrow.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Arrow.solids",
                    "signature": "build123d.Arrow.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Arrow.split",
                    "signature": "build123d.Arrow.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.split_by_perimeter",
                    "signature": "build123d.Arrow.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Arrow.tessellate",
                    "signature": "build123d.Arrow.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Arrow.to_arcs",
                    "signature": "build123d.Arrow.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Arrow.to_splines",
                    "signature": "build123d.Arrow.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Arrow.to_vtk_poly_data",
                    "signature": "build123d.Arrow.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Arrow.transform_geometry",
                    "signature": "build123d.Arrow.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.transform_shape",
                    "signature": "build123d.Arrow.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.transformed",
                    "signature": "build123d.Arrow.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.translate",
                    "signature": "build123d.Arrow.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Arrow.unwrap",
                    "signature": "build123d.Arrow.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Arrow.vertex",
                    "signature": "build123d.Arrow.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Arrow.vertices",
                    "signature": "build123d.Arrow.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Arrow.wire",
                    "signature": "build123d.Arrow.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Arrow.wires",
                    "signature": "build123d.Arrow.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.ArrowHead",
            "signature": "build123d.ArrowHead(size: float, head_type: build123d.build_enums.HeadType = <HeadType.CURVED>, rotation: float = 0, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.ArrowHead.bounding_box",
                    "signature": "build123d.ArrowHead.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.ArrowHead.cast",
                    "signature": "build123d.ArrowHead.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.center",
                    "signature": "build123d.ArrowHead.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.ArrowHead.chamfer",
                    "signature": "build123d.ArrowHead.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.clean",
                    "signature": "build123d.ArrowHead.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.closest_points",
                    "signature": "build123d.ArrowHead.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.ArrowHead.combined_center",
                    "signature": "build123d.ArrowHead.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.ArrowHead.compound",
                    "signature": "build123d.ArrowHead.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.compounds",
                    "signature": "build123d.ArrowHead.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.ArrowHead.compute_mass",
                    "signature": "build123d.ArrowHead.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.ArrowHead.copy",
                    "signature": "build123d.ArrowHead.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.copy_attributes_to",
                    "signature": "build123d.ArrowHead.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.ArrowHead.cut",
                    "signature": "build123d.ArrowHead.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.distance",
                    "signature": "build123d.ArrowHead.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.ArrowHead.distance_to",
                    "signature": "build123d.ArrowHead.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.ArrowHead.distance_to_with_closest_points",
                    "signature": "build123d.ArrowHead.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.ArrowHead.distances",
                    "signature": "build123d.ArrowHead.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.ArrowHead.do_children_intersect",
                    "signature": "build123d.ArrowHead.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.ArrowHead.dprism",
                    "signature": "build123d.ArrowHead.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.ArrowHead.edge",
                    "signature": "build123d.ArrowHead.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.ArrowHead.edges",
                    "signature": "build123d.ArrowHead.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.ArrowHead.export_brep",
                    "signature": "build123d.ArrowHead.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.export_step",
                    "signature": "build123d.ArrowHead.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.ArrowHead.export_stl",
                    "signature": "build123d.ArrowHead.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.extrude",
                    "signature": "build123d.ArrowHead.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.face",
                    "signature": "build123d.ArrowHead.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.ArrowHead.faces",
                    "signature": "build123d.ArrowHead.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ArrowHead.faces_intersected_by_axis",
                    "signature": "build123d.ArrowHead.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ArrowHead.fillet",
                    "signature": "build123d.ArrowHead.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.find_intersection",
                    "signature": "build123d.ArrowHead.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.ArrowHead.find_intersection_points",
                    "signature": "build123d.ArrowHead.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.ArrowHead.first_level_shapes",
                    "signature": "build123d.ArrowHead.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.ArrowHead.fix",
                    "signature": "build123d.ArrowHead.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.fuse",
                    "signature": "build123d.ArrowHead.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.get_type",
                    "signature": "build123d.ArrowHead.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.ArrowHead.hash_code",
                    "signature": "build123d.ArrowHead.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.ArrowHead.hollow",
                    "signature": "build123d.ArrowHead.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.ArrowHead.intersect",
                    "signature": "build123d.ArrowHead.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.is_equal",
                    "signature": "build123d.ArrowHead.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.is_inside",
                    "signature": "build123d.ArrowHead.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.is_null",
                    "signature": "build123d.ArrowHead.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.is_same",
                    "signature": "build123d.ArrowHead.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.is_valid",
                    "signature": "build123d.ArrowHead.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.ArrowHead.iter_path_reverse",
                    "signature": "build123d.ArrowHead.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.ArrowHead.locate",
                    "signature": "build123d.ArrowHead.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.located",
                    "signature": "build123d.ArrowHead.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.make_compound",
                    "signature": "build123d.ArrowHead.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.make_text",
                    "signature": "build123d.ArrowHead.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.ArrowHead.make_triad",
                    "signature": "build123d.ArrowHead.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.max_fillet",
                    "signature": "build123d.ArrowHead.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.ArrowHead.mesh",
                    "signature": "build123d.ArrowHead.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.ArrowHead.mirror",
                    "signature": "build123d.ArrowHead.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.move",
                    "signature": "build123d.ArrowHead.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.moved",
                    "signature": "build123d.ArrowHead.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.offset_3d",
                    "signature": "build123d.ArrowHead.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.ArrowHead.project_faces",
                    "signature": "build123d.ArrowHead.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.ArrowHead.project_to_viewport",
                    "signature": "build123d.ArrowHead.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.ArrowHead.relocate",
                    "signature": "build123d.ArrowHead.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.ArrowHead.rotate",
                    "signature": "build123d.ArrowHead.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.scale",
                    "signature": "build123d.ArrowHead.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.shape_type",
                    "signature": "build123d.ArrowHead.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.ArrowHead.shell",
                    "signature": "build123d.ArrowHead.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.ArrowHead.shells",
                    "signature": "build123d.ArrowHead.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.ArrowHead.show_topology",
                    "signature": "build123d.ArrowHead.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.ArrowHead.solid",
                    "signature": "build123d.ArrowHead.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.ArrowHead.solids",
                    "signature": "build123d.ArrowHead.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.ArrowHead.split",
                    "signature": "build123d.ArrowHead.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.split_by_perimeter",
                    "signature": "build123d.ArrowHead.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.ArrowHead.tessellate",
                    "signature": "build123d.ArrowHead.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.ArrowHead.to_arcs",
                    "signature": "build123d.ArrowHead.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.ArrowHead.to_splines",
                    "signature": "build123d.ArrowHead.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.ArrowHead.to_vtk_poly_data",
                    "signature": "build123d.ArrowHead.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.ArrowHead.transform_geometry",
                    "signature": "build123d.ArrowHead.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.transform_shape",
                    "signature": "build123d.ArrowHead.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.transformed",
                    "signature": "build123d.ArrowHead.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.translate",
                    "signature": "build123d.ArrowHead.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.ArrowHead.unwrap",
                    "signature": "build123d.ArrowHead.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.ArrowHead.vertex",
                    "signature": "build123d.ArrowHead.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.ArrowHead.vertices",
                    "signature": "build123d.ArrowHead.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.ArrowHead.wire",
                    "signature": "build123d.ArrowHead.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.ArrowHead.wires",
                    "signature": "build123d.ArrowHead.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.AutoNameEnum",
            "signature": "build123d.AutoNameEnum()",
            "methods": [],
            "variables": [
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Axis",
            "signature": "build123d.Axis(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Axis.angle_between",
                    "signature": "build123d.Axis.angle_between(self, other: 'Axis') -> 'float'"
                },
                {
                    "name": "build123d.Axis.intersect",
                    "signature": "build123d.Axis.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Axis.is_coaxial",
                    "signature": "build123d.Axis.is_coaxial(self, other: 'Axis', angular_tolerance: 'float' = 1e-05, linear_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.is_normal",
                    "signature": "build123d.Axis.is_normal(self, other: 'Axis', angular_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.is_opposite",
                    "signature": "build123d.Axis.is_opposite(self, other: 'Axis', angular_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.is_parallel",
                    "signature": "build123d.Axis.is_parallel(self, other: 'Axis', angular_tolerance: 'float' = 1e-05) -> 'bool'"
                },
                {
                    "name": "build123d.Axis.located",
                    "signature": "build123d.Axis.located(self, new_location: 'Location')"
                },
                {
                    "name": "build123d.Axis.reverse",
                    "signature": "build123d.Axis.reverse(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Axis.to_plane",
                    "signature": "build123d.Axis.to_plane(self) -> 'Plane'"
                }
            ],
            "variables": [
                "location"
            ]
        },
        {
            "name": "build123d.AxisMeta",
            "signature": "build123d.AxisMeta()",
            "methods": [
                {
                    "name": "build123d.AxisMeta.mro",
                    "signature": "build123d.AxisMeta.mro(self, /)"
                }
            ],
            "variables": [
                "X",
                "Y",
                "Z"
            ]
        },
        {
            "name": "build123d.BallJoint",
            "signature": "build123d.BallJoint(label: 'str', to_part: 'Optional[Union[Solid, Compound]]' = None, joint_location: 'Optional[Location]' = None, angular_range: 'tuple[tuple[float, float], tuple[float, float], tuple[float, float]]' = ((0, 360), (0, 360), (0, 360)), angle_reference: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)))",
            "methods": [
                {
                    "name": "build123d.BallJoint.connect_to",
                    "signature": "build123d.BallJoint.connect_to(self, other: 'RigidJoint', *, angles: 'RotationLike' = None)"
                },
                {
                    "name": "build123d.BallJoint.relative_to",
                    "signature": "build123d.BallJoint.relative_to(self, other: 'RigidJoint', *, angles: 'RotationLike' = None)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ]
        },
        {
            "name": "build123d.BaseEdgeObject",
            "signature": "build123d.BaseEdgeObject(curve: 'Edge', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BaseEdgeObject.bounding_box",
                    "signature": "build123d.BaseEdgeObject.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.BaseEdgeObject.cast",
                    "signature": "build123d.BaseEdgeObject.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.center",
                    "signature": "build123d.BaseEdgeObject.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.clean",
                    "signature": "build123d.BaseEdgeObject.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.close",
                    "signature": "build123d.BaseEdgeObject.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.closest_points",
                    "signature": "build123d.BaseEdgeObject.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.combined_center",
                    "signature": "build123d.BaseEdgeObject.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.common_plane",
                    "signature": "build123d.BaseEdgeObject.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.compound",
                    "signature": "build123d.BaseEdgeObject.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseEdgeObject.compounds",
                    "signature": "build123d.BaseEdgeObject.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.compute_mass",
                    "signature": "build123d.BaseEdgeObject.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BaseEdgeObject.copy",
                    "signature": "build123d.BaseEdgeObject.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.copy_attributes_to",
                    "signature": "build123d.BaseEdgeObject.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.BaseEdgeObject.cut",
                    "signature": "build123d.BaseEdgeObject.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.distance",
                    "signature": "build123d.BaseEdgeObject.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BaseEdgeObject.distance_to",
                    "signature": "build123d.BaseEdgeObject.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.BaseEdgeObject.distance_to_with_closest_points",
                    "signature": "build123d.BaseEdgeObject.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.distances",
                    "signature": "build123d.BaseEdgeObject.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.distribute_locations",
                    "signature": "build123d.BaseEdgeObject.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.edge",
                    "signature": "build123d.BaseEdgeObject.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.edges",
                    "signature": "build123d.BaseEdgeObject.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.end_point",
                    "signature": "build123d.BaseEdgeObject.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.export_brep",
                    "signature": "build123d.BaseEdgeObject.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.BaseEdgeObject.export_step",
                    "signature": "build123d.BaseEdgeObject.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.BaseEdgeObject.export_stl",
                    "signature": "build123d.BaseEdgeObject.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.BaseEdgeObject.extrude",
                    "signature": "build123d.BaseEdgeObject.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.face",
                    "signature": "build123d.BaseEdgeObject.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.BaseEdgeObject.faces",
                    "signature": "build123d.BaseEdgeObject.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.faces_intersected_by_axis",
                    "signature": "build123d.BaseEdgeObject.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.find_intersection",
                    "signature": "build123d.BaseEdgeObject.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.find_intersection_points",
                    "signature": "build123d.BaseEdgeObject.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.find_tangent",
                    "signature": "build123d.BaseEdgeObject.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.fix",
                    "signature": "build123d.BaseEdgeObject.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.fuse",
                    "signature": "build123d.BaseEdgeObject.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.hash_code",
                    "signature": "build123d.BaseEdgeObject.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.BaseEdgeObject.intersect",
                    "signature": "build123d.BaseEdgeObject.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.is_equal",
                    "signature": "build123d.BaseEdgeObject.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BaseEdgeObject.is_null",
                    "signature": "build123d.BaseEdgeObject.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.BaseEdgeObject.is_same",
                    "signature": "build123d.BaseEdgeObject.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BaseEdgeObject.is_valid",
                    "signature": "build123d.BaseEdgeObject.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.BaseEdgeObject.iter_path_reverse",
                    "signature": "build123d.BaseEdgeObject.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.BaseEdgeObject.locate",
                    "signature": "build123d.BaseEdgeObject.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.located",
                    "signature": "build123d.BaseEdgeObject.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.location_at",
                    "signature": "build123d.BaseEdgeObject.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.BaseEdgeObject.locations",
                    "signature": "build123d.BaseEdgeObject.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_bezier",
                    "signature": "build123d.BaseEdgeObject.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_circle",
                    "signature": "build123d.BaseEdgeObject.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_ellipse",
                    "signature": "build123d.BaseEdgeObject.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_helix",
                    "signature": "build123d.BaseEdgeObject.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_line",
                    "signature": "build123d.BaseEdgeObject.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_mid_way",
                    "signature": "build123d.BaseEdgeObject.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_spline",
                    "signature": "build123d.BaseEdgeObject.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_spline_approx",
                    "signature": "build123d.BaseEdgeObject.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_tangent_arc",
                    "signature": "build123d.BaseEdgeObject.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.make_three_point_arc",
                    "signature": "build123d.BaseEdgeObject.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.mesh",
                    "signature": "build123d.BaseEdgeObject.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.BaseEdgeObject.mirror",
                    "signature": "build123d.BaseEdgeObject.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.move",
                    "signature": "build123d.BaseEdgeObject.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.moved",
                    "signature": "build123d.BaseEdgeObject.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.normal",
                    "signature": "build123d.BaseEdgeObject.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.offset_2d",
                    "signature": "build123d.BaseEdgeObject.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.param_at",
                    "signature": "build123d.BaseEdgeObject.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.BaseEdgeObject.param_at_point",
                    "signature": "build123d.BaseEdgeObject.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.BaseEdgeObject.perpendicular_line",
                    "signature": "build123d.BaseEdgeObject.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.position_at",
                    "signature": "build123d.BaseEdgeObject.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.positions",
                    "signature": "build123d.BaseEdgeObject.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.project",
                    "signature": "build123d.BaseEdgeObject.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.project_faces",
                    "signature": "build123d.BaseEdgeObject.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseEdgeObject.project_to_shape",
                    "signature": "build123d.BaseEdgeObject.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.project_to_viewport",
                    "signature": "build123d.BaseEdgeObject.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.relocate",
                    "signature": "build123d.BaseEdgeObject.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.BaseEdgeObject.reversed",
                    "signature": "build123d.BaseEdgeObject.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.rotate",
                    "signature": "build123d.BaseEdgeObject.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.scale",
                    "signature": "build123d.BaseEdgeObject.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.shape_type",
                    "signature": "build123d.BaseEdgeObject.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.BaseEdgeObject.shell",
                    "signature": "build123d.BaseEdgeObject.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.BaseEdgeObject.shells",
                    "signature": "build123d.BaseEdgeObject.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.show_topology",
                    "signature": "build123d.BaseEdgeObject.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.BaseEdgeObject.solid",
                    "signature": "build123d.BaseEdgeObject.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.BaseEdgeObject.solids",
                    "signature": "build123d.BaseEdgeObject.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.split",
                    "signature": "build123d.BaseEdgeObject.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.split_by_perimeter",
                    "signature": "build123d.BaseEdgeObject.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.BaseEdgeObject.start_point",
                    "signature": "build123d.BaseEdgeObject.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.tangent_angle_at",
                    "signature": "build123d.BaseEdgeObject.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.BaseEdgeObject.tangent_at",
                    "signature": "build123d.BaseEdgeObject.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseEdgeObject.tessellate",
                    "signature": "build123d.BaseEdgeObject.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.to_arcs",
                    "signature": "build123d.BaseEdgeObject.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.BaseEdgeObject.to_axis",
                    "signature": "build123d.BaseEdgeObject.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.BaseEdgeObject.to_splines",
                    "signature": "build123d.BaseEdgeObject.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.BaseEdgeObject.to_vtk_poly_data",
                    "signature": "build123d.BaseEdgeObject.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.BaseEdgeObject.to_wire",
                    "signature": "build123d.BaseEdgeObject.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseEdgeObject.transform_geometry",
                    "signature": "build123d.BaseEdgeObject.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.transform_shape",
                    "signature": "build123d.BaseEdgeObject.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.transformed",
                    "signature": "build123d.BaseEdgeObject.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.translate",
                    "signature": "build123d.BaseEdgeObject.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BaseEdgeObject.trim",
                    "signature": "build123d.BaseEdgeObject.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.trim_to_length",
                    "signature": "build123d.BaseEdgeObject.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.BaseEdgeObject.vertex",
                    "signature": "build123d.BaseEdgeObject.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.BaseEdgeObject.vertices",
                    "signature": "build123d.BaseEdgeObject.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BaseEdgeObject.wire",
                    "signature": "build123d.BaseEdgeObject.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseEdgeObject.wires",
                    "signature": "build123d.BaseEdgeObject.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.BaseLineObject",
            "signature": "build123d.BaseLineObject(curve: 'Wire', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BaseLineObject.bounding_box",
                    "signature": "build123d.BaseLineObject.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.BaseLineObject.cast",
                    "signature": "build123d.BaseLineObject.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.center",
                    "signature": "build123d.BaseLineObject.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.chamfer_2d",
                    "signature": "build123d.BaseLineObject.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.clean",
                    "signature": "build123d.BaseLineObject.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.close",
                    "signature": "build123d.BaseLineObject.close(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.closest_points",
                    "signature": "build123d.BaseLineObject.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.BaseLineObject.combine",
                    "signature": "build123d.BaseLineObject.combine(wires: 'Iterable[Union[Wire, Edge]]', tol: 'float' = 1e-09) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.BaseLineObject.combined_center",
                    "signature": "build123d.BaseLineObject.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.common_plane",
                    "signature": "build123d.BaseLineObject.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.BaseLineObject.compound",
                    "signature": "build123d.BaseLineObject.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseLineObject.compounds",
                    "signature": "build123d.BaseLineObject.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.BaseLineObject.compute_mass",
                    "signature": "build123d.BaseLineObject.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BaseLineObject.copy",
                    "signature": "build123d.BaseLineObject.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.copy_attributes_to",
                    "signature": "build123d.BaseLineObject.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.BaseLineObject.cut",
                    "signature": "build123d.BaseLineObject.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.distance",
                    "signature": "build123d.BaseLineObject.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BaseLineObject.distance_to",
                    "signature": "build123d.BaseLineObject.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.BaseLineObject.distance_to_with_closest_points",
                    "signature": "build123d.BaseLineObject.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.BaseLineObject.distances",
                    "signature": "build123d.BaseLineObject.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.BaseLineObject.edge",
                    "signature": "build123d.BaseLineObject.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseLineObject.edges",
                    "signature": "build123d.BaseLineObject.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BaseLineObject.end_point",
                    "signature": "build123d.BaseLineObject.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.export_brep",
                    "signature": "build123d.BaseLineObject.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.BaseLineObject.export_step",
                    "signature": "build123d.BaseLineObject.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.BaseLineObject.export_stl",
                    "signature": "build123d.BaseLineObject.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.BaseLineObject.extrude",
                    "signature": "build123d.BaseLineObject.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.face",
                    "signature": "build123d.BaseLineObject.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.BaseLineObject.faces",
                    "signature": "build123d.BaseLineObject.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BaseLineObject.faces_intersected_by_axis",
                    "signature": "build123d.BaseLineObject.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BaseLineObject.fillet_2d",
                    "signature": "build123d.BaseLineObject.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.find_intersection",
                    "signature": "build123d.BaseLineObject.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BaseLineObject.find_intersection_points",
                    "signature": "build123d.BaseLineObject.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BaseLineObject.fix",
                    "signature": "build123d.BaseLineObject.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.fix_degenerate_edges",
                    "signature": "build123d.BaseLineObject.fix_degenerate_edges(self, precision: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.fuse",
                    "signature": "build123d.BaseLineObject.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.hash_code",
                    "signature": "build123d.BaseLineObject.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.BaseLineObject.intersect",
                    "signature": "build123d.BaseLineObject.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.BaseLineObject.is_equal",
                    "signature": "build123d.BaseLineObject.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BaseLineObject.is_null",
                    "signature": "build123d.BaseLineObject.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.BaseLineObject.is_same",
                    "signature": "build123d.BaseLineObject.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BaseLineObject.is_valid",
                    "signature": "build123d.BaseLineObject.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.BaseLineObject.iter_path_reverse",
                    "signature": "build123d.BaseLineObject.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.BaseLineObject.locate",
                    "signature": "build123d.BaseLineObject.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.located",
                    "signature": "build123d.BaseLineObject.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.location_at",
                    "signature": "build123d.BaseLineObject.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.BaseLineObject.locations",
                    "signature": "build123d.BaseLineObject.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.BaseLineObject.make_circle",
                    "signature": "build123d.BaseLineObject.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.make_convex_hull",
                    "signature": "build123d.BaseLineObject.make_convex_hull(edges: 'Iterable[Edge]', tolerance: 'float' = 0.001) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.make_ellipse",
                    "signature": "build123d.BaseLineObject.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, closed: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.make_polygon",
                    "signature": "build123d.BaseLineObject.make_polygon(vertices: 'Iterable[VectorLike]', close: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.make_rect",
                    "signature": "build123d.BaseLineObject.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.make_wire",
                    "signature": "build123d.BaseLineObject.make_wire(edges: 'Iterable[Edge]', sequenced: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.mesh",
                    "signature": "build123d.BaseLineObject.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.BaseLineObject.mirror",
                    "signature": "build123d.BaseLineObject.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.move",
                    "signature": "build123d.BaseLineObject.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.moved",
                    "signature": "build123d.BaseLineObject.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.normal",
                    "signature": "build123d.BaseLineObject.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.offset_2d",
                    "signature": "build123d.BaseLineObject.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.BaseLineObject.order_edges",
                    "signature": "build123d.BaseLineObject.order_edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BaseLineObject.param_at",
                    "signature": "build123d.BaseLineObject.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.BaseLineObject.param_at_point",
                    "signature": "build123d.BaseLineObject.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.BaseLineObject.perpendicular_line",
                    "signature": "build123d.BaseLineObject.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseLineObject.position_at",
                    "signature": "build123d.BaseLineObject.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.positions",
                    "signature": "build123d.BaseLineObject.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.BaseLineObject.project",
                    "signature": "build123d.BaseLineObject.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.BaseLineObject.project_faces",
                    "signature": "build123d.BaseLineObject.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseLineObject.project_to_shape",
                    "signature": "build123d.BaseLineObject.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Wire]'"
                },
                {
                    "name": "build123d.BaseLineObject.project_to_viewport",
                    "signature": "build123d.BaseLineObject.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.BaseLineObject.relocate",
                    "signature": "build123d.BaseLineObject.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.BaseLineObject.rotate",
                    "signature": "build123d.BaseLineObject.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.scale",
                    "signature": "build123d.BaseLineObject.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.shape_type",
                    "signature": "build123d.BaseLineObject.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.BaseLineObject.shell",
                    "signature": "build123d.BaseLineObject.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.BaseLineObject.shells",
                    "signature": "build123d.BaseLineObject.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.BaseLineObject.show_topology",
                    "signature": "build123d.BaseLineObject.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.BaseLineObject.solid",
                    "signature": "build123d.BaseLineObject.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.BaseLineObject.solids",
                    "signature": "build123d.BaseLineObject.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.BaseLineObject.split",
                    "signature": "build123d.BaseLineObject.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.split_by_perimeter",
                    "signature": "build123d.BaseLineObject.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.BaseLineObject.start_point",
                    "signature": "build123d.BaseLineObject.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.stitch",
                    "signature": "build123d.BaseLineObject.stitch(self, other: 'Wire') -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.tangent_angle_at",
                    "signature": "build123d.BaseLineObject.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.BaseLineObject.tangent_at",
                    "signature": "build123d.BaseLineObject.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseLineObject.tessellate",
                    "signature": "build123d.BaseLineObject.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.BaseLineObject.to_arcs",
                    "signature": "build123d.BaseLineObject.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.BaseLineObject.to_splines",
                    "signature": "build123d.BaseLineObject.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.BaseLineObject.to_vtk_poly_data",
                    "signature": "build123d.BaseLineObject.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.BaseLineObject.to_wire",
                    "signature": "build123d.BaseLineObject.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.transform_geometry",
                    "signature": "build123d.BaseLineObject.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.transform_shape",
                    "signature": "build123d.BaseLineObject.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.transformed",
                    "signature": "build123d.BaseLineObject.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.translate",
                    "signature": "build123d.BaseLineObject.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BaseLineObject.trim",
                    "signature": "build123d.BaseLineObject.trim(self: 'Wire', start: 'float', end: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.vertex",
                    "signature": "build123d.BaseLineObject.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.BaseLineObject.vertices",
                    "signature": "build123d.BaseLineObject.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BaseLineObject.wire",
                    "signature": "build123d.BaseLineObject.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseLineObject.wires",
                    "signature": "build123d.BaseLineObject.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.BasePartObject",
            "signature": "build123d.BasePartObject(part: 'Union[Part, Solid]', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = None, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BasePartObject.bounding_box",
                    "signature": "build123d.BasePartObject.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.BasePartObject.cast",
                    "signature": "build123d.BasePartObject.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.center",
                    "signature": "build123d.BasePartObject.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.BasePartObject.chamfer",
                    "signature": "build123d.BasePartObject.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.clean",
                    "signature": "build123d.BasePartObject.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.closest_points",
                    "signature": "build123d.BasePartObject.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.BasePartObject.combined_center",
                    "signature": "build123d.BasePartObject.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.BasePartObject.compound",
                    "signature": "build123d.BasePartObject.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.compounds",
                    "signature": "build123d.BasePartObject.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.BasePartObject.compute_mass",
                    "signature": "build123d.BasePartObject.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BasePartObject.copy",
                    "signature": "build123d.BasePartObject.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.copy_attributes_to",
                    "signature": "build123d.BasePartObject.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.BasePartObject.cut",
                    "signature": "build123d.BasePartObject.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.distance",
                    "signature": "build123d.BasePartObject.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BasePartObject.distance_to",
                    "signature": "build123d.BasePartObject.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.BasePartObject.distance_to_with_closest_points",
                    "signature": "build123d.BasePartObject.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.BasePartObject.distances",
                    "signature": "build123d.BasePartObject.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.BasePartObject.do_children_intersect",
                    "signature": "build123d.BasePartObject.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.BasePartObject.dprism",
                    "signature": "build123d.BasePartObject.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.BasePartObject.edge",
                    "signature": "build123d.BasePartObject.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.BasePartObject.edges",
                    "signature": "build123d.BasePartObject.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BasePartObject.export_brep",
                    "signature": "build123d.BasePartObject.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.export_step",
                    "signature": "build123d.BasePartObject.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.BasePartObject.export_stl",
                    "signature": "build123d.BasePartObject.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.extrude",
                    "signature": "build123d.BasePartObject.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.face",
                    "signature": "build123d.BasePartObject.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.BasePartObject.faces",
                    "signature": "build123d.BasePartObject.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BasePartObject.faces_intersected_by_axis",
                    "signature": "build123d.BasePartObject.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BasePartObject.fillet",
                    "signature": "build123d.BasePartObject.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.find_intersection",
                    "signature": "build123d.BasePartObject.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BasePartObject.find_intersection_points",
                    "signature": "build123d.BasePartObject.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BasePartObject.first_level_shapes",
                    "signature": "build123d.BasePartObject.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.BasePartObject.fix",
                    "signature": "build123d.BasePartObject.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.fuse",
                    "signature": "build123d.BasePartObject.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.get_type",
                    "signature": "build123d.BasePartObject.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.BasePartObject.hash_code",
                    "signature": "build123d.BasePartObject.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.BasePartObject.hollow",
                    "signature": "build123d.BasePartObject.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.BasePartObject.intersect",
                    "signature": "build123d.BasePartObject.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.is_equal",
                    "signature": "build123d.BasePartObject.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.is_inside",
                    "signature": "build123d.BasePartObject.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.is_null",
                    "signature": "build123d.BasePartObject.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.is_same",
                    "signature": "build123d.BasePartObject.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.is_valid",
                    "signature": "build123d.BasePartObject.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.BasePartObject.iter_path_reverse",
                    "signature": "build123d.BasePartObject.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.BasePartObject.locate",
                    "signature": "build123d.BasePartObject.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.located",
                    "signature": "build123d.BasePartObject.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.make_compound",
                    "signature": "build123d.BasePartObject.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.make_text",
                    "signature": "build123d.BasePartObject.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.BasePartObject.make_triad",
                    "signature": "build123d.BasePartObject.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.max_fillet",
                    "signature": "build123d.BasePartObject.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.BasePartObject.mesh",
                    "signature": "build123d.BasePartObject.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.BasePartObject.mirror",
                    "signature": "build123d.BasePartObject.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.move",
                    "signature": "build123d.BasePartObject.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.moved",
                    "signature": "build123d.BasePartObject.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.offset_3d",
                    "signature": "build123d.BasePartObject.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.BasePartObject.project_faces",
                    "signature": "build123d.BasePartObject.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.BasePartObject.project_to_viewport",
                    "signature": "build123d.BasePartObject.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.BasePartObject.relocate",
                    "signature": "build123d.BasePartObject.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.BasePartObject.rotate",
                    "signature": "build123d.BasePartObject.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.scale",
                    "signature": "build123d.BasePartObject.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.shape_type",
                    "signature": "build123d.BasePartObject.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.BasePartObject.shell",
                    "signature": "build123d.BasePartObject.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.BasePartObject.shells",
                    "signature": "build123d.BasePartObject.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.BasePartObject.show_topology",
                    "signature": "build123d.BasePartObject.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.BasePartObject.solid",
                    "signature": "build123d.BasePartObject.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.BasePartObject.solids",
                    "signature": "build123d.BasePartObject.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.BasePartObject.split",
                    "signature": "build123d.BasePartObject.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.split_by_perimeter",
                    "signature": "build123d.BasePartObject.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.BasePartObject.tessellate",
                    "signature": "build123d.BasePartObject.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.BasePartObject.to_arcs",
                    "signature": "build123d.BasePartObject.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.BasePartObject.to_splines",
                    "signature": "build123d.BasePartObject.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.BasePartObject.to_vtk_poly_data",
                    "signature": "build123d.BasePartObject.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.BasePartObject.transform_geometry",
                    "signature": "build123d.BasePartObject.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.transform_shape",
                    "signature": "build123d.BasePartObject.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.transformed",
                    "signature": "build123d.BasePartObject.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.translate",
                    "signature": "build123d.BasePartObject.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BasePartObject.unwrap",
                    "signature": "build123d.BasePartObject.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.BasePartObject.vertex",
                    "signature": "build123d.BasePartObject.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.BasePartObject.vertices",
                    "signature": "build123d.BasePartObject.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BasePartObject.wire",
                    "signature": "build123d.BasePartObject.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BasePartObject.wires",
                    "signature": "build123d.BasePartObject.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.BaseSketchObject",
            "signature": "build123d.BaseSketchObject(obj: 'Union[Compound, Face]', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = None, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BaseSketchObject.bounding_box",
                    "signature": "build123d.BaseSketchObject.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.BaseSketchObject.cast",
                    "signature": "build123d.BaseSketchObject.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.center",
                    "signature": "build123d.BaseSketchObject.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseSketchObject.chamfer",
                    "signature": "build123d.BaseSketchObject.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.clean",
                    "signature": "build123d.BaseSketchObject.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.closest_points",
                    "signature": "build123d.BaseSketchObject.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.BaseSketchObject.combined_center",
                    "signature": "build123d.BaseSketchObject.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.BaseSketchObject.compound",
                    "signature": "build123d.BaseSketchObject.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.compounds",
                    "signature": "build123d.BaseSketchObject.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.BaseSketchObject.compute_mass",
                    "signature": "build123d.BaseSketchObject.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BaseSketchObject.copy",
                    "signature": "build123d.BaseSketchObject.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.copy_attributes_to",
                    "signature": "build123d.BaseSketchObject.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.BaseSketchObject.cut",
                    "signature": "build123d.BaseSketchObject.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.distance",
                    "signature": "build123d.BaseSketchObject.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.BaseSketchObject.distance_to",
                    "signature": "build123d.BaseSketchObject.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.BaseSketchObject.distance_to_with_closest_points",
                    "signature": "build123d.BaseSketchObject.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.BaseSketchObject.distances",
                    "signature": "build123d.BaseSketchObject.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.BaseSketchObject.do_children_intersect",
                    "signature": "build123d.BaseSketchObject.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.BaseSketchObject.dprism",
                    "signature": "build123d.BaseSketchObject.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.BaseSketchObject.edge",
                    "signature": "build123d.BaseSketchObject.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.BaseSketchObject.edges",
                    "signature": "build123d.BaseSketchObject.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BaseSketchObject.export_brep",
                    "signature": "build123d.BaseSketchObject.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.export_step",
                    "signature": "build123d.BaseSketchObject.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.BaseSketchObject.export_stl",
                    "signature": "build123d.BaseSketchObject.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.extrude",
                    "signature": "build123d.BaseSketchObject.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.face",
                    "signature": "build123d.BaseSketchObject.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.BaseSketchObject.faces",
                    "signature": "build123d.BaseSketchObject.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BaseSketchObject.faces_intersected_by_axis",
                    "signature": "build123d.BaseSketchObject.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BaseSketchObject.fillet",
                    "signature": "build123d.BaseSketchObject.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.find_intersection",
                    "signature": "build123d.BaseSketchObject.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BaseSketchObject.find_intersection_points",
                    "signature": "build123d.BaseSketchObject.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.BaseSketchObject.first_level_shapes",
                    "signature": "build123d.BaseSketchObject.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.BaseSketchObject.fix",
                    "signature": "build123d.BaseSketchObject.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.fuse",
                    "signature": "build123d.BaseSketchObject.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.get_type",
                    "signature": "build123d.BaseSketchObject.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.BaseSketchObject.hash_code",
                    "signature": "build123d.BaseSketchObject.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.BaseSketchObject.hollow",
                    "signature": "build123d.BaseSketchObject.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.BaseSketchObject.intersect",
                    "signature": "build123d.BaseSketchObject.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.is_equal",
                    "signature": "build123d.BaseSketchObject.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.is_inside",
                    "signature": "build123d.BaseSketchObject.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.is_null",
                    "signature": "build123d.BaseSketchObject.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.is_same",
                    "signature": "build123d.BaseSketchObject.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.is_valid",
                    "signature": "build123d.BaseSketchObject.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.BaseSketchObject.iter_path_reverse",
                    "signature": "build123d.BaseSketchObject.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.BaseSketchObject.locate",
                    "signature": "build123d.BaseSketchObject.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.located",
                    "signature": "build123d.BaseSketchObject.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.make_compound",
                    "signature": "build123d.BaseSketchObject.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.make_text",
                    "signature": "build123d.BaseSketchObject.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.BaseSketchObject.make_triad",
                    "signature": "build123d.BaseSketchObject.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.max_fillet",
                    "signature": "build123d.BaseSketchObject.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.BaseSketchObject.mesh",
                    "signature": "build123d.BaseSketchObject.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.BaseSketchObject.mirror",
                    "signature": "build123d.BaseSketchObject.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.move",
                    "signature": "build123d.BaseSketchObject.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.moved",
                    "signature": "build123d.BaseSketchObject.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.offset_3d",
                    "signature": "build123d.BaseSketchObject.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.BaseSketchObject.project_faces",
                    "signature": "build123d.BaseSketchObject.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.BaseSketchObject.project_to_viewport",
                    "signature": "build123d.BaseSketchObject.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.BaseSketchObject.relocate",
                    "signature": "build123d.BaseSketchObject.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.BaseSketchObject.rotate",
                    "signature": "build123d.BaseSketchObject.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.scale",
                    "signature": "build123d.BaseSketchObject.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.shape_type",
                    "signature": "build123d.BaseSketchObject.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.BaseSketchObject.shell",
                    "signature": "build123d.BaseSketchObject.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.BaseSketchObject.shells",
                    "signature": "build123d.BaseSketchObject.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.BaseSketchObject.show_topology",
                    "signature": "build123d.BaseSketchObject.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.BaseSketchObject.solid",
                    "signature": "build123d.BaseSketchObject.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.BaseSketchObject.solids",
                    "signature": "build123d.BaseSketchObject.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.BaseSketchObject.split",
                    "signature": "build123d.BaseSketchObject.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.split_by_perimeter",
                    "signature": "build123d.BaseSketchObject.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.BaseSketchObject.tessellate",
                    "signature": "build123d.BaseSketchObject.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.BaseSketchObject.to_arcs",
                    "signature": "build123d.BaseSketchObject.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.BaseSketchObject.to_splines",
                    "signature": "build123d.BaseSketchObject.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.BaseSketchObject.to_vtk_poly_data",
                    "signature": "build123d.BaseSketchObject.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.BaseSketchObject.transform_geometry",
                    "signature": "build123d.BaseSketchObject.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.transform_shape",
                    "signature": "build123d.BaseSketchObject.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.transformed",
                    "signature": "build123d.BaseSketchObject.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.translate",
                    "signature": "build123d.BaseSketchObject.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.BaseSketchObject.unwrap",
                    "signature": "build123d.BaseSketchObject.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.BaseSketchObject.vertex",
                    "signature": "build123d.BaseSketchObject.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.BaseSketchObject.vertices",
                    "signature": "build123d.BaseSketchObject.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BaseSketchObject.wire",
                    "signature": "build123d.BaseSketchObject.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.BaseSketchObject.wires",
                    "signature": "build123d.BaseSketchObject.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Bezier",
            "signature": "build123d.Bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Bezier.bounding_box",
                    "signature": "build123d.Bezier.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Bezier.cast",
                    "signature": "build123d.Bezier.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.center",
                    "signature": "build123d.Bezier.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.clean",
                    "signature": "build123d.Bezier.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.close",
                    "signature": "build123d.Bezier.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Bezier.closest_points",
                    "signature": "build123d.Bezier.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Bezier.combined_center",
                    "signature": "build123d.Bezier.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.common_plane",
                    "signature": "build123d.Bezier.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Bezier.compound",
                    "signature": "build123d.Bezier.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Bezier.compounds",
                    "signature": "build123d.Bezier.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Bezier.compute_mass",
                    "signature": "build123d.Bezier.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Bezier.copy",
                    "signature": "build123d.Bezier.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.copy_attributes_to",
                    "signature": "build123d.Bezier.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Bezier.cut",
                    "signature": "build123d.Bezier.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.distance",
                    "signature": "build123d.Bezier.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Bezier.distance_to",
                    "signature": "build123d.Bezier.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Bezier.distance_to_with_closest_points",
                    "signature": "build123d.Bezier.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Bezier.distances",
                    "signature": "build123d.Bezier.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Bezier.distribute_locations",
                    "signature": "build123d.Bezier.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Bezier.edge",
                    "signature": "build123d.Bezier.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.edges",
                    "signature": "build123d.Bezier.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Bezier.end_point",
                    "signature": "build123d.Bezier.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.export_brep",
                    "signature": "build123d.Bezier.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Bezier.export_step",
                    "signature": "build123d.Bezier.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Bezier.export_stl",
                    "signature": "build123d.Bezier.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Bezier.extrude",
                    "signature": "build123d.Bezier.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.face",
                    "signature": "build123d.Bezier.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Bezier.faces",
                    "signature": "build123d.Bezier.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Bezier.faces_intersected_by_axis",
                    "signature": "build123d.Bezier.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Bezier.find_intersection",
                    "signature": "build123d.Bezier.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Bezier.find_intersection_points",
                    "signature": "build123d.Bezier.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.Bezier.find_tangent",
                    "signature": "build123d.Bezier.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.Bezier.fix",
                    "signature": "build123d.Bezier.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.fuse",
                    "signature": "build123d.Bezier.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.hash_code",
                    "signature": "build123d.Bezier.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Bezier.intersect",
                    "signature": "build123d.Bezier.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.Bezier.is_equal",
                    "signature": "build123d.Bezier.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Bezier.is_null",
                    "signature": "build123d.Bezier.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Bezier.is_same",
                    "signature": "build123d.Bezier.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Bezier.is_valid",
                    "signature": "build123d.Bezier.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Bezier.iter_path_reverse",
                    "signature": "build123d.Bezier.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Bezier.locate",
                    "signature": "build123d.Bezier.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.located",
                    "signature": "build123d.Bezier.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.location_at",
                    "signature": "build123d.Bezier.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Bezier.locations",
                    "signature": "build123d.Bezier.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Bezier.make_bezier",
                    "signature": "build123d.Bezier.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_circle",
                    "signature": "build123d.Bezier.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_ellipse",
                    "signature": "build123d.Bezier.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_helix",
                    "signature": "build123d.Bezier.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Bezier.make_line",
                    "signature": "build123d.Bezier.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_mid_way",
                    "signature": "build123d.Bezier.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_spline",
                    "signature": "build123d.Bezier.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_spline_approx",
                    "signature": "build123d.Bezier.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_tangent_arc",
                    "signature": "build123d.Bezier.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.make_three_point_arc",
                    "signature": "build123d.Bezier.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.mesh",
                    "signature": "build123d.Bezier.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Bezier.mirror",
                    "signature": "build123d.Bezier.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.move",
                    "signature": "build123d.Bezier.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.moved",
                    "signature": "build123d.Bezier.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.normal",
                    "signature": "build123d.Bezier.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.offset_2d",
                    "signature": "build123d.Bezier.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Bezier.param_at",
                    "signature": "build123d.Bezier.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Bezier.param_at_point",
                    "signature": "build123d.Bezier.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Bezier.perpendicular_line",
                    "signature": "build123d.Bezier.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.position_at",
                    "signature": "build123d.Bezier.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.positions",
                    "signature": "build123d.Bezier.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Bezier.project",
                    "signature": "build123d.Bezier.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Bezier.project_faces",
                    "signature": "build123d.Bezier.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Bezier.project_to_shape",
                    "signature": "build123d.Bezier.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.Bezier.project_to_viewport",
                    "signature": "build123d.Bezier.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Bezier.relocate",
                    "signature": "build123d.Bezier.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Bezier.reversed",
                    "signature": "build123d.Bezier.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.rotate",
                    "signature": "build123d.Bezier.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.scale",
                    "signature": "build123d.Bezier.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.shape_type",
                    "signature": "build123d.Bezier.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Bezier.shell",
                    "signature": "build123d.Bezier.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Bezier.shells",
                    "signature": "build123d.Bezier.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Bezier.show_topology",
                    "signature": "build123d.Bezier.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Bezier.solid",
                    "signature": "build123d.Bezier.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Bezier.solids",
                    "signature": "build123d.Bezier.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Bezier.split",
                    "signature": "build123d.Bezier.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.split_by_perimeter",
                    "signature": "build123d.Bezier.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Bezier.start_point",
                    "signature": "build123d.Bezier.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.tangent_angle_at",
                    "signature": "build123d.Bezier.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Bezier.tangent_at",
                    "signature": "build123d.Bezier.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Bezier.tessellate",
                    "signature": "build123d.Bezier.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Bezier.to_arcs",
                    "signature": "build123d.Bezier.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Bezier.to_axis",
                    "signature": "build123d.Bezier.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Bezier.to_splines",
                    "signature": "build123d.Bezier.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Bezier.to_vtk_poly_data",
                    "signature": "build123d.Bezier.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Bezier.to_wire",
                    "signature": "build123d.Bezier.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Bezier.transform_geometry",
                    "signature": "build123d.Bezier.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.transform_shape",
                    "signature": "build123d.Bezier.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.transformed",
                    "signature": "build123d.Bezier.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.translate",
                    "signature": "build123d.Bezier.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Bezier.trim",
                    "signature": "build123d.Bezier.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.trim_to_length",
                    "signature": "build123d.Bezier.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Bezier.vertex",
                    "signature": "build123d.Bezier.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Bezier.vertices",
                    "signature": "build123d.Bezier.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Bezier.wire",
                    "signature": "build123d.Bezier.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Bezier.wires",
                    "signature": "build123d.Bezier.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.BoundBox",
            "signature": "build123d.BoundBox(bounding_box: 'Bnd_Box') -> 'None'",
            "methods": [
                {
                    "name": "build123d.BoundBox.add",
                    "signature": "build123d.BoundBox.add(self, obj: 'Union[tuple[float, float, float], Vector, BoundBox]', tol: 'float' = None) -> 'BoundBox'"
                },
                {
                    "name": "build123d.BoundBox.center",
                    "signature": "build123d.BoundBox.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.BoundBox.find_outside_box_2d",
                    "signature": "build123d.BoundBox.find_outside_box_2d(bb1: 'BoundBox', bb2: 'BoundBox') -> 'Optional[BoundBox]'"
                },
                {
                    "name": "build123d.BoundBox.is_inside",
                    "signature": "build123d.BoundBox.is_inside(self, second_box: 'BoundBox') -> 'bool'"
                },
                {
                    "name": "build123d.BoundBox.to_align_offset",
                    "signature": "build123d.BoundBox.to_align_offset(self, align: 'Tuple[float, float]') -> 'Tuple[float, float]'"
                }
            ],
            "variables": [
                "diagonal"
            ]
        },
        {
            "name": "build123d.Box",
            "signature": "build123d.Box(length: 'float', width: 'float', height: 'float', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Box.bounding_box",
                    "signature": "build123d.Box.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Box.cast",
                    "signature": "build123d.Box.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Box.center",
                    "signature": "build123d.Box.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Box.chamfer",
                    "signature": "build123d.Box.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Box.clean",
                    "signature": "build123d.Box.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Box.closest_points",
                    "signature": "build123d.Box.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Box.combined_center",
                    "signature": "build123d.Box.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Box.compound",
                    "signature": "build123d.Box.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Box.compounds",
                    "signature": "build123d.Box.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Box.compute_mass",
                    "signature": "build123d.Box.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Box.copy",
                    "signature": "build123d.Box.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Box.copy_attributes_to",
                    "signature": "build123d.Box.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Box.cut",
                    "signature": "build123d.Box.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Box.distance",
                    "signature": "build123d.Box.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Box.distance_to",
                    "signature": "build123d.Box.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Box.distance_to_with_closest_points",
                    "signature": "build123d.Box.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Box.distances",
                    "signature": "build123d.Box.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Box.do_children_intersect",
                    "signature": "build123d.Box.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Box.dprism",
                    "signature": "build123d.Box.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Box.edge",
                    "signature": "build123d.Box.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Box.edges",
                    "signature": "build123d.Box.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Box.export_brep",
                    "signature": "build123d.Box.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Box.export_step",
                    "signature": "build123d.Box.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Box.export_stl",
                    "signature": "build123d.Box.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Box.extrude",
                    "signature": "build123d.Box.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Box.face",
                    "signature": "build123d.Box.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Box.faces",
                    "signature": "build123d.Box.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Box.faces_intersected_by_axis",
                    "signature": "build123d.Box.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Box.fillet",
                    "signature": "build123d.Box.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Box.find_intersection",
                    "signature": "build123d.Box.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Box.find_intersection_points",
                    "signature": "build123d.Box.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Box.first_level_shapes",
                    "signature": "build123d.Box.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Box.fix",
                    "signature": "build123d.Box.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Box.fuse",
                    "signature": "build123d.Box.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Box.get_type",
                    "signature": "build123d.Box.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Box.hash_code",
                    "signature": "build123d.Box.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Box.hollow",
                    "signature": "build123d.Box.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Box.intersect",
                    "signature": "build123d.Box.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Box.is_equal",
                    "signature": "build123d.Box.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Box.is_inside",
                    "signature": "build123d.Box.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Box.is_null",
                    "signature": "build123d.Box.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Box.is_same",
                    "signature": "build123d.Box.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Box.is_valid",
                    "signature": "build123d.Box.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Box.iter_path_reverse",
                    "signature": "build123d.Box.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Box.locate",
                    "signature": "build123d.Box.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Box.located",
                    "signature": "build123d.Box.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Box.make_compound",
                    "signature": "build123d.Box.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Box.make_text",
                    "signature": "build123d.Box.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Box.make_triad",
                    "signature": "build123d.Box.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Box.max_fillet",
                    "signature": "build123d.Box.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Box.mesh",
                    "signature": "build123d.Box.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Box.mirror",
                    "signature": "build123d.Box.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Box.move",
                    "signature": "build123d.Box.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Box.moved",
                    "signature": "build123d.Box.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Box.offset_3d",
                    "signature": "build123d.Box.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Box.project_faces",
                    "signature": "build123d.Box.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Box.project_to_viewport",
                    "signature": "build123d.Box.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Box.relocate",
                    "signature": "build123d.Box.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Box.rotate",
                    "signature": "build123d.Box.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Box.scale",
                    "signature": "build123d.Box.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Box.shape_type",
                    "signature": "build123d.Box.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Box.shell",
                    "signature": "build123d.Box.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Box.shells",
                    "signature": "build123d.Box.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Box.show_topology",
                    "signature": "build123d.Box.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Box.solid",
                    "signature": "build123d.Box.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Box.solids",
                    "signature": "build123d.Box.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Box.split",
                    "signature": "build123d.Box.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Box.split_by_perimeter",
                    "signature": "build123d.Box.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Box.tessellate",
                    "signature": "build123d.Box.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Box.to_arcs",
                    "signature": "build123d.Box.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Box.to_splines",
                    "signature": "build123d.Box.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Box.to_vtk_poly_data",
                    "signature": "build123d.Box.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Box.transform_geometry",
                    "signature": "build123d.Box.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Box.transform_shape",
                    "signature": "build123d.Box.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Box.transformed",
                    "signature": "build123d.Box.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Box.translate",
                    "signature": "build123d.Box.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Box.unwrap",
                    "signature": "build123d.Box.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Box.vertex",
                    "signature": "build123d.Box.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Box.vertices",
                    "signature": "build123d.Box.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Box.wire",
                    "signature": "build123d.Box.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Box.wires",
                    "signature": "build123d.Box.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.BuildLine",
            "signature": "build123d.BuildLine(workplane: 'Union[Face, Plane, Location]' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BuildLine.edge",
                    "signature": "build123d.BuildLine.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
                },
                {
                    "name": "build123d.BuildLine.edges",
                    "signature": "build123d.BuildLine.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BuildLine.face",
                    "signature": "build123d.BuildLine.face(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.faces",
                    "signature": "build123d.BuildLine.faces(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.solid",
                    "signature": "build123d.BuildLine.solid(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.solids",
                    "signature": "build123d.BuildLine.solids(self, *args)"
                },
                {
                    "name": "build123d.BuildLine.validate_inputs",
                    "signature": "build123d.BuildLine.validate_inputs(self, validating_class, objects: 'Union[Shape, Iterable[Shape]]' = None)"
                },
                {
                    "name": "build123d.BuildLine.vertex",
                    "signature": "build123d.BuildLine.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
                },
                {
                    "name": "build123d.BuildLine.vertices",
                    "signature": "build123d.BuildLine.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BuildLine.wire",
                    "signature": "build123d.BuildLine.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
                },
                {
                    "name": "build123d.BuildLine.wires",
                    "signature": "build123d.BuildLine.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "max_dimension",
                "new_edges"
            ]
        },
        {
            "name": "build123d.BuildPart",
            "signature": "build123d.BuildPart(*workplanes: 'Union[Face, Plane, Location]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BuildPart.edge",
                    "signature": "build123d.BuildPart.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
                },
                {
                    "name": "build123d.BuildPart.edges",
                    "signature": "build123d.BuildPart.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BuildPart.face",
                    "signature": "build123d.BuildPart.face(self, select: 'Select' = <Select.ALL>) -> 'Face'"
                },
                {
                    "name": "build123d.BuildPart.faces",
                    "signature": "build123d.BuildPart.faces(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BuildPart.solid",
                    "signature": "build123d.BuildPart.solid(self, select: 'Select' = <Select.ALL>) -> 'Solid'"
                },
                {
                    "name": "build123d.BuildPart.solids",
                    "signature": "build123d.BuildPart.solids(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.BuildPart.validate_inputs",
                    "signature": "build123d.BuildPart.validate_inputs(self, validating_class, objects: 'Union[Shape, Iterable[Shape]]' = None)"
                },
                {
                    "name": "build123d.BuildPart.vertex",
                    "signature": "build123d.BuildPart.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
                },
                {
                    "name": "build123d.BuildPart.vertices",
                    "signature": "build123d.BuildPart.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BuildPart.wire",
                    "signature": "build123d.BuildPart.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
                },
                {
                    "name": "build123d.BuildPart.wires",
                    "signature": "build123d.BuildPart.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "location",
                "max_dimension",
                "new_edges",
                "pending_edges_as_wire"
            ]
        },
        {
            "name": "build123d.BuildSketch",
            "signature": "build123d.BuildSketch(*workplanes: 'Union[Face, Plane, Location]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.BuildSketch.consolidate_edges",
                    "signature": "build123d.BuildSketch.consolidate_edges(self) -> 'Union[Wire, list[Wire]]'"
                },
                {
                    "name": "build123d.BuildSketch.edge",
                    "signature": "build123d.BuildSketch.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
                },
                {
                    "name": "build123d.BuildSketch.edges",
                    "signature": "build123d.BuildSketch.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.BuildSketch.face",
                    "signature": "build123d.BuildSketch.face(self, select: 'Select' = <Select.ALL>) -> 'Face'"
                },
                {
                    "name": "build123d.BuildSketch.faces",
                    "signature": "build123d.BuildSketch.faces(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.BuildSketch.solid",
                    "signature": "build123d.BuildSketch.solid(self, *args)"
                },
                {
                    "name": "build123d.BuildSketch.solids",
                    "signature": "build123d.BuildSketch.solids(self, *args)"
                },
                {
                    "name": "build123d.BuildSketch.validate_inputs",
                    "signature": "build123d.BuildSketch.validate_inputs(self, validating_class, objects: 'Union[Shape, Iterable[Shape]]' = None)"
                },
                {
                    "name": "build123d.BuildSketch.vertex",
                    "signature": "build123d.BuildSketch.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
                },
                {
                    "name": "build123d.BuildSketch.vertices",
                    "signature": "build123d.BuildSketch.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.BuildSketch.wire",
                    "signature": "build123d.BuildSketch.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
                },
                {
                    "name": "build123d.BuildSketch.wires",
                    "signature": "build123d.BuildSketch.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "max_dimension",
                "new_edges",
                "sketch"
            ]
        },
        {
            "name": "build123d.Builder",
            "signature": "build123d.Builder(*workplanes: 'Union[Face, Plane, Location]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Builder.edge",
                    "signature": "build123d.Builder.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
                },
                {
                    "name": "build123d.Builder.edges",
                    "signature": "build123d.Builder.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Builder.face",
                    "signature": "build123d.Builder.face(self, select: 'Select' = <Select.ALL>) -> 'Face'"
                },
                {
                    "name": "build123d.Builder.faces",
                    "signature": "build123d.Builder.faces(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Builder.solid",
                    "signature": "build123d.Builder.solid(self, select: 'Select' = <Select.ALL>) -> 'Solid'"
                },
                {
                    "name": "build123d.Builder.solids",
                    "signature": "build123d.Builder.solids(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Builder.validate_inputs",
                    "signature": "build123d.Builder.validate_inputs(self, validating_class, objects: 'Union[Shape, Iterable[Shape]]' = None)"
                },
                {
                    "name": "build123d.Builder.vertex",
                    "signature": "build123d.Builder.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
                },
                {
                    "name": "build123d.Builder.vertices",
                    "signature": "build123d.Builder.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Builder.wire",
                    "signature": "build123d.Builder.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
                },
                {
                    "name": "build123d.Builder.wires",
                    "signature": "build123d.Builder.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "max_dimension",
                "new_edges"
            ]
        },
        {
            "name": "build123d.CenterArc",
            "signature": "build123d.CenterArc(center: 'VectorLike', radius: 'float', start_angle: 'float', arc_size: 'float', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.CenterArc.bounding_box",
                    "signature": "build123d.CenterArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.CenterArc.cast",
                    "signature": "build123d.CenterArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.center",
                    "signature": "build123d.CenterArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.clean",
                    "signature": "build123d.CenterArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.close",
                    "signature": "build123d.CenterArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.CenterArc.closest_points",
                    "signature": "build123d.CenterArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.CenterArc.combined_center",
                    "signature": "build123d.CenterArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.common_plane",
                    "signature": "build123d.CenterArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.CenterArc.compound",
                    "signature": "build123d.CenterArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.CenterArc.compounds",
                    "signature": "build123d.CenterArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.CenterArc.compute_mass",
                    "signature": "build123d.CenterArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.CenterArc.copy",
                    "signature": "build123d.CenterArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.copy_attributes_to",
                    "signature": "build123d.CenterArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.CenterArc.cut",
                    "signature": "build123d.CenterArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.distance",
                    "signature": "build123d.CenterArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.CenterArc.distance_to",
                    "signature": "build123d.CenterArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.CenterArc.distance_to_with_closest_points",
                    "signature": "build123d.CenterArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.CenterArc.distances",
                    "signature": "build123d.CenterArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.CenterArc.distribute_locations",
                    "signature": "build123d.CenterArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.CenterArc.edge",
                    "signature": "build123d.CenterArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.edges",
                    "signature": "build123d.CenterArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.CenterArc.end_point",
                    "signature": "build123d.CenterArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.export_brep",
                    "signature": "build123d.CenterArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.CenterArc.export_step",
                    "signature": "build123d.CenterArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.CenterArc.export_stl",
                    "signature": "build123d.CenterArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.CenterArc.extrude",
                    "signature": "build123d.CenterArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.face",
                    "signature": "build123d.CenterArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.CenterArc.faces",
                    "signature": "build123d.CenterArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.CenterArc.faces_intersected_by_axis",
                    "signature": "build123d.CenterArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.CenterArc.find_intersection",
                    "signature": "build123d.CenterArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.CenterArc.find_intersection_points",
                    "signature": "build123d.CenterArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.CenterArc.find_tangent",
                    "signature": "build123d.CenterArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.CenterArc.fix",
                    "signature": "build123d.CenterArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.fuse",
                    "signature": "build123d.CenterArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.hash_code",
                    "signature": "build123d.CenterArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.CenterArc.intersect",
                    "signature": "build123d.CenterArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.CenterArc.is_equal",
                    "signature": "build123d.CenterArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.CenterArc.is_null",
                    "signature": "build123d.CenterArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.CenterArc.is_same",
                    "signature": "build123d.CenterArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.CenterArc.is_valid",
                    "signature": "build123d.CenterArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.CenterArc.iter_path_reverse",
                    "signature": "build123d.CenterArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.CenterArc.locate",
                    "signature": "build123d.CenterArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.located",
                    "signature": "build123d.CenterArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.location_at",
                    "signature": "build123d.CenterArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.CenterArc.locations",
                    "signature": "build123d.CenterArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.CenterArc.make_bezier",
                    "signature": "build123d.CenterArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_circle",
                    "signature": "build123d.CenterArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_ellipse",
                    "signature": "build123d.CenterArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_helix",
                    "signature": "build123d.CenterArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.CenterArc.make_line",
                    "signature": "build123d.CenterArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_mid_way",
                    "signature": "build123d.CenterArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_spline",
                    "signature": "build123d.CenterArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_spline_approx",
                    "signature": "build123d.CenterArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_tangent_arc",
                    "signature": "build123d.CenterArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.make_three_point_arc",
                    "signature": "build123d.CenterArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.mesh",
                    "signature": "build123d.CenterArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.CenterArc.mirror",
                    "signature": "build123d.CenterArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.move",
                    "signature": "build123d.CenterArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.moved",
                    "signature": "build123d.CenterArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.normal",
                    "signature": "build123d.CenterArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.offset_2d",
                    "signature": "build123d.CenterArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.CenterArc.param_at",
                    "signature": "build123d.CenterArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.CenterArc.param_at_point",
                    "signature": "build123d.CenterArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.CenterArc.perpendicular_line",
                    "signature": "build123d.CenterArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.position_at",
                    "signature": "build123d.CenterArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.positions",
                    "signature": "build123d.CenterArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.CenterArc.project",
                    "signature": "build123d.CenterArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.CenterArc.project_faces",
                    "signature": "build123d.CenterArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.CenterArc.project_to_shape",
                    "signature": "build123d.CenterArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.CenterArc.project_to_viewport",
                    "signature": "build123d.CenterArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.CenterArc.relocate",
                    "signature": "build123d.CenterArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.CenterArc.reversed",
                    "signature": "build123d.CenterArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.rotate",
                    "signature": "build123d.CenterArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.scale",
                    "signature": "build123d.CenterArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.shape_type",
                    "signature": "build123d.CenterArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.CenterArc.shell",
                    "signature": "build123d.CenterArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.CenterArc.shells",
                    "signature": "build123d.CenterArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.CenterArc.show_topology",
                    "signature": "build123d.CenterArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.CenterArc.solid",
                    "signature": "build123d.CenterArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.CenterArc.solids",
                    "signature": "build123d.CenterArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.CenterArc.split",
                    "signature": "build123d.CenterArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.split_by_perimeter",
                    "signature": "build123d.CenterArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.CenterArc.start_point",
                    "signature": "build123d.CenterArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.tangent_angle_at",
                    "signature": "build123d.CenterArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.CenterArc.tangent_at",
                    "signature": "build123d.CenterArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.CenterArc.tessellate",
                    "signature": "build123d.CenterArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.CenterArc.to_arcs",
                    "signature": "build123d.CenterArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.CenterArc.to_axis",
                    "signature": "build123d.CenterArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.CenterArc.to_splines",
                    "signature": "build123d.CenterArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.CenterArc.to_vtk_poly_data",
                    "signature": "build123d.CenterArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.CenterArc.to_wire",
                    "signature": "build123d.CenterArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.CenterArc.transform_geometry",
                    "signature": "build123d.CenterArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.transform_shape",
                    "signature": "build123d.CenterArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.transformed",
                    "signature": "build123d.CenterArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.translate",
                    "signature": "build123d.CenterArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.CenterArc.trim",
                    "signature": "build123d.CenterArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.trim_to_length",
                    "signature": "build123d.CenterArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.CenterArc.vertex",
                    "signature": "build123d.CenterArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.CenterArc.vertices",
                    "signature": "build123d.CenterArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.CenterArc.wire",
                    "signature": "build123d.CenterArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.CenterArc.wires",
                    "signature": "build123d.CenterArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.CenterOf",
            "signature": "build123d.CenterOf()",
            "methods": [],
            "variables": [
                "BOUNDING_BOX",
                "GEOMETRY",
                "MASS",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Circle",
            "signature": "build123d.Circle(radius: 'float', align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Circle.bounding_box",
                    "signature": "build123d.Circle.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Circle.cast",
                    "signature": "build123d.Circle.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.center",
                    "signature": "build123d.Circle.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Circle.chamfer",
                    "signature": "build123d.Circle.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.clean",
                    "signature": "build123d.Circle.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.closest_points",
                    "signature": "build123d.Circle.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Circle.combined_center",
                    "signature": "build123d.Circle.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Circle.compound",
                    "signature": "build123d.Circle.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.compounds",
                    "signature": "build123d.Circle.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Circle.compute_mass",
                    "signature": "build123d.Circle.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Circle.copy",
                    "signature": "build123d.Circle.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.copy_attributes_to",
                    "signature": "build123d.Circle.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Circle.cut",
                    "signature": "build123d.Circle.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.distance",
                    "signature": "build123d.Circle.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Circle.distance_to",
                    "signature": "build123d.Circle.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Circle.distance_to_with_closest_points",
                    "signature": "build123d.Circle.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Circle.distances",
                    "signature": "build123d.Circle.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Circle.do_children_intersect",
                    "signature": "build123d.Circle.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Circle.dprism",
                    "signature": "build123d.Circle.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Circle.edge",
                    "signature": "build123d.Circle.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Circle.edges",
                    "signature": "build123d.Circle.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Circle.export_brep",
                    "signature": "build123d.Circle.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Circle.export_step",
                    "signature": "build123d.Circle.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Circle.export_stl",
                    "signature": "build123d.Circle.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Circle.extrude",
                    "signature": "build123d.Circle.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.face",
                    "signature": "build123d.Circle.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Circle.faces",
                    "signature": "build123d.Circle.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Circle.faces_intersected_by_axis",
                    "signature": "build123d.Circle.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Circle.fillet",
                    "signature": "build123d.Circle.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.find_intersection",
                    "signature": "build123d.Circle.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Circle.find_intersection_points",
                    "signature": "build123d.Circle.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Circle.first_level_shapes",
                    "signature": "build123d.Circle.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Circle.fix",
                    "signature": "build123d.Circle.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.fuse",
                    "signature": "build123d.Circle.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.get_type",
                    "signature": "build123d.Circle.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Circle.hash_code",
                    "signature": "build123d.Circle.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Circle.hollow",
                    "signature": "build123d.Circle.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Circle.intersect",
                    "signature": "build123d.Circle.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.is_equal",
                    "signature": "build123d.Circle.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Circle.is_inside",
                    "signature": "build123d.Circle.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Circle.is_null",
                    "signature": "build123d.Circle.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Circle.is_same",
                    "signature": "build123d.Circle.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Circle.is_valid",
                    "signature": "build123d.Circle.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Circle.iter_path_reverse",
                    "signature": "build123d.Circle.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Circle.locate",
                    "signature": "build123d.Circle.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.located",
                    "signature": "build123d.Circle.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.make_compound",
                    "signature": "build123d.Circle.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.make_text",
                    "signature": "build123d.Circle.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Circle.make_triad",
                    "signature": "build123d.Circle.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.max_fillet",
                    "signature": "build123d.Circle.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Circle.mesh",
                    "signature": "build123d.Circle.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Circle.mirror",
                    "signature": "build123d.Circle.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.move",
                    "signature": "build123d.Circle.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.moved",
                    "signature": "build123d.Circle.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.offset_3d",
                    "signature": "build123d.Circle.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Circle.project_faces",
                    "signature": "build123d.Circle.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Circle.project_to_viewport",
                    "signature": "build123d.Circle.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Circle.relocate",
                    "signature": "build123d.Circle.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Circle.rotate",
                    "signature": "build123d.Circle.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.scale",
                    "signature": "build123d.Circle.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.shape_type",
                    "signature": "build123d.Circle.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Circle.shell",
                    "signature": "build123d.Circle.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Circle.shells",
                    "signature": "build123d.Circle.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Circle.show_topology",
                    "signature": "build123d.Circle.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Circle.solid",
                    "signature": "build123d.Circle.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Circle.solids",
                    "signature": "build123d.Circle.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Circle.split",
                    "signature": "build123d.Circle.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.split_by_perimeter",
                    "signature": "build123d.Circle.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Circle.tessellate",
                    "signature": "build123d.Circle.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Circle.to_arcs",
                    "signature": "build123d.Circle.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Circle.to_splines",
                    "signature": "build123d.Circle.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Circle.to_vtk_poly_data",
                    "signature": "build123d.Circle.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Circle.transform_geometry",
                    "signature": "build123d.Circle.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.transform_shape",
                    "signature": "build123d.Circle.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.transformed",
                    "signature": "build123d.Circle.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Circle.translate",
                    "signature": "build123d.Circle.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Circle.unwrap",
                    "signature": "build123d.Circle.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Circle.vertex",
                    "signature": "build123d.Circle.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Circle.vertices",
                    "signature": "build123d.Circle.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Circle.wire",
                    "signature": "build123d.Circle.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Circle.wires",
                    "signature": "build123d.Circle.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Color",
            "signature": "build123d.Color(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Color.to_tuple",
                    "signature": "build123d.Color.to_tuple(self)"
                }
            ],
            "variables": []
        },
        {
            "name": "build123d.ColorIndex",
            "signature": "build123d.ColorIndex()",
            "methods": [],
            "variables": [
                "BLACK",
                "BLUE",
                "CYAN",
                "GRAY",
                "GREEN",
                "LIGHT_GRAY",
                "MAGENTA",
                "RED",
                "YELLOW",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Comparable",
            "signature": "build123d.Comparable()",
            "methods": [],
            "variables": []
        },
        {
            "name": "build123d.Compound",
            "signature": "build123d.Compound(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Compound.bounding_box",
                    "signature": "build123d.Compound.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Compound.cast",
                    "signature": "build123d.Compound.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.center",
                    "signature": "build123d.Compound.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Compound.chamfer",
                    "signature": "build123d.Compound.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.clean",
                    "signature": "build123d.Compound.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.closest_points",
                    "signature": "build123d.Compound.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Compound.combined_center",
                    "signature": "build123d.Compound.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Compound.compound",
                    "signature": "build123d.Compound.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.compounds",
                    "signature": "build123d.Compound.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Compound.compute_mass",
                    "signature": "build123d.Compound.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Compound.copy",
                    "signature": "build123d.Compound.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.copy_attributes_to",
                    "signature": "build123d.Compound.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Compound.cut",
                    "signature": "build123d.Compound.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.distance",
                    "signature": "build123d.Compound.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Compound.distance_to",
                    "signature": "build123d.Compound.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Compound.distance_to_with_closest_points",
                    "signature": "build123d.Compound.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Compound.distances",
                    "signature": "build123d.Compound.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Compound.do_children_intersect",
                    "signature": "build123d.Compound.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Compound.dprism",
                    "signature": "build123d.Compound.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Compound.edge",
                    "signature": "build123d.Compound.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Compound.edges",
                    "signature": "build123d.Compound.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Compound.export_brep",
                    "signature": "build123d.Compound.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Compound.export_step",
                    "signature": "build123d.Compound.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Compound.export_stl",
                    "signature": "build123d.Compound.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Compound.extrude",
                    "signature": "build123d.Compound.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.face",
                    "signature": "build123d.Compound.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Compound.faces",
                    "signature": "build123d.Compound.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Compound.faces_intersected_by_axis",
                    "signature": "build123d.Compound.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Compound.fillet",
                    "signature": "build123d.Compound.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.find_intersection",
                    "signature": "build123d.Compound.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Compound.find_intersection_points",
                    "signature": "build123d.Compound.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Compound.first_level_shapes",
                    "signature": "build123d.Compound.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Compound.fix",
                    "signature": "build123d.Compound.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.fuse",
                    "signature": "build123d.Compound.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.get_type",
                    "signature": "build123d.Compound.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Compound.hash_code",
                    "signature": "build123d.Compound.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Compound.hollow",
                    "signature": "build123d.Compound.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Compound.intersect",
                    "signature": "build123d.Compound.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.is_equal",
                    "signature": "build123d.Compound.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Compound.is_inside",
                    "signature": "build123d.Compound.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Compound.is_null",
                    "signature": "build123d.Compound.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Compound.is_same",
                    "signature": "build123d.Compound.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Compound.is_valid",
                    "signature": "build123d.Compound.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Compound.iter_path_reverse",
                    "signature": "build123d.Compound.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Compound.locate",
                    "signature": "build123d.Compound.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.located",
                    "signature": "build123d.Compound.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.make_compound",
                    "signature": "build123d.Compound.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.make_text",
                    "signature": "build123d.Compound.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Compound.make_triad",
                    "signature": "build123d.Compound.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.max_fillet",
                    "signature": "build123d.Compound.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Compound.mesh",
                    "signature": "build123d.Compound.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Compound.mirror",
                    "signature": "build123d.Compound.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.move",
                    "signature": "build123d.Compound.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.moved",
                    "signature": "build123d.Compound.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.offset_3d",
                    "signature": "build123d.Compound.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Compound.project_faces",
                    "signature": "build123d.Compound.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Compound.project_to_viewport",
                    "signature": "build123d.Compound.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Compound.relocate",
                    "signature": "build123d.Compound.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Compound.rotate",
                    "signature": "build123d.Compound.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.scale",
                    "signature": "build123d.Compound.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.shape_type",
                    "signature": "build123d.Compound.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Compound.shell",
                    "signature": "build123d.Compound.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Compound.shells",
                    "signature": "build123d.Compound.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Compound.show_topology",
                    "signature": "build123d.Compound.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Compound.solid",
                    "signature": "build123d.Compound.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Compound.solids",
                    "signature": "build123d.Compound.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Compound.split",
                    "signature": "build123d.Compound.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.split_by_perimeter",
                    "signature": "build123d.Compound.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Compound.tessellate",
                    "signature": "build123d.Compound.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Compound.to_arcs",
                    "signature": "build123d.Compound.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Compound.to_splines",
                    "signature": "build123d.Compound.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Compound.to_vtk_poly_data",
                    "signature": "build123d.Compound.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Compound.transform_geometry",
                    "signature": "build123d.Compound.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.transform_shape",
                    "signature": "build123d.Compound.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.transformed",
                    "signature": "build123d.Compound.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Compound.translate",
                    "signature": "build123d.Compound.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Compound.unwrap",
                    "signature": "build123d.Compound.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Compound.vertex",
                    "signature": "build123d.Compound.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Compound.vertices",
                    "signature": "build123d.Compound.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Compound.wire",
                    "signature": "build123d.Compound.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Compound.wires",
                    "signature": "build123d.Compound.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Cone",
            "signature": "build123d.Cone(bottom_radius: 'float', top_radius: 'float', height: 'float', arc_size: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Cone.bounding_box",
                    "signature": "build123d.Cone.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Cone.cast",
                    "signature": "build123d.Cone.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.center",
                    "signature": "build123d.Cone.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Cone.chamfer",
                    "signature": "build123d.Cone.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.clean",
                    "signature": "build123d.Cone.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.closest_points",
                    "signature": "build123d.Cone.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Cone.combined_center",
                    "signature": "build123d.Cone.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Cone.compound",
                    "signature": "build123d.Cone.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.compounds",
                    "signature": "build123d.Cone.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Cone.compute_mass",
                    "signature": "build123d.Cone.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Cone.copy",
                    "signature": "build123d.Cone.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.copy_attributes_to",
                    "signature": "build123d.Cone.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Cone.cut",
                    "signature": "build123d.Cone.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.distance",
                    "signature": "build123d.Cone.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Cone.distance_to",
                    "signature": "build123d.Cone.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Cone.distance_to_with_closest_points",
                    "signature": "build123d.Cone.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Cone.distances",
                    "signature": "build123d.Cone.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Cone.do_children_intersect",
                    "signature": "build123d.Cone.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Cone.dprism",
                    "signature": "build123d.Cone.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Cone.edge",
                    "signature": "build123d.Cone.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Cone.edges",
                    "signature": "build123d.Cone.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Cone.export_brep",
                    "signature": "build123d.Cone.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Cone.export_step",
                    "signature": "build123d.Cone.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Cone.export_stl",
                    "signature": "build123d.Cone.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Cone.extrude",
                    "signature": "build123d.Cone.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.face",
                    "signature": "build123d.Cone.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Cone.faces",
                    "signature": "build123d.Cone.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Cone.faces_intersected_by_axis",
                    "signature": "build123d.Cone.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Cone.fillet",
                    "signature": "build123d.Cone.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.find_intersection",
                    "signature": "build123d.Cone.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Cone.find_intersection_points",
                    "signature": "build123d.Cone.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Cone.first_level_shapes",
                    "signature": "build123d.Cone.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Cone.fix",
                    "signature": "build123d.Cone.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.fuse",
                    "signature": "build123d.Cone.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.get_type",
                    "signature": "build123d.Cone.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Cone.hash_code",
                    "signature": "build123d.Cone.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Cone.hollow",
                    "signature": "build123d.Cone.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Cone.intersect",
                    "signature": "build123d.Cone.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.is_equal",
                    "signature": "build123d.Cone.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Cone.is_inside",
                    "signature": "build123d.Cone.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Cone.is_null",
                    "signature": "build123d.Cone.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Cone.is_same",
                    "signature": "build123d.Cone.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Cone.is_valid",
                    "signature": "build123d.Cone.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Cone.iter_path_reverse",
                    "signature": "build123d.Cone.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Cone.locate",
                    "signature": "build123d.Cone.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.located",
                    "signature": "build123d.Cone.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.make_compound",
                    "signature": "build123d.Cone.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.make_text",
                    "signature": "build123d.Cone.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Cone.make_triad",
                    "signature": "build123d.Cone.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.max_fillet",
                    "signature": "build123d.Cone.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Cone.mesh",
                    "signature": "build123d.Cone.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Cone.mirror",
                    "signature": "build123d.Cone.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.move",
                    "signature": "build123d.Cone.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.moved",
                    "signature": "build123d.Cone.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.offset_3d",
                    "signature": "build123d.Cone.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Cone.project_faces",
                    "signature": "build123d.Cone.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Cone.project_to_viewport",
                    "signature": "build123d.Cone.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Cone.relocate",
                    "signature": "build123d.Cone.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Cone.rotate",
                    "signature": "build123d.Cone.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.scale",
                    "signature": "build123d.Cone.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.shape_type",
                    "signature": "build123d.Cone.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Cone.shell",
                    "signature": "build123d.Cone.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Cone.shells",
                    "signature": "build123d.Cone.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Cone.show_topology",
                    "signature": "build123d.Cone.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Cone.solid",
                    "signature": "build123d.Cone.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Cone.solids",
                    "signature": "build123d.Cone.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Cone.split",
                    "signature": "build123d.Cone.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.split_by_perimeter",
                    "signature": "build123d.Cone.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Cone.tessellate",
                    "signature": "build123d.Cone.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Cone.to_arcs",
                    "signature": "build123d.Cone.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Cone.to_splines",
                    "signature": "build123d.Cone.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Cone.to_vtk_poly_data",
                    "signature": "build123d.Cone.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Cone.transform_geometry",
                    "signature": "build123d.Cone.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.transform_shape",
                    "signature": "build123d.Cone.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.transformed",
                    "signature": "build123d.Cone.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Cone.translate",
                    "signature": "build123d.Cone.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Cone.unwrap",
                    "signature": "build123d.Cone.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Cone.vertex",
                    "signature": "build123d.Cone.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Cone.vertices",
                    "signature": "build123d.Cone.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Cone.wire",
                    "signature": "build123d.Cone.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Cone.wires",
                    "signature": "build123d.Cone.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.CounterBoreHole",
            "signature": "build123d.CounterBoreHole(radius: 'float', counter_bore_radius: 'float', counter_bore_depth: 'float', depth: 'float' = None, mode: 'Mode' = <Mode.SUBTRACT>)",
            "methods": [
                {
                    "name": "build123d.CounterBoreHole.bounding_box",
                    "signature": "build123d.CounterBoreHole.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.CounterBoreHole.cast",
                    "signature": "build123d.CounterBoreHole.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.center",
                    "signature": "build123d.CounterBoreHole.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.CounterBoreHole.chamfer",
                    "signature": "build123d.CounterBoreHole.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.clean",
                    "signature": "build123d.CounterBoreHole.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.closest_points",
                    "signature": "build123d.CounterBoreHole.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.CounterBoreHole.combined_center",
                    "signature": "build123d.CounterBoreHole.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.CounterBoreHole.compound",
                    "signature": "build123d.CounterBoreHole.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.compounds",
                    "signature": "build123d.CounterBoreHole.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.CounterBoreHole.compute_mass",
                    "signature": "build123d.CounterBoreHole.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.CounterBoreHole.copy",
                    "signature": "build123d.CounterBoreHole.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.copy_attributes_to",
                    "signature": "build123d.CounterBoreHole.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.CounterBoreHole.cut",
                    "signature": "build123d.CounterBoreHole.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.distance",
                    "signature": "build123d.CounterBoreHole.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.CounterBoreHole.distance_to",
                    "signature": "build123d.CounterBoreHole.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.CounterBoreHole.distance_to_with_closest_points",
                    "signature": "build123d.CounterBoreHole.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.CounterBoreHole.distances",
                    "signature": "build123d.CounterBoreHole.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.CounterBoreHole.do_children_intersect",
                    "signature": "build123d.CounterBoreHole.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.CounterBoreHole.dprism",
                    "signature": "build123d.CounterBoreHole.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterBoreHole.edge",
                    "signature": "build123d.CounterBoreHole.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.CounterBoreHole.edges",
                    "signature": "build123d.CounterBoreHole.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.CounterBoreHole.export_brep",
                    "signature": "build123d.CounterBoreHole.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.export_step",
                    "signature": "build123d.CounterBoreHole.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.CounterBoreHole.export_stl",
                    "signature": "build123d.CounterBoreHole.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.extrude",
                    "signature": "build123d.CounterBoreHole.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.face",
                    "signature": "build123d.CounterBoreHole.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.CounterBoreHole.faces",
                    "signature": "build123d.CounterBoreHole.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.CounterBoreHole.faces_intersected_by_axis",
                    "signature": "build123d.CounterBoreHole.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.CounterBoreHole.fillet",
                    "signature": "build123d.CounterBoreHole.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.find_intersection",
                    "signature": "build123d.CounterBoreHole.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.CounterBoreHole.find_intersection_points",
                    "signature": "build123d.CounterBoreHole.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.CounterBoreHole.first_level_shapes",
                    "signature": "build123d.CounterBoreHole.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.CounterBoreHole.fix",
                    "signature": "build123d.CounterBoreHole.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.fuse",
                    "signature": "build123d.CounterBoreHole.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.get_type",
                    "signature": "build123d.CounterBoreHole.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.CounterBoreHole.hash_code",
                    "signature": "build123d.CounterBoreHole.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.CounterBoreHole.hollow",
                    "signature": "build123d.CounterBoreHole.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterBoreHole.intersect",
                    "signature": "build123d.CounterBoreHole.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.is_equal",
                    "signature": "build123d.CounterBoreHole.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.is_inside",
                    "signature": "build123d.CounterBoreHole.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.is_null",
                    "signature": "build123d.CounterBoreHole.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.is_same",
                    "signature": "build123d.CounterBoreHole.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.is_valid",
                    "signature": "build123d.CounterBoreHole.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.CounterBoreHole.iter_path_reverse",
                    "signature": "build123d.CounterBoreHole.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.CounterBoreHole.locate",
                    "signature": "build123d.CounterBoreHole.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.located",
                    "signature": "build123d.CounterBoreHole.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.make_compound",
                    "signature": "build123d.CounterBoreHole.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.make_text",
                    "signature": "build123d.CounterBoreHole.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.CounterBoreHole.make_triad",
                    "signature": "build123d.CounterBoreHole.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.max_fillet",
                    "signature": "build123d.CounterBoreHole.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.CounterBoreHole.mesh",
                    "signature": "build123d.CounterBoreHole.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.CounterBoreHole.mirror",
                    "signature": "build123d.CounterBoreHole.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.move",
                    "signature": "build123d.CounterBoreHole.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.moved",
                    "signature": "build123d.CounterBoreHole.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.offset_3d",
                    "signature": "build123d.CounterBoreHole.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterBoreHole.project_faces",
                    "signature": "build123d.CounterBoreHole.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.CounterBoreHole.project_to_viewport",
                    "signature": "build123d.CounterBoreHole.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.CounterBoreHole.relocate",
                    "signature": "build123d.CounterBoreHole.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.CounterBoreHole.rotate",
                    "signature": "build123d.CounterBoreHole.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.scale",
                    "signature": "build123d.CounterBoreHole.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.shape_type",
                    "signature": "build123d.CounterBoreHole.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.CounterBoreHole.shell",
                    "signature": "build123d.CounterBoreHole.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.CounterBoreHole.shells",
                    "signature": "build123d.CounterBoreHole.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.CounterBoreHole.show_topology",
                    "signature": "build123d.CounterBoreHole.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.CounterBoreHole.solid",
                    "signature": "build123d.CounterBoreHole.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterBoreHole.solids",
                    "signature": "build123d.CounterBoreHole.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.CounterBoreHole.split",
                    "signature": "build123d.CounterBoreHole.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.split_by_perimeter",
                    "signature": "build123d.CounterBoreHole.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.CounterBoreHole.tessellate",
                    "signature": "build123d.CounterBoreHole.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.CounterBoreHole.to_arcs",
                    "signature": "build123d.CounterBoreHole.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.CounterBoreHole.to_splines",
                    "signature": "build123d.CounterBoreHole.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.CounterBoreHole.to_vtk_poly_data",
                    "signature": "build123d.CounterBoreHole.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.CounterBoreHole.transform_geometry",
                    "signature": "build123d.CounterBoreHole.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.transform_shape",
                    "signature": "build123d.CounterBoreHole.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.transformed",
                    "signature": "build123d.CounterBoreHole.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.translate",
                    "signature": "build123d.CounterBoreHole.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.CounterBoreHole.unwrap",
                    "signature": "build123d.CounterBoreHole.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.CounterBoreHole.vertex",
                    "signature": "build123d.CounterBoreHole.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.CounterBoreHole.vertices",
                    "signature": "build123d.CounterBoreHole.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.CounterBoreHole.wire",
                    "signature": "build123d.CounterBoreHole.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.CounterBoreHole.wires",
                    "signature": "build123d.CounterBoreHole.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.CounterSinkHole",
            "signature": "build123d.CounterSinkHole(radius: 'float', counter_sink_radius: 'float', depth: 'float' = None, counter_sink_angle: 'float' = 82, mode: 'Mode' = <Mode.SUBTRACT>)",
            "methods": [
                {
                    "name": "build123d.CounterSinkHole.bounding_box",
                    "signature": "build123d.CounterSinkHole.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.CounterSinkHole.cast",
                    "signature": "build123d.CounterSinkHole.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.center",
                    "signature": "build123d.CounterSinkHole.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.CounterSinkHole.chamfer",
                    "signature": "build123d.CounterSinkHole.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.clean",
                    "signature": "build123d.CounterSinkHole.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.closest_points",
                    "signature": "build123d.CounterSinkHole.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.CounterSinkHole.combined_center",
                    "signature": "build123d.CounterSinkHole.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.CounterSinkHole.compound",
                    "signature": "build123d.CounterSinkHole.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.compounds",
                    "signature": "build123d.CounterSinkHole.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.CounterSinkHole.compute_mass",
                    "signature": "build123d.CounterSinkHole.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.CounterSinkHole.copy",
                    "signature": "build123d.CounterSinkHole.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.copy_attributes_to",
                    "signature": "build123d.CounterSinkHole.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.CounterSinkHole.cut",
                    "signature": "build123d.CounterSinkHole.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.distance",
                    "signature": "build123d.CounterSinkHole.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.CounterSinkHole.distance_to",
                    "signature": "build123d.CounterSinkHole.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.CounterSinkHole.distance_to_with_closest_points",
                    "signature": "build123d.CounterSinkHole.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.CounterSinkHole.distances",
                    "signature": "build123d.CounterSinkHole.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.CounterSinkHole.do_children_intersect",
                    "signature": "build123d.CounterSinkHole.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.CounterSinkHole.dprism",
                    "signature": "build123d.CounterSinkHole.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterSinkHole.edge",
                    "signature": "build123d.CounterSinkHole.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.CounterSinkHole.edges",
                    "signature": "build123d.CounterSinkHole.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.CounterSinkHole.export_brep",
                    "signature": "build123d.CounterSinkHole.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.export_step",
                    "signature": "build123d.CounterSinkHole.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.CounterSinkHole.export_stl",
                    "signature": "build123d.CounterSinkHole.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.extrude",
                    "signature": "build123d.CounterSinkHole.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.face",
                    "signature": "build123d.CounterSinkHole.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.CounterSinkHole.faces",
                    "signature": "build123d.CounterSinkHole.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.CounterSinkHole.faces_intersected_by_axis",
                    "signature": "build123d.CounterSinkHole.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.CounterSinkHole.fillet",
                    "signature": "build123d.CounterSinkHole.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.find_intersection",
                    "signature": "build123d.CounterSinkHole.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.CounterSinkHole.find_intersection_points",
                    "signature": "build123d.CounterSinkHole.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.CounterSinkHole.first_level_shapes",
                    "signature": "build123d.CounterSinkHole.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.CounterSinkHole.fix",
                    "signature": "build123d.CounterSinkHole.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.fuse",
                    "signature": "build123d.CounterSinkHole.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.get_type",
                    "signature": "build123d.CounterSinkHole.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.CounterSinkHole.hash_code",
                    "signature": "build123d.CounterSinkHole.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.CounterSinkHole.hollow",
                    "signature": "build123d.CounterSinkHole.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterSinkHole.intersect",
                    "signature": "build123d.CounterSinkHole.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.is_equal",
                    "signature": "build123d.CounterSinkHole.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.is_inside",
                    "signature": "build123d.CounterSinkHole.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.is_null",
                    "signature": "build123d.CounterSinkHole.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.is_same",
                    "signature": "build123d.CounterSinkHole.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.is_valid",
                    "signature": "build123d.CounterSinkHole.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.CounterSinkHole.iter_path_reverse",
                    "signature": "build123d.CounterSinkHole.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.CounterSinkHole.locate",
                    "signature": "build123d.CounterSinkHole.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.located",
                    "signature": "build123d.CounterSinkHole.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.make_compound",
                    "signature": "build123d.CounterSinkHole.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.make_text",
                    "signature": "build123d.CounterSinkHole.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.CounterSinkHole.make_triad",
                    "signature": "build123d.CounterSinkHole.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.max_fillet",
                    "signature": "build123d.CounterSinkHole.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.CounterSinkHole.mesh",
                    "signature": "build123d.CounterSinkHole.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.CounterSinkHole.mirror",
                    "signature": "build123d.CounterSinkHole.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.move",
                    "signature": "build123d.CounterSinkHole.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.moved",
                    "signature": "build123d.CounterSinkHole.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.offset_3d",
                    "signature": "build123d.CounterSinkHole.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterSinkHole.project_faces",
                    "signature": "build123d.CounterSinkHole.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.CounterSinkHole.project_to_viewport",
                    "signature": "build123d.CounterSinkHole.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.CounterSinkHole.relocate",
                    "signature": "build123d.CounterSinkHole.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.CounterSinkHole.rotate",
                    "signature": "build123d.CounterSinkHole.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.scale",
                    "signature": "build123d.CounterSinkHole.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.shape_type",
                    "signature": "build123d.CounterSinkHole.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.CounterSinkHole.shell",
                    "signature": "build123d.CounterSinkHole.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.CounterSinkHole.shells",
                    "signature": "build123d.CounterSinkHole.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.CounterSinkHole.show_topology",
                    "signature": "build123d.CounterSinkHole.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.CounterSinkHole.solid",
                    "signature": "build123d.CounterSinkHole.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.CounterSinkHole.solids",
                    "signature": "build123d.CounterSinkHole.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.CounterSinkHole.split",
                    "signature": "build123d.CounterSinkHole.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.split_by_perimeter",
                    "signature": "build123d.CounterSinkHole.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.CounterSinkHole.tessellate",
                    "signature": "build123d.CounterSinkHole.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.CounterSinkHole.to_arcs",
                    "signature": "build123d.CounterSinkHole.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.CounterSinkHole.to_splines",
                    "signature": "build123d.CounterSinkHole.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.CounterSinkHole.to_vtk_poly_data",
                    "signature": "build123d.CounterSinkHole.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.CounterSinkHole.transform_geometry",
                    "signature": "build123d.CounterSinkHole.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.transform_shape",
                    "signature": "build123d.CounterSinkHole.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.transformed",
                    "signature": "build123d.CounterSinkHole.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.translate",
                    "signature": "build123d.CounterSinkHole.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.CounterSinkHole.unwrap",
                    "signature": "build123d.CounterSinkHole.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.CounterSinkHole.vertex",
                    "signature": "build123d.CounterSinkHole.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.CounterSinkHole.vertices",
                    "signature": "build123d.CounterSinkHole.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.CounterSinkHole.wire",
                    "signature": "build123d.CounterSinkHole.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.CounterSinkHole.wires",
                    "signature": "build123d.CounterSinkHole.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Curve",
            "signature": "build123d.Curve()",
            "methods": [
                {
                    "name": "build123d.Curve.bounding_box",
                    "signature": "build123d.Curve.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Curve.cast",
                    "signature": "build123d.Curve.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.center",
                    "signature": "build123d.Curve.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Curve.chamfer",
                    "signature": "build123d.Curve.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.clean",
                    "signature": "build123d.Curve.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.closest_points",
                    "signature": "build123d.Curve.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Curve.combined_center",
                    "signature": "build123d.Curve.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Curve.compound",
                    "signature": "build123d.Curve.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.compounds",
                    "signature": "build123d.Curve.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Curve.compute_mass",
                    "signature": "build123d.Curve.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Curve.copy",
                    "signature": "build123d.Curve.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.copy_attributes_to",
                    "signature": "build123d.Curve.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Curve.cut",
                    "signature": "build123d.Curve.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.distance",
                    "signature": "build123d.Curve.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Curve.distance_to",
                    "signature": "build123d.Curve.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Curve.distance_to_with_closest_points",
                    "signature": "build123d.Curve.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Curve.distances",
                    "signature": "build123d.Curve.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Curve.do_children_intersect",
                    "signature": "build123d.Curve.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Curve.dprism",
                    "signature": "build123d.Curve.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Curve.edge",
                    "signature": "build123d.Curve.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Curve.edges",
                    "signature": "build123d.Curve.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Curve.export_brep",
                    "signature": "build123d.Curve.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Curve.export_step",
                    "signature": "build123d.Curve.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Curve.export_stl",
                    "signature": "build123d.Curve.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Curve.extrude",
                    "signature": "build123d.Curve.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.face",
                    "signature": "build123d.Curve.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Curve.faces",
                    "signature": "build123d.Curve.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Curve.faces_intersected_by_axis",
                    "signature": "build123d.Curve.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Curve.fillet",
                    "signature": "build123d.Curve.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.find_intersection",
                    "signature": "build123d.Curve.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Curve.find_intersection_points",
                    "signature": "build123d.Curve.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Curve.first_level_shapes",
                    "signature": "build123d.Curve.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Curve.fix",
                    "signature": "build123d.Curve.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.fuse",
                    "signature": "build123d.Curve.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.get_type",
                    "signature": "build123d.Curve.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Curve.hash_code",
                    "signature": "build123d.Curve.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Curve.hollow",
                    "signature": "build123d.Curve.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Curve.intersect",
                    "signature": "build123d.Curve.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.is_equal",
                    "signature": "build123d.Curve.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Curve.is_inside",
                    "signature": "build123d.Curve.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Curve.is_null",
                    "signature": "build123d.Curve.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Curve.is_same",
                    "signature": "build123d.Curve.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Curve.is_valid",
                    "signature": "build123d.Curve.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Curve.iter_path_reverse",
                    "signature": "build123d.Curve.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Curve.locate",
                    "signature": "build123d.Curve.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.located",
                    "signature": "build123d.Curve.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.make_compound",
                    "signature": "build123d.Curve.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.make_text",
                    "signature": "build123d.Curve.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Curve.make_triad",
                    "signature": "build123d.Curve.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.max_fillet",
                    "signature": "build123d.Curve.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Curve.mesh",
                    "signature": "build123d.Curve.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Curve.mirror",
                    "signature": "build123d.Curve.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.move",
                    "signature": "build123d.Curve.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.moved",
                    "signature": "build123d.Curve.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.offset_3d",
                    "signature": "build123d.Curve.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Curve.project_faces",
                    "signature": "build123d.Curve.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Curve.project_to_viewport",
                    "signature": "build123d.Curve.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Curve.relocate",
                    "signature": "build123d.Curve.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Curve.rotate",
                    "signature": "build123d.Curve.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.scale",
                    "signature": "build123d.Curve.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.shape_type",
                    "signature": "build123d.Curve.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Curve.shell",
                    "signature": "build123d.Curve.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Curve.shells",
                    "signature": "build123d.Curve.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Curve.show_topology",
                    "signature": "build123d.Curve.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Curve.solid",
                    "signature": "build123d.Curve.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Curve.solids",
                    "signature": "build123d.Curve.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Curve.split",
                    "signature": "build123d.Curve.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.split_by_perimeter",
                    "signature": "build123d.Curve.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Curve.tessellate",
                    "signature": "build123d.Curve.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Curve.to_arcs",
                    "signature": "build123d.Curve.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Curve.to_splines",
                    "signature": "build123d.Curve.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Curve.to_vtk_poly_data",
                    "signature": "build123d.Curve.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Curve.transform_geometry",
                    "signature": "build123d.Curve.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.transform_shape",
                    "signature": "build123d.Curve.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.transformed",
                    "signature": "build123d.Curve.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Curve.translate",
                    "signature": "build123d.Curve.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Curve.unwrap",
                    "signature": "build123d.Curve.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Curve.vertex",
                    "signature": "build123d.Curve.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Curve.vertices",
                    "signature": "build123d.Curve.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Curve.wire",
                    "signature": "build123d.Curve.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Curve.wires",
                    "signature": "build123d.Curve.wires(self) -> 'list[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Cylinder",
            "signature": "build123d.Cylinder(radius: 'float', height: 'float', arc_size: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Cylinder.bounding_box",
                    "signature": "build123d.Cylinder.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Cylinder.cast",
                    "signature": "build123d.Cylinder.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.center",
                    "signature": "build123d.Cylinder.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Cylinder.chamfer",
                    "signature": "build123d.Cylinder.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.clean",
                    "signature": "build123d.Cylinder.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.closest_points",
                    "signature": "build123d.Cylinder.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Cylinder.combined_center",
                    "signature": "build123d.Cylinder.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Cylinder.compound",
                    "signature": "build123d.Cylinder.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.compounds",
                    "signature": "build123d.Cylinder.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Cylinder.compute_mass",
                    "signature": "build123d.Cylinder.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Cylinder.copy",
                    "signature": "build123d.Cylinder.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.copy_attributes_to",
                    "signature": "build123d.Cylinder.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Cylinder.cut",
                    "signature": "build123d.Cylinder.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.distance",
                    "signature": "build123d.Cylinder.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Cylinder.distance_to",
                    "signature": "build123d.Cylinder.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Cylinder.distance_to_with_closest_points",
                    "signature": "build123d.Cylinder.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Cylinder.distances",
                    "signature": "build123d.Cylinder.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Cylinder.do_children_intersect",
                    "signature": "build123d.Cylinder.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Cylinder.dprism",
                    "signature": "build123d.Cylinder.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Cylinder.edge",
                    "signature": "build123d.Cylinder.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Cylinder.edges",
                    "signature": "build123d.Cylinder.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Cylinder.export_brep",
                    "signature": "build123d.Cylinder.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.export_step",
                    "signature": "build123d.Cylinder.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Cylinder.export_stl",
                    "signature": "build123d.Cylinder.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.extrude",
                    "signature": "build123d.Cylinder.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.face",
                    "signature": "build123d.Cylinder.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Cylinder.faces",
                    "signature": "build123d.Cylinder.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Cylinder.faces_intersected_by_axis",
                    "signature": "build123d.Cylinder.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Cylinder.fillet",
                    "signature": "build123d.Cylinder.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.find_intersection",
                    "signature": "build123d.Cylinder.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Cylinder.find_intersection_points",
                    "signature": "build123d.Cylinder.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Cylinder.first_level_shapes",
                    "signature": "build123d.Cylinder.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Cylinder.fix",
                    "signature": "build123d.Cylinder.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.fuse",
                    "signature": "build123d.Cylinder.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.get_type",
                    "signature": "build123d.Cylinder.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Cylinder.hash_code",
                    "signature": "build123d.Cylinder.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Cylinder.hollow",
                    "signature": "build123d.Cylinder.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Cylinder.intersect",
                    "signature": "build123d.Cylinder.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.is_equal",
                    "signature": "build123d.Cylinder.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.is_inside",
                    "signature": "build123d.Cylinder.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.is_null",
                    "signature": "build123d.Cylinder.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.is_same",
                    "signature": "build123d.Cylinder.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.is_valid",
                    "signature": "build123d.Cylinder.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Cylinder.iter_path_reverse",
                    "signature": "build123d.Cylinder.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Cylinder.locate",
                    "signature": "build123d.Cylinder.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.located",
                    "signature": "build123d.Cylinder.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.make_compound",
                    "signature": "build123d.Cylinder.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.make_text",
                    "signature": "build123d.Cylinder.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Cylinder.make_triad",
                    "signature": "build123d.Cylinder.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.max_fillet",
                    "signature": "build123d.Cylinder.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Cylinder.mesh",
                    "signature": "build123d.Cylinder.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Cylinder.mirror",
                    "signature": "build123d.Cylinder.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.move",
                    "signature": "build123d.Cylinder.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.moved",
                    "signature": "build123d.Cylinder.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.offset_3d",
                    "signature": "build123d.Cylinder.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Cylinder.project_faces",
                    "signature": "build123d.Cylinder.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Cylinder.project_to_viewport",
                    "signature": "build123d.Cylinder.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Cylinder.relocate",
                    "signature": "build123d.Cylinder.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Cylinder.rotate",
                    "signature": "build123d.Cylinder.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.scale",
                    "signature": "build123d.Cylinder.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.shape_type",
                    "signature": "build123d.Cylinder.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Cylinder.shell",
                    "signature": "build123d.Cylinder.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Cylinder.shells",
                    "signature": "build123d.Cylinder.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Cylinder.show_topology",
                    "signature": "build123d.Cylinder.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Cylinder.solid",
                    "signature": "build123d.Cylinder.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Cylinder.solids",
                    "signature": "build123d.Cylinder.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Cylinder.split",
                    "signature": "build123d.Cylinder.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.split_by_perimeter",
                    "signature": "build123d.Cylinder.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Cylinder.tessellate",
                    "signature": "build123d.Cylinder.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Cylinder.to_arcs",
                    "signature": "build123d.Cylinder.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Cylinder.to_splines",
                    "signature": "build123d.Cylinder.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Cylinder.to_vtk_poly_data",
                    "signature": "build123d.Cylinder.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Cylinder.transform_geometry",
                    "signature": "build123d.Cylinder.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.transform_shape",
                    "signature": "build123d.Cylinder.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.transformed",
                    "signature": "build123d.Cylinder.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.translate",
                    "signature": "build123d.Cylinder.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Cylinder.unwrap",
                    "signature": "build123d.Cylinder.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Cylinder.vertex",
                    "signature": "build123d.Cylinder.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Cylinder.vertices",
                    "signature": "build123d.Cylinder.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Cylinder.wire",
                    "signature": "build123d.Cylinder.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Cylinder.wires",
                    "signature": "build123d.Cylinder.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.CylindricalJoint",
            "signature": "build123d.CylindricalJoint(label: 'str', to_part: 'Union[Solid, Compound]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), angle_reference: 'VectorLike' = None, linear_range: 'tuple[float, float]' = (0, inf), angular_range: 'tuple[float, float]' = (0, 360))",
            "methods": [
                {
                    "name": "build123d.CylindricalJoint.connect_to",
                    "signature": "build123d.CylindricalJoint.connect_to(self, other: 'RigidJoint', *, position: 'float' = None, angle: 'float' = None)"
                },
                {
                    "name": "build123d.CylindricalJoint.relative_to",
                    "signature": "build123d.CylindricalJoint.relative_to(self, other: 'RigidJoint', *, position: 'float' = None, angle: 'float' = None)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ]
        },
        {
            "name": "build123d.DimensionLine",
            "signature": "build123d.DimensionLine(path: Union[build123d.topology.Wire, build123d.topology.Edge, list[Union[build123d.geometry.Vector, build123d.topology.Vertex, tuple[float, float, float]]]], draft: build123d.drafting.Draft = None, sketch: build123d.topology.Sketch = None, label: str = None, arrows: tuple[bool, bool] = (True, True), tolerance: Union[float, tuple[float, float]] = None, label_angle: bool = False, mode: build123d.build_enums.Mode = <Mode.ADD>) -> build123d.topology.Sketch",
            "methods": [
                {
                    "name": "build123d.DimensionLine.bounding_box",
                    "signature": "build123d.DimensionLine.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.DimensionLine.cast",
                    "signature": "build123d.DimensionLine.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.center",
                    "signature": "build123d.DimensionLine.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.DimensionLine.chamfer",
                    "signature": "build123d.DimensionLine.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.clean",
                    "signature": "build123d.DimensionLine.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.closest_points",
                    "signature": "build123d.DimensionLine.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.DimensionLine.combined_center",
                    "signature": "build123d.DimensionLine.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.DimensionLine.compound",
                    "signature": "build123d.DimensionLine.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.compounds",
                    "signature": "build123d.DimensionLine.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.DimensionLine.compute_mass",
                    "signature": "build123d.DimensionLine.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.DimensionLine.copy",
                    "signature": "build123d.DimensionLine.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.copy_attributes_to",
                    "signature": "build123d.DimensionLine.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.DimensionLine.cut",
                    "signature": "build123d.DimensionLine.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.distance",
                    "signature": "build123d.DimensionLine.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.DimensionLine.distance_to",
                    "signature": "build123d.DimensionLine.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.DimensionLine.distance_to_with_closest_points",
                    "signature": "build123d.DimensionLine.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.DimensionLine.distances",
                    "signature": "build123d.DimensionLine.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.DimensionLine.do_children_intersect",
                    "signature": "build123d.DimensionLine.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.DimensionLine.dprism",
                    "signature": "build123d.DimensionLine.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.DimensionLine.edge",
                    "signature": "build123d.DimensionLine.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.DimensionLine.edges",
                    "signature": "build123d.DimensionLine.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.DimensionLine.export_brep",
                    "signature": "build123d.DimensionLine.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.export_step",
                    "signature": "build123d.DimensionLine.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.DimensionLine.export_stl",
                    "signature": "build123d.DimensionLine.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.extrude",
                    "signature": "build123d.DimensionLine.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.face",
                    "signature": "build123d.DimensionLine.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.DimensionLine.faces",
                    "signature": "build123d.DimensionLine.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.DimensionLine.faces_intersected_by_axis",
                    "signature": "build123d.DimensionLine.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.DimensionLine.fillet",
                    "signature": "build123d.DimensionLine.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.find_intersection",
                    "signature": "build123d.DimensionLine.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.DimensionLine.find_intersection_points",
                    "signature": "build123d.DimensionLine.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.DimensionLine.first_level_shapes",
                    "signature": "build123d.DimensionLine.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.DimensionLine.fix",
                    "signature": "build123d.DimensionLine.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.fuse",
                    "signature": "build123d.DimensionLine.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.get_type",
                    "signature": "build123d.DimensionLine.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.DimensionLine.hash_code",
                    "signature": "build123d.DimensionLine.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.DimensionLine.hollow",
                    "signature": "build123d.DimensionLine.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.DimensionLine.intersect",
                    "signature": "build123d.DimensionLine.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.is_equal",
                    "signature": "build123d.DimensionLine.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.is_inside",
                    "signature": "build123d.DimensionLine.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.is_null",
                    "signature": "build123d.DimensionLine.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.is_same",
                    "signature": "build123d.DimensionLine.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.is_valid",
                    "signature": "build123d.DimensionLine.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.DimensionLine.iter_path_reverse",
                    "signature": "build123d.DimensionLine.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.DimensionLine.locate",
                    "signature": "build123d.DimensionLine.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.located",
                    "signature": "build123d.DimensionLine.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.make_compound",
                    "signature": "build123d.DimensionLine.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.make_text",
                    "signature": "build123d.DimensionLine.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.DimensionLine.make_triad",
                    "signature": "build123d.DimensionLine.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.max_fillet",
                    "signature": "build123d.DimensionLine.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.DimensionLine.mesh",
                    "signature": "build123d.DimensionLine.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.DimensionLine.mirror",
                    "signature": "build123d.DimensionLine.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.move",
                    "signature": "build123d.DimensionLine.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.moved",
                    "signature": "build123d.DimensionLine.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.offset_3d",
                    "signature": "build123d.DimensionLine.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.DimensionLine.project_faces",
                    "signature": "build123d.DimensionLine.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.DimensionLine.project_to_viewport",
                    "signature": "build123d.DimensionLine.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.DimensionLine.relocate",
                    "signature": "build123d.DimensionLine.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.DimensionLine.rotate",
                    "signature": "build123d.DimensionLine.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.scale",
                    "signature": "build123d.DimensionLine.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.shape_type",
                    "signature": "build123d.DimensionLine.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.DimensionLine.shell",
                    "signature": "build123d.DimensionLine.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.DimensionLine.shells",
                    "signature": "build123d.DimensionLine.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.DimensionLine.show_topology",
                    "signature": "build123d.DimensionLine.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.DimensionLine.solid",
                    "signature": "build123d.DimensionLine.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.DimensionLine.solids",
                    "signature": "build123d.DimensionLine.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.DimensionLine.split",
                    "signature": "build123d.DimensionLine.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.split_by_perimeter",
                    "signature": "build123d.DimensionLine.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.DimensionLine.tessellate",
                    "signature": "build123d.DimensionLine.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.DimensionLine.to_arcs",
                    "signature": "build123d.DimensionLine.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.DimensionLine.to_splines",
                    "signature": "build123d.DimensionLine.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.DimensionLine.to_vtk_poly_data",
                    "signature": "build123d.DimensionLine.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.DimensionLine.transform_geometry",
                    "signature": "build123d.DimensionLine.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.transform_shape",
                    "signature": "build123d.DimensionLine.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.transformed",
                    "signature": "build123d.DimensionLine.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.translate",
                    "signature": "build123d.DimensionLine.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.DimensionLine.unwrap",
                    "signature": "build123d.DimensionLine.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.DimensionLine.vertex",
                    "signature": "build123d.DimensionLine.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.DimensionLine.vertices",
                    "signature": "build123d.DimensionLine.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.DimensionLine.wire",
                    "signature": "build123d.DimensionLine.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.DimensionLine.wires",
                    "signature": "build123d.DimensionLine.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.DotLength",
            "signature": "build123d.DotLength()",
            "methods": [],
            "variables": [
                "INKSCAPE_COMPAT",
                "QCAD_IMPERIAL",
                "TRUE_DOT",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.DoubleTangentArc",
            "signature": "build123d.DoubleTangentArc(pnt: 'VectorLike', tangent: 'VectorLike', other: 'Union[Curve, Edge, Wire]', keep: 'Keep' = <Keep.TOP>, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.DoubleTangentArc.bounding_box",
                    "signature": "build123d.DoubleTangentArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.DoubleTangentArc.cast",
                    "signature": "build123d.DoubleTangentArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.center",
                    "signature": "build123d.DoubleTangentArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.clean",
                    "signature": "build123d.DoubleTangentArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.close",
                    "signature": "build123d.DoubleTangentArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.closest_points",
                    "signature": "build123d.DoubleTangentArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.combined_center",
                    "signature": "build123d.DoubleTangentArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.common_plane",
                    "signature": "build123d.DoubleTangentArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.compound",
                    "signature": "build123d.DoubleTangentArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.DoubleTangentArc.compounds",
                    "signature": "build123d.DoubleTangentArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.compute_mass",
                    "signature": "build123d.DoubleTangentArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.DoubleTangentArc.copy",
                    "signature": "build123d.DoubleTangentArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.copy_attributes_to",
                    "signature": "build123d.DoubleTangentArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.DoubleTangentArc.cut",
                    "signature": "build123d.DoubleTangentArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.distance",
                    "signature": "build123d.DoubleTangentArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.DoubleTangentArc.distance_to",
                    "signature": "build123d.DoubleTangentArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.DoubleTangentArc.distance_to_with_closest_points",
                    "signature": "build123d.DoubleTangentArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.distances",
                    "signature": "build123d.DoubleTangentArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.distribute_locations",
                    "signature": "build123d.DoubleTangentArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.edge",
                    "signature": "build123d.DoubleTangentArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.edges",
                    "signature": "build123d.DoubleTangentArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.end_point",
                    "signature": "build123d.DoubleTangentArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.export_brep",
                    "signature": "build123d.DoubleTangentArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.DoubleTangentArc.export_step",
                    "signature": "build123d.DoubleTangentArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.DoubleTangentArc.export_stl",
                    "signature": "build123d.DoubleTangentArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.DoubleTangentArc.extrude",
                    "signature": "build123d.DoubleTangentArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.face",
                    "signature": "build123d.DoubleTangentArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.DoubleTangentArc.faces",
                    "signature": "build123d.DoubleTangentArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.faces_intersected_by_axis",
                    "signature": "build123d.DoubleTangentArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.find_intersection",
                    "signature": "build123d.DoubleTangentArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.find_intersection_points",
                    "signature": "build123d.DoubleTangentArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.find_tangent",
                    "signature": "build123d.DoubleTangentArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.fix",
                    "signature": "build123d.DoubleTangentArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.fuse",
                    "signature": "build123d.DoubleTangentArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.hash_code",
                    "signature": "build123d.DoubleTangentArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.DoubleTangentArc.intersect",
                    "signature": "build123d.DoubleTangentArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.is_equal",
                    "signature": "build123d.DoubleTangentArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.DoubleTangentArc.is_null",
                    "signature": "build123d.DoubleTangentArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.DoubleTangentArc.is_same",
                    "signature": "build123d.DoubleTangentArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.DoubleTangentArc.is_valid",
                    "signature": "build123d.DoubleTangentArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.DoubleTangentArc.iter_path_reverse",
                    "signature": "build123d.DoubleTangentArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.DoubleTangentArc.locate",
                    "signature": "build123d.DoubleTangentArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.located",
                    "signature": "build123d.DoubleTangentArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.location_at",
                    "signature": "build123d.DoubleTangentArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.DoubleTangentArc.locations",
                    "signature": "build123d.DoubleTangentArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_bezier",
                    "signature": "build123d.DoubleTangentArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_circle",
                    "signature": "build123d.DoubleTangentArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_ellipse",
                    "signature": "build123d.DoubleTangentArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_helix",
                    "signature": "build123d.DoubleTangentArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_line",
                    "signature": "build123d.DoubleTangentArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_mid_way",
                    "signature": "build123d.DoubleTangentArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_spline",
                    "signature": "build123d.DoubleTangentArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_spline_approx",
                    "signature": "build123d.DoubleTangentArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_tangent_arc",
                    "signature": "build123d.DoubleTangentArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.make_three_point_arc",
                    "signature": "build123d.DoubleTangentArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.mesh",
                    "signature": "build123d.DoubleTangentArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.DoubleTangentArc.mirror",
                    "signature": "build123d.DoubleTangentArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.move",
                    "signature": "build123d.DoubleTangentArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.moved",
                    "signature": "build123d.DoubleTangentArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.normal",
                    "signature": "build123d.DoubleTangentArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.offset_2d",
                    "signature": "build123d.DoubleTangentArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.param_at",
                    "signature": "build123d.DoubleTangentArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.DoubleTangentArc.param_at_point",
                    "signature": "build123d.DoubleTangentArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.DoubleTangentArc.perpendicular_line",
                    "signature": "build123d.DoubleTangentArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.position_at",
                    "signature": "build123d.DoubleTangentArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.positions",
                    "signature": "build123d.DoubleTangentArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.project",
                    "signature": "build123d.DoubleTangentArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.project_faces",
                    "signature": "build123d.DoubleTangentArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.DoubleTangentArc.project_to_shape",
                    "signature": "build123d.DoubleTangentArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.project_to_viewport",
                    "signature": "build123d.DoubleTangentArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.relocate",
                    "signature": "build123d.DoubleTangentArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.DoubleTangentArc.reversed",
                    "signature": "build123d.DoubleTangentArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.rotate",
                    "signature": "build123d.DoubleTangentArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.scale",
                    "signature": "build123d.DoubleTangentArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.shape_type",
                    "signature": "build123d.DoubleTangentArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.DoubleTangentArc.shell",
                    "signature": "build123d.DoubleTangentArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.DoubleTangentArc.shells",
                    "signature": "build123d.DoubleTangentArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.show_topology",
                    "signature": "build123d.DoubleTangentArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.DoubleTangentArc.solid",
                    "signature": "build123d.DoubleTangentArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.DoubleTangentArc.solids",
                    "signature": "build123d.DoubleTangentArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.split",
                    "signature": "build123d.DoubleTangentArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.split_by_perimeter",
                    "signature": "build123d.DoubleTangentArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.DoubleTangentArc.start_point",
                    "signature": "build123d.DoubleTangentArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.tangent_angle_at",
                    "signature": "build123d.DoubleTangentArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.DoubleTangentArc.tangent_at",
                    "signature": "build123d.DoubleTangentArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.DoubleTangentArc.tessellate",
                    "signature": "build123d.DoubleTangentArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.to_arcs",
                    "signature": "build123d.DoubleTangentArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.DoubleTangentArc.to_axis",
                    "signature": "build123d.DoubleTangentArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.DoubleTangentArc.to_splines",
                    "signature": "build123d.DoubleTangentArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.DoubleTangentArc.to_vtk_poly_data",
                    "signature": "build123d.DoubleTangentArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.DoubleTangentArc.to_wire",
                    "signature": "build123d.DoubleTangentArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.DoubleTangentArc.transform_geometry",
                    "signature": "build123d.DoubleTangentArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.transform_shape",
                    "signature": "build123d.DoubleTangentArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.transformed",
                    "signature": "build123d.DoubleTangentArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.translate",
                    "signature": "build123d.DoubleTangentArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.DoubleTangentArc.trim",
                    "signature": "build123d.DoubleTangentArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.trim_to_length",
                    "signature": "build123d.DoubleTangentArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.DoubleTangentArc.vertex",
                    "signature": "build123d.DoubleTangentArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.DoubleTangentArc.vertices",
                    "signature": "build123d.DoubleTangentArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.DoubleTangentArc.wire",
                    "signature": "build123d.DoubleTangentArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.DoubleTangentArc.wires",
                    "signature": "build123d.DoubleTangentArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Draft",
            "signature": "build123d.Draft(font_size: float = 5.0, font: str = 'Arial', font_style: build123d.build_enums.FontStyle = <FontStyle.REGULAR>, head_type: build123d.build_enums.HeadType = <HeadType.CURVED>, arrow_length: float = 3.0, line_width: float = 0.5, pad_around_text: float = 2.0, unit: build123d.build_enums.Unit = <Unit.MM>, number_display: build123d.build_enums.NumberDisplay = <NumberDisplay.DECIMAL>, display_units: bool = True, decimal_precision: int = 2, fractional_precision: int = 64, extension_gap: float = 2.0) -> None",
            "methods": [],
            "variables": [
                "arrow_length",
                "decimal_precision",
                "display_units",
                "extension_gap",
                "font",
                "font_size",
                "font_style",
                "fractional_precision",
                "head_type",
                "is_metric",
                "line_width",
                "number_display",
                "pad_around_text",
                "unit",
                "unit_LUT"
            ]
        },
        {
            "name": "build123d.Drawing",
            "signature": "build123d.Drawing(shape: build123d.topology.Shape, *, look_at: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = None, look_from: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = (1, -1, 1), look_up: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = (0, 0, 1), with_hidden: bool = True, focus: Optional[float] = None)",
            "methods": [],
            "variables": []
        },
        {
            "name": "build123d.Edge",
            "signature": "build123d.Edge(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Edge.bounding_box",
                    "signature": "build123d.Edge.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Edge.cast",
                    "signature": "build123d.Edge.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.center",
                    "signature": "build123d.Edge.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.clean",
                    "signature": "build123d.Edge.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.close",
                    "signature": "build123d.Edge.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Edge.closest_points",
                    "signature": "build123d.Edge.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Edge.combined_center",
                    "signature": "build123d.Edge.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.common_plane",
                    "signature": "build123d.Edge.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Edge.compound",
                    "signature": "build123d.Edge.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Edge.compounds",
                    "signature": "build123d.Edge.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Edge.compute_mass",
                    "signature": "build123d.Edge.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Edge.copy",
                    "signature": "build123d.Edge.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.copy_attributes_to",
                    "signature": "build123d.Edge.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Edge.cut",
                    "signature": "build123d.Edge.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.distance",
                    "signature": "build123d.Edge.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Edge.distance_to",
                    "signature": "build123d.Edge.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Edge.distance_to_with_closest_points",
                    "signature": "build123d.Edge.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Edge.distances",
                    "signature": "build123d.Edge.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Edge.distribute_locations",
                    "signature": "build123d.Edge.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Edge.edge",
                    "signature": "build123d.Edge.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.edges",
                    "signature": "build123d.Edge.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Edge.end_point",
                    "signature": "build123d.Edge.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.export_brep",
                    "signature": "build123d.Edge.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Edge.export_step",
                    "signature": "build123d.Edge.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Edge.export_stl",
                    "signature": "build123d.Edge.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Edge.extrude",
                    "signature": "build123d.Edge.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.face",
                    "signature": "build123d.Edge.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Edge.faces",
                    "signature": "build123d.Edge.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Edge.faces_intersected_by_axis",
                    "signature": "build123d.Edge.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Edge.find_intersection",
                    "signature": "build123d.Edge.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Edge.find_intersection_points",
                    "signature": "build123d.Edge.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.Edge.find_tangent",
                    "signature": "build123d.Edge.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.Edge.fix",
                    "signature": "build123d.Edge.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.fuse",
                    "signature": "build123d.Edge.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.hash_code",
                    "signature": "build123d.Edge.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Edge.intersect",
                    "signature": "build123d.Edge.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.Edge.is_equal",
                    "signature": "build123d.Edge.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Edge.is_null",
                    "signature": "build123d.Edge.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Edge.is_same",
                    "signature": "build123d.Edge.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Edge.is_valid",
                    "signature": "build123d.Edge.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Edge.iter_path_reverse",
                    "signature": "build123d.Edge.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Edge.locate",
                    "signature": "build123d.Edge.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.located",
                    "signature": "build123d.Edge.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.location_at",
                    "signature": "build123d.Edge.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Edge.locations",
                    "signature": "build123d.Edge.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Edge.make_bezier",
                    "signature": "build123d.Edge.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_circle",
                    "signature": "build123d.Edge.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_ellipse",
                    "signature": "build123d.Edge.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_helix",
                    "signature": "build123d.Edge.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Edge.make_line",
                    "signature": "build123d.Edge.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_mid_way",
                    "signature": "build123d.Edge.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_spline",
                    "signature": "build123d.Edge.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_spline_approx",
                    "signature": "build123d.Edge.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_tangent_arc",
                    "signature": "build123d.Edge.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.make_three_point_arc",
                    "signature": "build123d.Edge.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.mesh",
                    "signature": "build123d.Edge.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Edge.mirror",
                    "signature": "build123d.Edge.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.move",
                    "signature": "build123d.Edge.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.moved",
                    "signature": "build123d.Edge.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.normal",
                    "signature": "build123d.Edge.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.offset_2d",
                    "signature": "build123d.Edge.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Edge.param_at",
                    "signature": "build123d.Edge.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Edge.param_at_point",
                    "signature": "build123d.Edge.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Edge.perpendicular_line",
                    "signature": "build123d.Edge.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.position_at",
                    "signature": "build123d.Edge.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.positions",
                    "signature": "build123d.Edge.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Edge.project",
                    "signature": "build123d.Edge.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Edge.project_faces",
                    "signature": "build123d.Edge.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Edge.project_to_shape",
                    "signature": "build123d.Edge.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.Edge.project_to_viewport",
                    "signature": "build123d.Edge.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Edge.relocate",
                    "signature": "build123d.Edge.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Edge.reversed",
                    "signature": "build123d.Edge.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.rotate",
                    "signature": "build123d.Edge.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.scale",
                    "signature": "build123d.Edge.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.shape_type",
                    "signature": "build123d.Edge.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Edge.shell",
                    "signature": "build123d.Edge.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Edge.shells",
                    "signature": "build123d.Edge.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Edge.show_topology",
                    "signature": "build123d.Edge.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Edge.solid",
                    "signature": "build123d.Edge.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Edge.solids",
                    "signature": "build123d.Edge.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Edge.split",
                    "signature": "build123d.Edge.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.split_by_perimeter",
                    "signature": "build123d.Edge.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Edge.start_point",
                    "signature": "build123d.Edge.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.tangent_angle_at",
                    "signature": "build123d.Edge.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Edge.tangent_at",
                    "signature": "build123d.Edge.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Edge.tessellate",
                    "signature": "build123d.Edge.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Edge.to_arcs",
                    "signature": "build123d.Edge.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Edge.to_axis",
                    "signature": "build123d.Edge.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Edge.to_splines",
                    "signature": "build123d.Edge.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Edge.to_vtk_poly_data",
                    "signature": "build123d.Edge.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Edge.to_wire",
                    "signature": "build123d.Edge.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Edge.transform_geometry",
                    "signature": "build123d.Edge.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.transform_shape",
                    "signature": "build123d.Edge.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.transformed",
                    "signature": "build123d.Edge.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Edge.translate",
                    "signature": "build123d.Edge.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Edge.trim",
                    "signature": "build123d.Edge.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.trim_to_length",
                    "signature": "build123d.Edge.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Edge.vertex",
                    "signature": "build123d.Edge.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Edge.vertices",
                    "signature": "build123d.Edge.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Edge.wire",
                    "signature": "build123d.Edge.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Edge.wires",
                    "signature": "build123d.Edge.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Ellipse",
            "signature": "build123d.Ellipse(x_radius: 'float', y_radius: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Ellipse.bounding_box",
                    "signature": "build123d.Ellipse.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Ellipse.cast",
                    "signature": "build123d.Ellipse.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.center",
                    "signature": "build123d.Ellipse.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Ellipse.chamfer",
                    "signature": "build123d.Ellipse.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.clean",
                    "signature": "build123d.Ellipse.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.closest_points",
                    "signature": "build123d.Ellipse.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Ellipse.combined_center",
                    "signature": "build123d.Ellipse.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Ellipse.compound",
                    "signature": "build123d.Ellipse.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.compounds",
                    "signature": "build123d.Ellipse.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Ellipse.compute_mass",
                    "signature": "build123d.Ellipse.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Ellipse.copy",
                    "signature": "build123d.Ellipse.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.copy_attributes_to",
                    "signature": "build123d.Ellipse.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Ellipse.cut",
                    "signature": "build123d.Ellipse.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.distance",
                    "signature": "build123d.Ellipse.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Ellipse.distance_to",
                    "signature": "build123d.Ellipse.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Ellipse.distance_to_with_closest_points",
                    "signature": "build123d.Ellipse.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Ellipse.distances",
                    "signature": "build123d.Ellipse.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Ellipse.do_children_intersect",
                    "signature": "build123d.Ellipse.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Ellipse.dprism",
                    "signature": "build123d.Ellipse.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Ellipse.edge",
                    "signature": "build123d.Ellipse.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Ellipse.edges",
                    "signature": "build123d.Ellipse.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Ellipse.export_brep",
                    "signature": "build123d.Ellipse.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.export_step",
                    "signature": "build123d.Ellipse.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Ellipse.export_stl",
                    "signature": "build123d.Ellipse.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.extrude",
                    "signature": "build123d.Ellipse.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.face",
                    "signature": "build123d.Ellipse.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Ellipse.faces",
                    "signature": "build123d.Ellipse.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Ellipse.faces_intersected_by_axis",
                    "signature": "build123d.Ellipse.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Ellipse.fillet",
                    "signature": "build123d.Ellipse.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.find_intersection",
                    "signature": "build123d.Ellipse.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Ellipse.find_intersection_points",
                    "signature": "build123d.Ellipse.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Ellipse.first_level_shapes",
                    "signature": "build123d.Ellipse.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Ellipse.fix",
                    "signature": "build123d.Ellipse.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.fuse",
                    "signature": "build123d.Ellipse.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.get_type",
                    "signature": "build123d.Ellipse.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Ellipse.hash_code",
                    "signature": "build123d.Ellipse.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Ellipse.hollow",
                    "signature": "build123d.Ellipse.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Ellipse.intersect",
                    "signature": "build123d.Ellipse.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.is_equal",
                    "signature": "build123d.Ellipse.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.is_inside",
                    "signature": "build123d.Ellipse.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.is_null",
                    "signature": "build123d.Ellipse.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.is_same",
                    "signature": "build123d.Ellipse.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.is_valid",
                    "signature": "build123d.Ellipse.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Ellipse.iter_path_reverse",
                    "signature": "build123d.Ellipse.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Ellipse.locate",
                    "signature": "build123d.Ellipse.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.located",
                    "signature": "build123d.Ellipse.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.make_compound",
                    "signature": "build123d.Ellipse.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.make_text",
                    "signature": "build123d.Ellipse.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Ellipse.make_triad",
                    "signature": "build123d.Ellipse.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.max_fillet",
                    "signature": "build123d.Ellipse.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Ellipse.mesh",
                    "signature": "build123d.Ellipse.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Ellipse.mirror",
                    "signature": "build123d.Ellipse.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.move",
                    "signature": "build123d.Ellipse.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.moved",
                    "signature": "build123d.Ellipse.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.offset_3d",
                    "signature": "build123d.Ellipse.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Ellipse.project_faces",
                    "signature": "build123d.Ellipse.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Ellipse.project_to_viewport",
                    "signature": "build123d.Ellipse.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Ellipse.relocate",
                    "signature": "build123d.Ellipse.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Ellipse.rotate",
                    "signature": "build123d.Ellipse.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.scale",
                    "signature": "build123d.Ellipse.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.shape_type",
                    "signature": "build123d.Ellipse.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Ellipse.shell",
                    "signature": "build123d.Ellipse.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Ellipse.shells",
                    "signature": "build123d.Ellipse.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Ellipse.show_topology",
                    "signature": "build123d.Ellipse.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Ellipse.solid",
                    "signature": "build123d.Ellipse.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Ellipse.solids",
                    "signature": "build123d.Ellipse.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Ellipse.split",
                    "signature": "build123d.Ellipse.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.split_by_perimeter",
                    "signature": "build123d.Ellipse.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Ellipse.tessellate",
                    "signature": "build123d.Ellipse.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Ellipse.to_arcs",
                    "signature": "build123d.Ellipse.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Ellipse.to_splines",
                    "signature": "build123d.Ellipse.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Ellipse.to_vtk_poly_data",
                    "signature": "build123d.Ellipse.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Ellipse.transform_geometry",
                    "signature": "build123d.Ellipse.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.transform_shape",
                    "signature": "build123d.Ellipse.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.transformed",
                    "signature": "build123d.Ellipse.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.translate",
                    "signature": "build123d.Ellipse.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Ellipse.unwrap",
                    "signature": "build123d.Ellipse.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Ellipse.vertex",
                    "signature": "build123d.Ellipse.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Ellipse.vertices",
                    "signature": "build123d.Ellipse.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Ellipse.wire",
                    "signature": "build123d.Ellipse.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Ellipse.wires",
                    "signature": "build123d.Ellipse.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.EllipticalCenterArc",
            "signature": "build123d.EllipticalCenterArc(center: 'VectorLike', x_radius: 'float', y_radius: 'float', start_angle: 'float' = 0.0, end_angle: 'float' = 90.0, rotation: 'float' = 0.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.EllipticalCenterArc.bounding_box",
                    "signature": "build123d.EllipticalCenterArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.cast",
                    "signature": "build123d.EllipticalCenterArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.center",
                    "signature": "build123d.EllipticalCenterArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.clean",
                    "signature": "build123d.EllipticalCenterArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.close",
                    "signature": "build123d.EllipticalCenterArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.closest_points",
                    "signature": "build123d.EllipticalCenterArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.combined_center",
                    "signature": "build123d.EllipticalCenterArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.common_plane",
                    "signature": "build123d.EllipticalCenterArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.compound",
                    "signature": "build123d.EllipticalCenterArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.compounds",
                    "signature": "build123d.EllipticalCenterArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.compute_mass",
                    "signature": "build123d.EllipticalCenterArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.copy",
                    "signature": "build123d.EllipticalCenterArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.copy_attributes_to",
                    "signature": "build123d.EllipticalCenterArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.EllipticalCenterArc.cut",
                    "signature": "build123d.EllipticalCenterArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.distance",
                    "signature": "build123d.EllipticalCenterArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.distance_to",
                    "signature": "build123d.EllipticalCenterArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.distance_to_with_closest_points",
                    "signature": "build123d.EllipticalCenterArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.distances",
                    "signature": "build123d.EllipticalCenterArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.distribute_locations",
                    "signature": "build123d.EllipticalCenterArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.edge",
                    "signature": "build123d.EllipticalCenterArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.edges",
                    "signature": "build123d.EllipticalCenterArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.end_point",
                    "signature": "build123d.EllipticalCenterArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.export_brep",
                    "signature": "build123d.EllipticalCenterArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.export_step",
                    "signature": "build123d.EllipticalCenterArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.export_stl",
                    "signature": "build123d.EllipticalCenterArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.extrude",
                    "signature": "build123d.EllipticalCenterArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.face",
                    "signature": "build123d.EllipticalCenterArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.faces",
                    "signature": "build123d.EllipticalCenterArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.faces_intersected_by_axis",
                    "signature": "build123d.EllipticalCenterArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.find_intersection",
                    "signature": "build123d.EllipticalCenterArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.find_intersection_points",
                    "signature": "build123d.EllipticalCenterArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.find_tangent",
                    "signature": "build123d.EllipticalCenterArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.fix",
                    "signature": "build123d.EllipticalCenterArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.fuse",
                    "signature": "build123d.EllipticalCenterArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.hash_code",
                    "signature": "build123d.EllipticalCenterArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.intersect",
                    "signature": "build123d.EllipticalCenterArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.is_equal",
                    "signature": "build123d.EllipticalCenterArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.is_null",
                    "signature": "build123d.EllipticalCenterArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.is_same",
                    "signature": "build123d.EllipticalCenterArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.is_valid",
                    "signature": "build123d.EllipticalCenterArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.iter_path_reverse",
                    "signature": "build123d.EllipticalCenterArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.EllipticalCenterArc.locate",
                    "signature": "build123d.EllipticalCenterArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.located",
                    "signature": "build123d.EllipticalCenterArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.location_at",
                    "signature": "build123d.EllipticalCenterArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.locations",
                    "signature": "build123d.EllipticalCenterArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_bezier",
                    "signature": "build123d.EllipticalCenterArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_circle",
                    "signature": "build123d.EllipticalCenterArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_ellipse",
                    "signature": "build123d.EllipticalCenterArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_helix",
                    "signature": "build123d.EllipticalCenterArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_line",
                    "signature": "build123d.EllipticalCenterArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_mid_way",
                    "signature": "build123d.EllipticalCenterArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_spline",
                    "signature": "build123d.EllipticalCenterArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_spline_approx",
                    "signature": "build123d.EllipticalCenterArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_tangent_arc",
                    "signature": "build123d.EllipticalCenterArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.make_three_point_arc",
                    "signature": "build123d.EllipticalCenterArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.mesh",
                    "signature": "build123d.EllipticalCenterArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.EllipticalCenterArc.mirror",
                    "signature": "build123d.EllipticalCenterArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.move",
                    "signature": "build123d.EllipticalCenterArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.moved",
                    "signature": "build123d.EllipticalCenterArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.normal",
                    "signature": "build123d.EllipticalCenterArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.offset_2d",
                    "signature": "build123d.EllipticalCenterArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.param_at",
                    "signature": "build123d.EllipticalCenterArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.param_at_point",
                    "signature": "build123d.EllipticalCenterArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.perpendicular_line",
                    "signature": "build123d.EllipticalCenterArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.position_at",
                    "signature": "build123d.EllipticalCenterArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.positions",
                    "signature": "build123d.EllipticalCenterArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.project",
                    "signature": "build123d.EllipticalCenterArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.project_faces",
                    "signature": "build123d.EllipticalCenterArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.project_to_shape",
                    "signature": "build123d.EllipticalCenterArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.project_to_viewport",
                    "signature": "build123d.EllipticalCenterArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.relocate",
                    "signature": "build123d.EllipticalCenterArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.EllipticalCenterArc.reversed",
                    "signature": "build123d.EllipticalCenterArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.rotate",
                    "signature": "build123d.EllipticalCenterArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.scale",
                    "signature": "build123d.EllipticalCenterArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.shape_type",
                    "signature": "build123d.EllipticalCenterArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.shell",
                    "signature": "build123d.EllipticalCenterArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.shells",
                    "signature": "build123d.EllipticalCenterArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.show_topology",
                    "signature": "build123d.EllipticalCenterArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.solid",
                    "signature": "build123d.EllipticalCenterArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.solids",
                    "signature": "build123d.EllipticalCenterArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.split",
                    "signature": "build123d.EllipticalCenterArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.split_by_perimeter",
                    "signature": "build123d.EllipticalCenterArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.EllipticalCenterArc.start_point",
                    "signature": "build123d.EllipticalCenterArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.tangent_angle_at",
                    "signature": "build123d.EllipticalCenterArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.tangent_at",
                    "signature": "build123d.EllipticalCenterArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.tessellate",
                    "signature": "build123d.EllipticalCenterArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.to_arcs",
                    "signature": "build123d.EllipticalCenterArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.to_axis",
                    "signature": "build123d.EllipticalCenterArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.to_splines",
                    "signature": "build123d.EllipticalCenterArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.to_vtk_poly_data",
                    "signature": "build123d.EllipticalCenterArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.to_wire",
                    "signature": "build123d.EllipticalCenterArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.transform_geometry",
                    "signature": "build123d.EllipticalCenterArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.transform_shape",
                    "signature": "build123d.EllipticalCenterArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.transformed",
                    "signature": "build123d.EllipticalCenterArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.translate",
                    "signature": "build123d.EllipticalCenterArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.trim",
                    "signature": "build123d.EllipticalCenterArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.trim_to_length",
                    "signature": "build123d.EllipticalCenterArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.vertex",
                    "signature": "build123d.EllipticalCenterArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.vertices",
                    "signature": "build123d.EllipticalCenterArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.wire",
                    "signature": "build123d.EllipticalCenterArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.EllipticalCenterArc.wires",
                    "signature": "build123d.EllipticalCenterArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.EllipticalStartArc",
            "signature": "build123d.EllipticalStartArc(start: 'VectorLike', end: 'VectorLike', x_radius: 'float', y_radius: 'float', rotation: 'float' = 0.0, large_arc: 'bool' = False, sweep_flag: 'bool' = True, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), mode: 'Mode' = <Mode.ADD>) -> 'Edge'",
            "methods": [
                {
                    "name": "build123d.EllipticalStartArc.bounding_box",
                    "signature": "build123d.EllipticalStartArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.EllipticalStartArc.cast",
                    "signature": "build123d.EllipticalStartArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.center",
                    "signature": "build123d.EllipticalStartArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.clean",
                    "signature": "build123d.EllipticalStartArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.close",
                    "signature": "build123d.EllipticalStartArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.closest_points",
                    "signature": "build123d.EllipticalStartArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.combined_center",
                    "signature": "build123d.EllipticalStartArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.common_plane",
                    "signature": "build123d.EllipticalStartArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.compound",
                    "signature": "build123d.EllipticalStartArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.EllipticalStartArc.compounds",
                    "signature": "build123d.EllipticalStartArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.compute_mass",
                    "signature": "build123d.EllipticalStartArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalStartArc.copy",
                    "signature": "build123d.EllipticalStartArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.copy_attributes_to",
                    "signature": "build123d.EllipticalStartArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.EllipticalStartArc.cut",
                    "signature": "build123d.EllipticalStartArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.distance",
                    "signature": "build123d.EllipticalStartArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalStartArc.distance_to",
                    "signature": "build123d.EllipticalStartArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalStartArc.distance_to_with_closest_points",
                    "signature": "build123d.EllipticalStartArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.distances",
                    "signature": "build123d.EllipticalStartArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.distribute_locations",
                    "signature": "build123d.EllipticalStartArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.edge",
                    "signature": "build123d.EllipticalStartArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.edges",
                    "signature": "build123d.EllipticalStartArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.end_point",
                    "signature": "build123d.EllipticalStartArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.export_brep",
                    "signature": "build123d.EllipticalStartArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalStartArc.export_step",
                    "signature": "build123d.EllipticalStartArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.EllipticalStartArc.export_stl",
                    "signature": "build123d.EllipticalStartArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalStartArc.extrude",
                    "signature": "build123d.EllipticalStartArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.face",
                    "signature": "build123d.EllipticalStartArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.EllipticalStartArc.faces",
                    "signature": "build123d.EllipticalStartArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.faces_intersected_by_axis",
                    "signature": "build123d.EllipticalStartArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.find_intersection",
                    "signature": "build123d.EllipticalStartArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.find_intersection_points",
                    "signature": "build123d.EllipticalStartArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.find_tangent",
                    "signature": "build123d.EllipticalStartArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.fix",
                    "signature": "build123d.EllipticalStartArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.fuse",
                    "signature": "build123d.EllipticalStartArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.hash_code",
                    "signature": "build123d.EllipticalStartArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.EllipticalStartArc.intersect",
                    "signature": "build123d.EllipticalStartArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.is_equal",
                    "signature": "build123d.EllipticalStartArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalStartArc.is_null",
                    "signature": "build123d.EllipticalStartArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalStartArc.is_same",
                    "signature": "build123d.EllipticalStartArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalStartArc.is_valid",
                    "signature": "build123d.EllipticalStartArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.EllipticalStartArc.iter_path_reverse",
                    "signature": "build123d.EllipticalStartArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.EllipticalStartArc.locate",
                    "signature": "build123d.EllipticalStartArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.located",
                    "signature": "build123d.EllipticalStartArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.location_at",
                    "signature": "build123d.EllipticalStartArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.EllipticalStartArc.locations",
                    "signature": "build123d.EllipticalStartArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_bezier",
                    "signature": "build123d.EllipticalStartArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_circle",
                    "signature": "build123d.EllipticalStartArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_ellipse",
                    "signature": "build123d.EllipticalStartArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_helix",
                    "signature": "build123d.EllipticalStartArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_line",
                    "signature": "build123d.EllipticalStartArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_mid_way",
                    "signature": "build123d.EllipticalStartArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_spline",
                    "signature": "build123d.EllipticalStartArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_spline_approx",
                    "signature": "build123d.EllipticalStartArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_tangent_arc",
                    "signature": "build123d.EllipticalStartArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.make_three_point_arc",
                    "signature": "build123d.EllipticalStartArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.mesh",
                    "signature": "build123d.EllipticalStartArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.EllipticalStartArc.mirror",
                    "signature": "build123d.EllipticalStartArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.move",
                    "signature": "build123d.EllipticalStartArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.moved",
                    "signature": "build123d.EllipticalStartArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.normal",
                    "signature": "build123d.EllipticalStartArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.offset_2d",
                    "signature": "build123d.EllipticalStartArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.param_at",
                    "signature": "build123d.EllipticalStartArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalStartArc.param_at_point",
                    "signature": "build123d.EllipticalStartArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.EllipticalStartArc.perpendicular_line",
                    "signature": "build123d.EllipticalStartArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.position_at",
                    "signature": "build123d.EllipticalStartArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.positions",
                    "signature": "build123d.EllipticalStartArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.project",
                    "signature": "build123d.EllipticalStartArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.project_faces",
                    "signature": "build123d.EllipticalStartArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.EllipticalStartArc.project_to_shape",
                    "signature": "build123d.EllipticalStartArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.project_to_viewport",
                    "signature": "build123d.EllipticalStartArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.relocate",
                    "signature": "build123d.EllipticalStartArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.EllipticalStartArc.reversed",
                    "signature": "build123d.EllipticalStartArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.rotate",
                    "signature": "build123d.EllipticalStartArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.scale",
                    "signature": "build123d.EllipticalStartArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.shape_type",
                    "signature": "build123d.EllipticalStartArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.EllipticalStartArc.shell",
                    "signature": "build123d.EllipticalStartArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.EllipticalStartArc.shells",
                    "signature": "build123d.EllipticalStartArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.show_topology",
                    "signature": "build123d.EllipticalStartArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.EllipticalStartArc.solid",
                    "signature": "build123d.EllipticalStartArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.EllipticalStartArc.solids",
                    "signature": "build123d.EllipticalStartArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.split",
                    "signature": "build123d.EllipticalStartArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.split_by_perimeter",
                    "signature": "build123d.EllipticalStartArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.EllipticalStartArc.start_point",
                    "signature": "build123d.EllipticalStartArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.tangent_angle_at",
                    "signature": "build123d.EllipticalStartArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.EllipticalStartArc.tangent_at",
                    "signature": "build123d.EllipticalStartArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.EllipticalStartArc.tessellate",
                    "signature": "build123d.EllipticalStartArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.to_arcs",
                    "signature": "build123d.EllipticalStartArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.EllipticalStartArc.to_axis",
                    "signature": "build123d.EllipticalStartArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.EllipticalStartArc.to_splines",
                    "signature": "build123d.EllipticalStartArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.EllipticalStartArc.to_vtk_poly_data",
                    "signature": "build123d.EllipticalStartArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.EllipticalStartArc.to_wire",
                    "signature": "build123d.EllipticalStartArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.EllipticalStartArc.transform_geometry",
                    "signature": "build123d.EllipticalStartArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.transform_shape",
                    "signature": "build123d.EllipticalStartArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.transformed",
                    "signature": "build123d.EllipticalStartArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.translate",
                    "signature": "build123d.EllipticalStartArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.EllipticalStartArc.trim",
                    "signature": "build123d.EllipticalStartArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.trim_to_length",
                    "signature": "build123d.EllipticalStartArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.EllipticalStartArc.vertex",
                    "signature": "build123d.EllipticalStartArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.EllipticalStartArc.vertices",
                    "signature": "build123d.EllipticalStartArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.EllipticalStartArc.wire",
                    "signature": "build123d.EllipticalStartArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.EllipticalStartArc.wires",
                    "signature": "build123d.EllipticalStartArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Export2D",
            "signature": "build123d.Export2D()",
            "methods": [],
            "variables": [
                "DEFAULT_COLOR_INDEX",
                "DEFAULT_LINE_TYPE",
                "DEFAULT_LINE_WEIGHT",
                "LINETYPE_DEFS",
                "LTYPE_SCALE",
                "PARAMETRIC_TOLERANCE"
            ]
        },
        {
            "name": "build123d.ExportDXF",
            "signature": "build123d.ExportDXF(version: str = 'AC1027', unit: build123d.build_enums.Unit = <Unit.MM>, color: Optional[build123d.exporters.ColorIndex] = None, line_weight: Optional[float] = None, line_type: Optional[build123d.exporters.LineType] = None)",
            "methods": [
                {
                    "name": "build123d.ExportDXF.add_layer",
                    "signature": "build123d.ExportDXF.add_layer(self, name: str, *, color: Optional[build123d.exporters.ColorIndex] = None, line_weight: Optional[float] = None, line_type: Optional[build123d.exporters.LineType] = None) -> Self"
                },
                {
                    "name": "build123d.ExportDXF.add_shape",
                    "signature": "build123d.ExportDXF.add_shape(self, shape: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]], layer: str = '') -> Self"
                },
                {
                    "name": "build123d.ExportDXF.write",
                    "signature": "build123d.ExportDXF.write(self, file_name: Union[os.PathLike, str, bytes])"
                }
            ],
            "variables": [
                "DEFAULT_COLOR_INDEX",
                "DEFAULT_LINE_TYPE",
                "DEFAULT_LINE_WEIGHT",
                "LINETYPE_DEFS",
                "LTYPE_SCALE",
                "METRIC_UNITS",
                "PARAMETRIC_TOLERANCE"
            ]
        },
        {
            "name": "build123d.ExportSVG",
            "signature": "build123d.ExportSVG(unit: build123d.build_enums.Unit = <Unit.MM>, scale: float = 1, margin: float = 0, fit_to_stroke: bool = True, precision: int = 6, fill_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = None, line_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = <ColorIndex.BLACK: 7>, line_weight: float = 0.09, line_type: build123d.exporters.LineType = <LineType.CONTINUOUS: 'CONTINUOUS'>, dot_length: Union[build123d.exporters.DotLength, float] = <DotLength.INKSCAPE_COMPAT: 0.01>)",
            "methods": [
                {
                    "name": "build123d.ExportSVG.add_layer",
                    "signature": "build123d.ExportSVG.add_layer(self, name: str, *, fill_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = None, line_color: Union[build123d.exporters.ColorIndex, ezdxf.colors.RGB, build123d.geometry.Color, NoneType] = <ColorIndex.BLACK: 7>, line_weight: float = 0.09, line_type: build123d.exporters.LineType = <LineType.CONTINUOUS: 'CONTINUOUS'>) -> Self"
                },
                {
                    "name": "build123d.ExportSVG.add_shape",
                    "signature": "build123d.ExportSVG.add_shape(self, shape: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]], layer: str = '', reverse_wires: bool = False)"
                },
                {
                    "name": "build123d.ExportSVG.write",
                    "signature": "build123d.ExportSVG.write(self, path: Union[os.PathLike, str, bytes])"
                }
            ],
            "variables": [
                "DEFAULT_COLOR_INDEX",
                "DEFAULT_LINE_TYPE",
                "DEFAULT_LINE_WEIGHT",
                "LINETYPE_DEFS",
                "LTYPE_SCALE",
                "PARAMETRIC_TOLERANCE"
            ]
        },
        {
            "name": "build123d.ExtensionLine",
            "signature": "build123d.ExtensionLine(border: Union[build123d.topology.Wire, build123d.topology.Edge, list[Union[build123d.geometry.Vector, build123d.topology.Vertex, tuple[float, float, float]]]], offset: float, draft: build123d.drafting.Draft, sketch: build123d.topology.Sketch = None, label: str = None, arrows: tuple[bool, bool] = (True, True), tolerance: Union[float, tuple[float, float]] = None, label_angle: bool = False, project_line: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = None, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.ExtensionLine.bounding_box",
                    "signature": "build123d.ExtensionLine.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.ExtensionLine.cast",
                    "signature": "build123d.ExtensionLine.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.center",
                    "signature": "build123d.ExtensionLine.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.ExtensionLine.chamfer",
                    "signature": "build123d.ExtensionLine.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.clean",
                    "signature": "build123d.ExtensionLine.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.closest_points",
                    "signature": "build123d.ExtensionLine.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.ExtensionLine.combined_center",
                    "signature": "build123d.ExtensionLine.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.ExtensionLine.compound",
                    "signature": "build123d.ExtensionLine.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.compounds",
                    "signature": "build123d.ExtensionLine.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.ExtensionLine.compute_mass",
                    "signature": "build123d.ExtensionLine.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.ExtensionLine.copy",
                    "signature": "build123d.ExtensionLine.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.copy_attributes_to",
                    "signature": "build123d.ExtensionLine.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.ExtensionLine.cut",
                    "signature": "build123d.ExtensionLine.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.distance",
                    "signature": "build123d.ExtensionLine.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.ExtensionLine.distance_to",
                    "signature": "build123d.ExtensionLine.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.ExtensionLine.distance_to_with_closest_points",
                    "signature": "build123d.ExtensionLine.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.ExtensionLine.distances",
                    "signature": "build123d.ExtensionLine.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.ExtensionLine.do_children_intersect",
                    "signature": "build123d.ExtensionLine.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.ExtensionLine.dprism",
                    "signature": "build123d.ExtensionLine.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.ExtensionLine.edge",
                    "signature": "build123d.ExtensionLine.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.ExtensionLine.edges",
                    "signature": "build123d.ExtensionLine.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.ExtensionLine.export_brep",
                    "signature": "build123d.ExtensionLine.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.export_step",
                    "signature": "build123d.ExtensionLine.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.ExtensionLine.export_stl",
                    "signature": "build123d.ExtensionLine.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.extrude",
                    "signature": "build123d.ExtensionLine.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.face",
                    "signature": "build123d.ExtensionLine.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.ExtensionLine.faces",
                    "signature": "build123d.ExtensionLine.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ExtensionLine.faces_intersected_by_axis",
                    "signature": "build123d.ExtensionLine.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ExtensionLine.fillet",
                    "signature": "build123d.ExtensionLine.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.find_intersection",
                    "signature": "build123d.ExtensionLine.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.ExtensionLine.find_intersection_points",
                    "signature": "build123d.ExtensionLine.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.ExtensionLine.first_level_shapes",
                    "signature": "build123d.ExtensionLine.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.ExtensionLine.fix",
                    "signature": "build123d.ExtensionLine.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.fuse",
                    "signature": "build123d.ExtensionLine.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.get_type",
                    "signature": "build123d.ExtensionLine.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.ExtensionLine.hash_code",
                    "signature": "build123d.ExtensionLine.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.ExtensionLine.hollow",
                    "signature": "build123d.ExtensionLine.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.ExtensionLine.intersect",
                    "signature": "build123d.ExtensionLine.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.is_equal",
                    "signature": "build123d.ExtensionLine.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.is_inside",
                    "signature": "build123d.ExtensionLine.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.is_null",
                    "signature": "build123d.ExtensionLine.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.is_same",
                    "signature": "build123d.ExtensionLine.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.is_valid",
                    "signature": "build123d.ExtensionLine.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.ExtensionLine.iter_path_reverse",
                    "signature": "build123d.ExtensionLine.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.ExtensionLine.locate",
                    "signature": "build123d.ExtensionLine.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.located",
                    "signature": "build123d.ExtensionLine.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.make_compound",
                    "signature": "build123d.ExtensionLine.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.make_text",
                    "signature": "build123d.ExtensionLine.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.ExtensionLine.make_triad",
                    "signature": "build123d.ExtensionLine.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.max_fillet",
                    "signature": "build123d.ExtensionLine.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.ExtensionLine.mesh",
                    "signature": "build123d.ExtensionLine.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.ExtensionLine.mirror",
                    "signature": "build123d.ExtensionLine.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.move",
                    "signature": "build123d.ExtensionLine.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.moved",
                    "signature": "build123d.ExtensionLine.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.offset_3d",
                    "signature": "build123d.ExtensionLine.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.ExtensionLine.project_faces",
                    "signature": "build123d.ExtensionLine.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.ExtensionLine.project_to_viewport",
                    "signature": "build123d.ExtensionLine.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.ExtensionLine.relocate",
                    "signature": "build123d.ExtensionLine.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.ExtensionLine.rotate",
                    "signature": "build123d.ExtensionLine.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.scale",
                    "signature": "build123d.ExtensionLine.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.shape_type",
                    "signature": "build123d.ExtensionLine.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.ExtensionLine.shell",
                    "signature": "build123d.ExtensionLine.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.ExtensionLine.shells",
                    "signature": "build123d.ExtensionLine.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.ExtensionLine.show_topology",
                    "signature": "build123d.ExtensionLine.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.ExtensionLine.solid",
                    "signature": "build123d.ExtensionLine.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.ExtensionLine.solids",
                    "signature": "build123d.ExtensionLine.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.ExtensionLine.split",
                    "signature": "build123d.ExtensionLine.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.split_by_perimeter",
                    "signature": "build123d.ExtensionLine.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.ExtensionLine.tessellate",
                    "signature": "build123d.ExtensionLine.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.ExtensionLine.to_arcs",
                    "signature": "build123d.ExtensionLine.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.ExtensionLine.to_splines",
                    "signature": "build123d.ExtensionLine.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.ExtensionLine.to_vtk_poly_data",
                    "signature": "build123d.ExtensionLine.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.ExtensionLine.transform_geometry",
                    "signature": "build123d.ExtensionLine.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.transform_shape",
                    "signature": "build123d.ExtensionLine.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.transformed",
                    "signature": "build123d.ExtensionLine.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.translate",
                    "signature": "build123d.ExtensionLine.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.ExtensionLine.unwrap",
                    "signature": "build123d.ExtensionLine.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.ExtensionLine.vertex",
                    "signature": "build123d.ExtensionLine.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.ExtensionLine.vertices",
                    "signature": "build123d.ExtensionLine.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.ExtensionLine.wire",
                    "signature": "build123d.ExtensionLine.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.ExtensionLine.wires",
                    "signature": "build123d.ExtensionLine.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Extrinsic",
            "signature": "build123d.Extrinsic()",
            "methods": [],
            "variables": [
                "XYX",
                "XYZ",
                "XZX",
                "XZY",
                "YXY",
                "YXZ",
                "YZX",
                "YZY",
                "ZXY",
                "ZXZ",
                "ZYX",
                "ZYZ",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Face",
            "signature": "build123d.Face(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Face.bounding_box",
                    "signature": "build123d.Face.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Face.cast",
                    "signature": "build123d.Face.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Face.center",
                    "signature": "build123d.Face.center(self, center_of=<CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Face.chamfer_2d",
                    "signature": "build123d.Face.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.clean",
                    "signature": "build123d.Face.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Face.closest_points",
                    "signature": "build123d.Face.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Face.combined_center",
                    "signature": "build123d.Face.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Face.compound",
                    "signature": "build123d.Face.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Face.compounds",
                    "signature": "build123d.Face.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Face.compute_mass",
                    "signature": "build123d.Face.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Face.copy",
                    "signature": "build123d.Face.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Face.copy_attributes_to",
                    "signature": "build123d.Face.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Face.cut",
                    "signature": "build123d.Face.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Face.distance",
                    "signature": "build123d.Face.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Face.distance_to",
                    "signature": "build123d.Face.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Face.distance_to_with_closest_points",
                    "signature": "build123d.Face.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Face.distances",
                    "signature": "build123d.Face.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Face.edge",
                    "signature": "build123d.Face.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Face.edges",
                    "signature": "build123d.Face.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Face.export_brep",
                    "signature": "build123d.Face.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Face.export_step",
                    "signature": "build123d.Face.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Face.export_stl",
                    "signature": "build123d.Face.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Face.extrude",
                    "signature": "build123d.Face.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Face.face",
                    "signature": "build123d.Face.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Face.faces",
                    "signature": "build123d.Face.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Face.faces_intersected_by_axis",
                    "signature": "build123d.Face.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Face.fillet_2d",
                    "signature": "build123d.Face.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Face'"
                },
                {
                    "name": "build123d.Face.find_intersection",
                    "signature": "build123d.Face.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Face.find_intersection_points",
                    "signature": "build123d.Face.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Face.fix",
                    "signature": "build123d.Face.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Face.fuse",
                    "signature": "build123d.Face.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Face.hash_code",
                    "signature": "build123d.Face.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Face.inner_wires",
                    "signature": "build123d.Face.inner_wires(self) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.Face.intersect",
                    "signature": "build123d.Face.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Face.is_coplanar",
                    "signature": "build123d.Face.is_coplanar(self, plane: 'Plane') -> 'bool'"
                },
                {
                    "name": "build123d.Face.is_equal",
                    "signature": "build123d.Face.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Face.is_inside",
                    "signature": "build123d.Face.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Face.is_null",
                    "signature": "build123d.Face.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Face.is_same",
                    "signature": "build123d.Face.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Face.is_valid",
                    "signature": "build123d.Face.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Face.iter_path_reverse",
                    "signature": "build123d.Face.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Face.locate",
                    "signature": "build123d.Face.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Face.located",
                    "signature": "build123d.Face.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Face.location_at",
                    "signature": "build123d.Face.location_at(self, u: 'float', v: 'float', x_dir: 'VectorLike' = None) -> 'Location'"
                },
                {
                    "name": "build123d.Face.make_bezier_surface",
                    "signature": "build123d.Face.make_bezier_surface(points: 'list[list[VectorLike]]', weights: 'list[list[float]]' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_from_wires",
                    "signature": "build123d.Face.make_from_wires(outer_wire: 'Wire', inner_wires: 'Iterable[Wire]' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_holes",
                    "signature": "build123d.Face.make_holes(self, interior_wires: 'list[Wire]') -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_plane",
                    "signature": "build123d.Face.make_plane(plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_rect",
                    "signature": "build123d.Face.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_surface",
                    "signature": "build123d.Face.make_surface(exterior: 'Union[Wire, Iterable[Edge]]', surface_points: 'Iterable[VectorLike]' = None, interior_wires: 'Iterable[Wire]' = None) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_surface_from_array_of_points",
                    "signature": "build123d.Face.make_surface_from_array_of_points(points: 'list[list[VectorLike]]', tol: 'float' = 0.01, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 3) -> 'Face'"
                },
                {
                    "name": "build123d.Face.make_surface_from_curves",
                    "signature": "build123d.Face.make_surface_from_curves(curve1: 'Union[Edge, Wire]', curve2: 'Union[Edge, Wire]') -> 'Face'"
                },
                {
                    "name": "build123d.Face.mesh",
                    "signature": "build123d.Face.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Face.mirror",
                    "signature": "build123d.Face.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Face.move",
                    "signature": "build123d.Face.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Face.moved",
                    "signature": "build123d.Face.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Face.normal_at",
                    "signature": "build123d.Face.normal_at(self, *args, **kwargs) -> 'Vector'"
                },
                {
                    "name": "build123d.Face.offset",
                    "signature": "build123d.Face.offset(self, amount: 'float') -> 'Face'"
                },
                {
                    "name": "build123d.Face.outer_wire",
                    "signature": "build123d.Face.outer_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Face.position_at",
                    "signature": "build123d.Face.position_at(self, u: 'float', v: 'float') -> 'Vector'"
                },
                {
                    "name": "build123d.Face.project_faces",
                    "signature": "build123d.Face.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Face.project_to_shape",
                    "signature": "build123d.Face.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike', taper: 'float' = 0) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Face.project_to_shape_alt",
                    "signature": "build123d.Face.project_to_shape_alt(self, target_object: 'Shape', direction: 'VectorLike') -> 'Union[None, Face, Compound]'"
                },
                {
                    "name": "build123d.Face.project_to_viewport",
                    "signature": "build123d.Face.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Face.relocate",
                    "signature": "build123d.Face.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Face.rotate",
                    "signature": "build123d.Face.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Face.scale",
                    "signature": "build123d.Face.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Face.sew_faces",
                    "signature": "build123d.Face.sew_faces(faces: 'Iterable[Face]') -> 'list[ShapeList[Face]]'"
                },
                {
                    "name": "build123d.Face.shape_type",
                    "signature": "build123d.Face.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Face.shell",
                    "signature": "build123d.Face.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Face.shells",
                    "signature": "build123d.Face.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Face.show_topology",
                    "signature": "build123d.Face.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Face.solid",
                    "signature": "build123d.Face.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Face.solids",
                    "signature": "build123d.Face.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Face.split",
                    "signature": "build123d.Face.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Face.split_by_perimeter",
                    "signature": "build123d.Face.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Face.sweep",
                    "signature": "build123d.Face.sweep(profile: 'Union[Curve, Edge, Wire]', path: 'Union[Curve, Edge, Wire]', transition=<Transition.TRANSFORMED>) -> 'Face'"
                },
                {
                    "name": "build123d.Face.tessellate",
                    "signature": "build123d.Face.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Face.thicken",
                    "signature": "build123d.Face.thicken(self, depth: 'float', normal_override: 'Optional[VectorLike]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Face.to_arcs",
                    "signature": "build123d.Face.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Face.to_splines",
                    "signature": "build123d.Face.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Face.to_vtk_poly_data",
                    "signature": "build123d.Face.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Face.transform_geometry",
                    "signature": "build123d.Face.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Face.transform_shape",
                    "signature": "build123d.Face.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Face.transformed",
                    "signature": "build123d.Face.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Face.translate",
                    "signature": "build123d.Face.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Face.vertex",
                    "signature": "build123d.Face.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Face.vertices",
                    "signature": "build123d.Face.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Face.wire",
                    "signature": "build123d.Face.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Face.wires",
                    "signature": "build123d.Face.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "center_location",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "geometry",
                "height",
                "is_leaf",
                "is_manifold",
                "is_planar",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume",
                "width"
            ]
        },
        {
            "name": "build123d.FilletPolyline",
            "signature": "build123d.FilletPolyline(*pts: 'Union[VectorLike, Iterable[VectorLike]]', radius: 'float', close: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.FilletPolyline.bounding_box",
                    "signature": "build123d.FilletPolyline.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.FilletPolyline.cast",
                    "signature": "build123d.FilletPolyline.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.center",
                    "signature": "build123d.FilletPolyline.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.chamfer_2d",
                    "signature": "build123d.FilletPolyline.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.clean",
                    "signature": "build123d.FilletPolyline.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.close",
                    "signature": "build123d.FilletPolyline.close(self) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.closest_points",
                    "signature": "build123d.FilletPolyline.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.FilletPolyline.combine",
                    "signature": "build123d.FilletPolyline.combine(wires: 'Iterable[Union[Wire, Edge]]', tol: 'float' = 1e-09) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.FilletPolyline.combined_center",
                    "signature": "build123d.FilletPolyline.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.common_plane",
                    "signature": "build123d.FilletPolyline.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.FilletPolyline.compound",
                    "signature": "build123d.FilletPolyline.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.FilletPolyline.compounds",
                    "signature": "build123d.FilletPolyline.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.FilletPolyline.compute_mass",
                    "signature": "build123d.FilletPolyline.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.FilletPolyline.copy",
                    "signature": "build123d.FilletPolyline.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.copy_attributes_to",
                    "signature": "build123d.FilletPolyline.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.FilletPolyline.cut",
                    "signature": "build123d.FilletPolyline.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.distance",
                    "signature": "build123d.FilletPolyline.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.FilletPolyline.distance_to",
                    "signature": "build123d.FilletPolyline.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.FilletPolyline.distance_to_with_closest_points",
                    "signature": "build123d.FilletPolyline.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.FilletPolyline.distances",
                    "signature": "build123d.FilletPolyline.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.FilletPolyline.edge",
                    "signature": "build123d.FilletPolyline.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.FilletPolyline.edges",
                    "signature": "build123d.FilletPolyline.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.FilletPolyline.end_point",
                    "signature": "build123d.FilletPolyline.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.export_brep",
                    "signature": "build123d.FilletPolyline.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.FilletPolyline.export_step",
                    "signature": "build123d.FilletPolyline.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.FilletPolyline.export_stl",
                    "signature": "build123d.FilletPolyline.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.FilletPolyline.extrude",
                    "signature": "build123d.FilletPolyline.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.face",
                    "signature": "build123d.FilletPolyline.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.FilletPolyline.faces",
                    "signature": "build123d.FilletPolyline.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.FilletPolyline.faces_intersected_by_axis",
                    "signature": "build123d.FilletPolyline.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.FilletPolyline.fillet_2d",
                    "signature": "build123d.FilletPolyline.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.find_intersection",
                    "signature": "build123d.FilletPolyline.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.FilletPolyline.find_intersection_points",
                    "signature": "build123d.FilletPolyline.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.FilletPolyline.fix",
                    "signature": "build123d.FilletPolyline.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.fix_degenerate_edges",
                    "signature": "build123d.FilletPolyline.fix_degenerate_edges(self, precision: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.fuse",
                    "signature": "build123d.FilletPolyline.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.hash_code",
                    "signature": "build123d.FilletPolyline.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.FilletPolyline.intersect",
                    "signature": "build123d.FilletPolyline.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.FilletPolyline.is_equal",
                    "signature": "build123d.FilletPolyline.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.FilletPolyline.is_null",
                    "signature": "build123d.FilletPolyline.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.FilletPolyline.is_same",
                    "signature": "build123d.FilletPolyline.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.FilletPolyline.is_valid",
                    "signature": "build123d.FilletPolyline.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.FilletPolyline.iter_path_reverse",
                    "signature": "build123d.FilletPolyline.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.FilletPolyline.locate",
                    "signature": "build123d.FilletPolyline.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.located",
                    "signature": "build123d.FilletPolyline.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.location_at",
                    "signature": "build123d.FilletPolyline.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.FilletPolyline.locations",
                    "signature": "build123d.FilletPolyline.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.FilletPolyline.make_circle",
                    "signature": "build123d.FilletPolyline.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.make_convex_hull",
                    "signature": "build123d.FilletPolyline.make_convex_hull(edges: 'Iterable[Edge]', tolerance: 'float' = 0.001) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.make_ellipse",
                    "signature": "build123d.FilletPolyline.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, closed: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.make_polygon",
                    "signature": "build123d.FilletPolyline.make_polygon(vertices: 'Iterable[VectorLike]', close: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.make_rect",
                    "signature": "build123d.FilletPolyline.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.make_wire",
                    "signature": "build123d.FilletPolyline.make_wire(edges: 'Iterable[Edge]', sequenced: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.mesh",
                    "signature": "build123d.FilletPolyline.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.FilletPolyline.mirror",
                    "signature": "build123d.FilletPolyline.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.move",
                    "signature": "build123d.FilletPolyline.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.moved",
                    "signature": "build123d.FilletPolyline.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.normal",
                    "signature": "build123d.FilletPolyline.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.offset_2d",
                    "signature": "build123d.FilletPolyline.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.FilletPolyline.order_edges",
                    "signature": "build123d.FilletPolyline.order_edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.FilletPolyline.param_at",
                    "signature": "build123d.FilletPolyline.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.FilletPolyline.param_at_point",
                    "signature": "build123d.FilletPolyline.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.FilletPolyline.perpendicular_line",
                    "signature": "build123d.FilletPolyline.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.FilletPolyline.position_at",
                    "signature": "build123d.FilletPolyline.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.positions",
                    "signature": "build123d.FilletPolyline.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.FilletPolyline.project",
                    "signature": "build123d.FilletPolyline.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.FilletPolyline.project_faces",
                    "signature": "build123d.FilletPolyline.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.FilletPolyline.project_to_shape",
                    "signature": "build123d.FilletPolyline.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Wire]'"
                },
                {
                    "name": "build123d.FilletPolyline.project_to_viewport",
                    "signature": "build123d.FilletPolyline.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.FilletPolyline.relocate",
                    "signature": "build123d.FilletPolyline.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.FilletPolyline.rotate",
                    "signature": "build123d.FilletPolyline.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.scale",
                    "signature": "build123d.FilletPolyline.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.shape_type",
                    "signature": "build123d.FilletPolyline.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.FilletPolyline.shell",
                    "signature": "build123d.FilletPolyline.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.FilletPolyline.shells",
                    "signature": "build123d.FilletPolyline.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.FilletPolyline.show_topology",
                    "signature": "build123d.FilletPolyline.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.FilletPolyline.solid",
                    "signature": "build123d.FilletPolyline.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.FilletPolyline.solids",
                    "signature": "build123d.FilletPolyline.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.FilletPolyline.split",
                    "signature": "build123d.FilletPolyline.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.split_by_perimeter",
                    "signature": "build123d.FilletPolyline.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.FilletPolyline.start_point",
                    "signature": "build123d.FilletPolyline.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.stitch",
                    "signature": "build123d.FilletPolyline.stitch(self, other: 'Wire') -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.tangent_angle_at",
                    "signature": "build123d.FilletPolyline.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.FilletPolyline.tangent_at",
                    "signature": "build123d.FilletPolyline.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.FilletPolyline.tessellate",
                    "signature": "build123d.FilletPolyline.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.FilletPolyline.to_arcs",
                    "signature": "build123d.FilletPolyline.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.FilletPolyline.to_splines",
                    "signature": "build123d.FilletPolyline.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.FilletPolyline.to_vtk_poly_data",
                    "signature": "build123d.FilletPolyline.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.FilletPolyline.to_wire",
                    "signature": "build123d.FilletPolyline.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.transform_geometry",
                    "signature": "build123d.FilletPolyline.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.transform_shape",
                    "signature": "build123d.FilletPolyline.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.transformed",
                    "signature": "build123d.FilletPolyline.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.translate",
                    "signature": "build123d.FilletPolyline.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.FilletPolyline.trim",
                    "signature": "build123d.FilletPolyline.trim(self: 'Wire', start: 'float', end: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.vertex",
                    "signature": "build123d.FilletPolyline.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.FilletPolyline.vertices",
                    "signature": "build123d.FilletPolyline.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.FilletPolyline.wire",
                    "signature": "build123d.FilletPolyline.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.FilletPolyline.wires",
                    "signature": "build123d.FilletPolyline.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.FontStyle",
            "signature": "build123d.FontStyle()",
            "methods": [],
            "variables": [
                "BOLD",
                "ITALIC",
                "REGULAR",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.FrameMethod",
            "signature": "build123d.FrameMethod()",
            "methods": [],
            "variables": [
                "CORRECTED",
                "FRENET",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.GeomType",
            "signature": "build123d.GeomType()",
            "methods": [],
            "variables": [
                "BEZIER",
                "BSPLINE",
                "CIRCLE",
                "CONE",
                "CYLINDER",
                "ELLIPSE",
                "EXTRUSION",
                "HYPERBOLA",
                "LINE",
                "OFFSET",
                "OTHER",
                "PARABOLA",
                "PLANE",
                "REVOLUTION",
                "SPHERE",
                "TORUS",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.GridLocations",
            "signature": "build123d.GridLocations(x_spacing: 'float', y_spacing: 'float', x_count: 'int', y_count: 'int', align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>))",
            "methods": [],
            "variables": [
                "locations"
            ]
        },
        {
            "name": "build123d.GroupBy",
            "signature": "build123d.GroupBy(key_f: 'Callable[[T], K]', shapelist: 'Iterable[T]', *, reverse: 'bool' = False)",
            "methods": [
                {
                    "name": "build123d.GroupBy.group",
                    "signature": "build123d.GroupBy.group(self, key: 'K')"
                },
                {
                    "name": "build123d.GroupBy.group_for",
                    "signature": "build123d.GroupBy.group_for(self, shape: 'T')"
                }
            ],
            "variables": []
        },
        {
            "name": "build123d.HeadType",
            "signature": "build123d.HeadType()",
            "methods": [],
            "variables": [
                "CURVED",
                "FILLETED",
                "STRAIGHT",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Helix",
            "signature": "build123d.Helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), direction: 'VectorLike' = (0, 0, 1), cone_angle: 'float' = 0, lefthand: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Helix.bounding_box",
                    "signature": "build123d.Helix.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Helix.cast",
                    "signature": "build123d.Helix.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.center",
                    "signature": "build123d.Helix.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.clean",
                    "signature": "build123d.Helix.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.close",
                    "signature": "build123d.Helix.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Helix.closest_points",
                    "signature": "build123d.Helix.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Helix.combined_center",
                    "signature": "build123d.Helix.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.common_plane",
                    "signature": "build123d.Helix.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Helix.compound",
                    "signature": "build123d.Helix.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Helix.compounds",
                    "signature": "build123d.Helix.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Helix.compute_mass",
                    "signature": "build123d.Helix.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Helix.copy",
                    "signature": "build123d.Helix.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.copy_attributes_to",
                    "signature": "build123d.Helix.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Helix.cut",
                    "signature": "build123d.Helix.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.distance",
                    "signature": "build123d.Helix.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Helix.distance_to",
                    "signature": "build123d.Helix.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Helix.distance_to_with_closest_points",
                    "signature": "build123d.Helix.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Helix.distances",
                    "signature": "build123d.Helix.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Helix.distribute_locations",
                    "signature": "build123d.Helix.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Helix.edge",
                    "signature": "build123d.Helix.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.edges",
                    "signature": "build123d.Helix.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Helix.end_point",
                    "signature": "build123d.Helix.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.export_brep",
                    "signature": "build123d.Helix.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Helix.export_step",
                    "signature": "build123d.Helix.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Helix.export_stl",
                    "signature": "build123d.Helix.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Helix.extrude",
                    "signature": "build123d.Helix.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.face",
                    "signature": "build123d.Helix.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Helix.faces",
                    "signature": "build123d.Helix.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Helix.faces_intersected_by_axis",
                    "signature": "build123d.Helix.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Helix.find_intersection",
                    "signature": "build123d.Helix.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Helix.find_intersection_points",
                    "signature": "build123d.Helix.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.Helix.find_tangent",
                    "signature": "build123d.Helix.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.Helix.fix",
                    "signature": "build123d.Helix.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.fuse",
                    "signature": "build123d.Helix.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.hash_code",
                    "signature": "build123d.Helix.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Helix.intersect",
                    "signature": "build123d.Helix.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.Helix.is_equal",
                    "signature": "build123d.Helix.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Helix.is_null",
                    "signature": "build123d.Helix.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Helix.is_same",
                    "signature": "build123d.Helix.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Helix.is_valid",
                    "signature": "build123d.Helix.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Helix.iter_path_reverse",
                    "signature": "build123d.Helix.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Helix.locate",
                    "signature": "build123d.Helix.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.located",
                    "signature": "build123d.Helix.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.location_at",
                    "signature": "build123d.Helix.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Helix.locations",
                    "signature": "build123d.Helix.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Helix.make_bezier",
                    "signature": "build123d.Helix.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_circle",
                    "signature": "build123d.Helix.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_ellipse",
                    "signature": "build123d.Helix.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_helix",
                    "signature": "build123d.Helix.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Helix.make_line",
                    "signature": "build123d.Helix.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_mid_way",
                    "signature": "build123d.Helix.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_spline",
                    "signature": "build123d.Helix.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_spline_approx",
                    "signature": "build123d.Helix.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_tangent_arc",
                    "signature": "build123d.Helix.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.make_three_point_arc",
                    "signature": "build123d.Helix.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.mesh",
                    "signature": "build123d.Helix.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Helix.mirror",
                    "signature": "build123d.Helix.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.move",
                    "signature": "build123d.Helix.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.moved",
                    "signature": "build123d.Helix.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.normal",
                    "signature": "build123d.Helix.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.offset_2d",
                    "signature": "build123d.Helix.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Helix.param_at",
                    "signature": "build123d.Helix.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Helix.param_at_point",
                    "signature": "build123d.Helix.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Helix.perpendicular_line",
                    "signature": "build123d.Helix.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.position_at",
                    "signature": "build123d.Helix.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.positions",
                    "signature": "build123d.Helix.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Helix.project",
                    "signature": "build123d.Helix.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Helix.project_faces",
                    "signature": "build123d.Helix.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Helix.project_to_shape",
                    "signature": "build123d.Helix.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.Helix.project_to_viewport",
                    "signature": "build123d.Helix.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Helix.relocate",
                    "signature": "build123d.Helix.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Helix.reversed",
                    "signature": "build123d.Helix.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.rotate",
                    "signature": "build123d.Helix.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.scale",
                    "signature": "build123d.Helix.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.shape_type",
                    "signature": "build123d.Helix.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Helix.shell",
                    "signature": "build123d.Helix.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Helix.shells",
                    "signature": "build123d.Helix.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Helix.show_topology",
                    "signature": "build123d.Helix.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Helix.solid",
                    "signature": "build123d.Helix.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Helix.solids",
                    "signature": "build123d.Helix.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Helix.split",
                    "signature": "build123d.Helix.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.split_by_perimeter",
                    "signature": "build123d.Helix.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Helix.start_point",
                    "signature": "build123d.Helix.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.tangent_angle_at",
                    "signature": "build123d.Helix.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Helix.tangent_at",
                    "signature": "build123d.Helix.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Helix.tessellate",
                    "signature": "build123d.Helix.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Helix.to_arcs",
                    "signature": "build123d.Helix.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Helix.to_axis",
                    "signature": "build123d.Helix.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Helix.to_splines",
                    "signature": "build123d.Helix.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Helix.to_vtk_poly_data",
                    "signature": "build123d.Helix.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Helix.to_wire",
                    "signature": "build123d.Helix.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Helix.transform_geometry",
                    "signature": "build123d.Helix.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.transform_shape",
                    "signature": "build123d.Helix.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.transformed",
                    "signature": "build123d.Helix.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Helix.translate",
                    "signature": "build123d.Helix.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Helix.trim",
                    "signature": "build123d.Helix.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.trim_to_length",
                    "signature": "build123d.Helix.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Helix.vertex",
                    "signature": "build123d.Helix.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Helix.vertices",
                    "signature": "build123d.Helix.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Helix.wire",
                    "signature": "build123d.Helix.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Helix.wires",
                    "signature": "build123d.Helix.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.HexLocations",
            "signature": "build123d.HexLocations(radius: 'float', x_count: 'int', y_count: 'int', major_radius: 'bool' = False, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>))",
            "methods": [],
            "variables": [
                "locations"
            ]
        },
        {
            "name": "build123d.Hole",
            "signature": "build123d.Hole(radius: 'float', depth: 'float' = None, mode: 'Mode' = <Mode.SUBTRACT>)",
            "methods": [
                {
                    "name": "build123d.Hole.bounding_box",
                    "signature": "build123d.Hole.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Hole.cast",
                    "signature": "build123d.Hole.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.center",
                    "signature": "build123d.Hole.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Hole.chamfer",
                    "signature": "build123d.Hole.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.clean",
                    "signature": "build123d.Hole.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.closest_points",
                    "signature": "build123d.Hole.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Hole.combined_center",
                    "signature": "build123d.Hole.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Hole.compound",
                    "signature": "build123d.Hole.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.compounds",
                    "signature": "build123d.Hole.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Hole.compute_mass",
                    "signature": "build123d.Hole.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Hole.copy",
                    "signature": "build123d.Hole.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.copy_attributes_to",
                    "signature": "build123d.Hole.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Hole.cut",
                    "signature": "build123d.Hole.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.distance",
                    "signature": "build123d.Hole.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Hole.distance_to",
                    "signature": "build123d.Hole.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Hole.distance_to_with_closest_points",
                    "signature": "build123d.Hole.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Hole.distances",
                    "signature": "build123d.Hole.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Hole.do_children_intersect",
                    "signature": "build123d.Hole.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Hole.dprism",
                    "signature": "build123d.Hole.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Hole.edge",
                    "signature": "build123d.Hole.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Hole.edges",
                    "signature": "build123d.Hole.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Hole.export_brep",
                    "signature": "build123d.Hole.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Hole.export_step",
                    "signature": "build123d.Hole.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Hole.export_stl",
                    "signature": "build123d.Hole.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Hole.extrude",
                    "signature": "build123d.Hole.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.face",
                    "signature": "build123d.Hole.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Hole.faces",
                    "signature": "build123d.Hole.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Hole.faces_intersected_by_axis",
                    "signature": "build123d.Hole.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Hole.fillet",
                    "signature": "build123d.Hole.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.find_intersection",
                    "signature": "build123d.Hole.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Hole.find_intersection_points",
                    "signature": "build123d.Hole.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Hole.first_level_shapes",
                    "signature": "build123d.Hole.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Hole.fix",
                    "signature": "build123d.Hole.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.fuse",
                    "signature": "build123d.Hole.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.get_type",
                    "signature": "build123d.Hole.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Hole.hash_code",
                    "signature": "build123d.Hole.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Hole.hollow",
                    "signature": "build123d.Hole.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Hole.intersect",
                    "signature": "build123d.Hole.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.is_equal",
                    "signature": "build123d.Hole.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Hole.is_inside",
                    "signature": "build123d.Hole.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Hole.is_null",
                    "signature": "build123d.Hole.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Hole.is_same",
                    "signature": "build123d.Hole.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Hole.is_valid",
                    "signature": "build123d.Hole.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Hole.iter_path_reverse",
                    "signature": "build123d.Hole.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Hole.locate",
                    "signature": "build123d.Hole.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.located",
                    "signature": "build123d.Hole.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.make_compound",
                    "signature": "build123d.Hole.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.make_text",
                    "signature": "build123d.Hole.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Hole.make_triad",
                    "signature": "build123d.Hole.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.max_fillet",
                    "signature": "build123d.Hole.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Hole.mesh",
                    "signature": "build123d.Hole.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Hole.mirror",
                    "signature": "build123d.Hole.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.move",
                    "signature": "build123d.Hole.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.moved",
                    "signature": "build123d.Hole.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.offset_3d",
                    "signature": "build123d.Hole.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Hole.project_faces",
                    "signature": "build123d.Hole.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Hole.project_to_viewport",
                    "signature": "build123d.Hole.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Hole.relocate",
                    "signature": "build123d.Hole.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Hole.rotate",
                    "signature": "build123d.Hole.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.scale",
                    "signature": "build123d.Hole.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.shape_type",
                    "signature": "build123d.Hole.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Hole.shell",
                    "signature": "build123d.Hole.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Hole.shells",
                    "signature": "build123d.Hole.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Hole.show_topology",
                    "signature": "build123d.Hole.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Hole.solid",
                    "signature": "build123d.Hole.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Hole.solids",
                    "signature": "build123d.Hole.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Hole.split",
                    "signature": "build123d.Hole.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.split_by_perimeter",
                    "signature": "build123d.Hole.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Hole.tessellate",
                    "signature": "build123d.Hole.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Hole.to_arcs",
                    "signature": "build123d.Hole.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Hole.to_splines",
                    "signature": "build123d.Hole.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Hole.to_vtk_poly_data",
                    "signature": "build123d.Hole.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Hole.transform_geometry",
                    "signature": "build123d.Hole.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.transform_shape",
                    "signature": "build123d.Hole.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.transformed",
                    "signature": "build123d.Hole.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Hole.translate",
                    "signature": "build123d.Hole.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Hole.unwrap",
                    "signature": "build123d.Hole.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Hole.vertex",
                    "signature": "build123d.Hole.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Hole.vertices",
                    "signature": "build123d.Hole.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Hole.wire",
                    "signature": "build123d.Hole.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Hole.wires",
                    "signature": "build123d.Hole.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.IntersectingLine",
            "signature": "build123d.IntersectingLine(start: 'VectorLike', direction: 'VectorLike', other: 'Union[Curve, Edge, Wire]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.IntersectingLine.bounding_box",
                    "signature": "build123d.IntersectingLine.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.IntersectingLine.cast",
                    "signature": "build123d.IntersectingLine.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.center",
                    "signature": "build123d.IntersectingLine.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.clean",
                    "signature": "build123d.IntersectingLine.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.close",
                    "signature": "build123d.IntersectingLine.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.IntersectingLine.closest_points",
                    "signature": "build123d.IntersectingLine.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.IntersectingLine.combined_center",
                    "signature": "build123d.IntersectingLine.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.common_plane",
                    "signature": "build123d.IntersectingLine.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.IntersectingLine.compound",
                    "signature": "build123d.IntersectingLine.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.IntersectingLine.compounds",
                    "signature": "build123d.IntersectingLine.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.IntersectingLine.compute_mass",
                    "signature": "build123d.IntersectingLine.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.IntersectingLine.copy",
                    "signature": "build123d.IntersectingLine.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.copy_attributes_to",
                    "signature": "build123d.IntersectingLine.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.IntersectingLine.cut",
                    "signature": "build123d.IntersectingLine.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.distance",
                    "signature": "build123d.IntersectingLine.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.IntersectingLine.distance_to",
                    "signature": "build123d.IntersectingLine.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.IntersectingLine.distance_to_with_closest_points",
                    "signature": "build123d.IntersectingLine.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.IntersectingLine.distances",
                    "signature": "build123d.IntersectingLine.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.IntersectingLine.distribute_locations",
                    "signature": "build123d.IntersectingLine.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.IntersectingLine.edge",
                    "signature": "build123d.IntersectingLine.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.edges",
                    "signature": "build123d.IntersectingLine.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.IntersectingLine.end_point",
                    "signature": "build123d.IntersectingLine.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.export_brep",
                    "signature": "build123d.IntersectingLine.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.IntersectingLine.export_step",
                    "signature": "build123d.IntersectingLine.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.IntersectingLine.export_stl",
                    "signature": "build123d.IntersectingLine.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.IntersectingLine.extrude",
                    "signature": "build123d.IntersectingLine.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.face",
                    "signature": "build123d.IntersectingLine.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.IntersectingLine.faces",
                    "signature": "build123d.IntersectingLine.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.IntersectingLine.faces_intersected_by_axis",
                    "signature": "build123d.IntersectingLine.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.IntersectingLine.find_intersection",
                    "signature": "build123d.IntersectingLine.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.IntersectingLine.find_intersection_points",
                    "signature": "build123d.IntersectingLine.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.IntersectingLine.find_tangent",
                    "signature": "build123d.IntersectingLine.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.IntersectingLine.fix",
                    "signature": "build123d.IntersectingLine.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.fuse",
                    "signature": "build123d.IntersectingLine.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.hash_code",
                    "signature": "build123d.IntersectingLine.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.IntersectingLine.intersect",
                    "signature": "build123d.IntersectingLine.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.IntersectingLine.is_equal",
                    "signature": "build123d.IntersectingLine.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.IntersectingLine.is_null",
                    "signature": "build123d.IntersectingLine.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.IntersectingLine.is_same",
                    "signature": "build123d.IntersectingLine.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.IntersectingLine.is_valid",
                    "signature": "build123d.IntersectingLine.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.IntersectingLine.iter_path_reverse",
                    "signature": "build123d.IntersectingLine.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.IntersectingLine.locate",
                    "signature": "build123d.IntersectingLine.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.located",
                    "signature": "build123d.IntersectingLine.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.location_at",
                    "signature": "build123d.IntersectingLine.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.IntersectingLine.locations",
                    "signature": "build123d.IntersectingLine.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.IntersectingLine.make_bezier",
                    "signature": "build123d.IntersectingLine.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_circle",
                    "signature": "build123d.IntersectingLine.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_ellipse",
                    "signature": "build123d.IntersectingLine.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_helix",
                    "signature": "build123d.IntersectingLine.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.IntersectingLine.make_line",
                    "signature": "build123d.IntersectingLine.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_mid_way",
                    "signature": "build123d.IntersectingLine.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_spline",
                    "signature": "build123d.IntersectingLine.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_spline_approx",
                    "signature": "build123d.IntersectingLine.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_tangent_arc",
                    "signature": "build123d.IntersectingLine.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.make_three_point_arc",
                    "signature": "build123d.IntersectingLine.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.mesh",
                    "signature": "build123d.IntersectingLine.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.IntersectingLine.mirror",
                    "signature": "build123d.IntersectingLine.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.move",
                    "signature": "build123d.IntersectingLine.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.moved",
                    "signature": "build123d.IntersectingLine.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.normal",
                    "signature": "build123d.IntersectingLine.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.offset_2d",
                    "signature": "build123d.IntersectingLine.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.IntersectingLine.param_at",
                    "signature": "build123d.IntersectingLine.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.IntersectingLine.param_at_point",
                    "signature": "build123d.IntersectingLine.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.IntersectingLine.perpendicular_line",
                    "signature": "build123d.IntersectingLine.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.position_at",
                    "signature": "build123d.IntersectingLine.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.positions",
                    "signature": "build123d.IntersectingLine.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.IntersectingLine.project",
                    "signature": "build123d.IntersectingLine.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.IntersectingLine.project_faces",
                    "signature": "build123d.IntersectingLine.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.IntersectingLine.project_to_shape",
                    "signature": "build123d.IntersectingLine.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.IntersectingLine.project_to_viewport",
                    "signature": "build123d.IntersectingLine.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.IntersectingLine.relocate",
                    "signature": "build123d.IntersectingLine.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.IntersectingLine.reversed",
                    "signature": "build123d.IntersectingLine.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.rotate",
                    "signature": "build123d.IntersectingLine.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.scale",
                    "signature": "build123d.IntersectingLine.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.shape_type",
                    "signature": "build123d.IntersectingLine.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.IntersectingLine.shell",
                    "signature": "build123d.IntersectingLine.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.IntersectingLine.shells",
                    "signature": "build123d.IntersectingLine.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.IntersectingLine.show_topology",
                    "signature": "build123d.IntersectingLine.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.IntersectingLine.solid",
                    "signature": "build123d.IntersectingLine.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.IntersectingLine.solids",
                    "signature": "build123d.IntersectingLine.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.IntersectingLine.split",
                    "signature": "build123d.IntersectingLine.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.split_by_perimeter",
                    "signature": "build123d.IntersectingLine.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.IntersectingLine.start_point",
                    "signature": "build123d.IntersectingLine.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.tangent_angle_at",
                    "signature": "build123d.IntersectingLine.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.IntersectingLine.tangent_at",
                    "signature": "build123d.IntersectingLine.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.IntersectingLine.tessellate",
                    "signature": "build123d.IntersectingLine.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.IntersectingLine.to_arcs",
                    "signature": "build123d.IntersectingLine.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.IntersectingLine.to_axis",
                    "signature": "build123d.IntersectingLine.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.IntersectingLine.to_splines",
                    "signature": "build123d.IntersectingLine.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.IntersectingLine.to_vtk_poly_data",
                    "signature": "build123d.IntersectingLine.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.IntersectingLine.to_wire",
                    "signature": "build123d.IntersectingLine.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.IntersectingLine.transform_geometry",
                    "signature": "build123d.IntersectingLine.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.transform_shape",
                    "signature": "build123d.IntersectingLine.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.transformed",
                    "signature": "build123d.IntersectingLine.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.translate",
                    "signature": "build123d.IntersectingLine.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.IntersectingLine.trim",
                    "signature": "build123d.IntersectingLine.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.trim_to_length",
                    "signature": "build123d.IntersectingLine.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.IntersectingLine.vertex",
                    "signature": "build123d.IntersectingLine.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.IntersectingLine.vertices",
                    "signature": "build123d.IntersectingLine.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.IntersectingLine.wire",
                    "signature": "build123d.IntersectingLine.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.IntersectingLine.wires",
                    "signature": "build123d.IntersectingLine.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Intrinsic",
            "signature": "build123d.Intrinsic()",
            "methods": [],
            "variables": [
                "XYX",
                "XYZ",
                "XZX",
                "XZY",
                "YXY",
                "YXZ",
                "YZX",
                "YZY",
                "ZXY",
                "ZXZ",
                "ZYX",
                "ZYZ",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.JernArc",
            "signature": "build123d.JernArc(start: 'VectorLike', tangent: 'VectorLike', radius: 'float', arc_size: 'float', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.JernArc.bounding_box",
                    "signature": "build123d.JernArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.JernArc.cast",
                    "signature": "build123d.JernArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.center",
                    "signature": "build123d.JernArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.clean",
                    "signature": "build123d.JernArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.close",
                    "signature": "build123d.JernArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.JernArc.closest_points",
                    "signature": "build123d.JernArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.JernArc.combined_center",
                    "signature": "build123d.JernArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.common_plane",
                    "signature": "build123d.JernArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.JernArc.compound",
                    "signature": "build123d.JernArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.JernArc.compounds",
                    "signature": "build123d.JernArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.JernArc.compute_mass",
                    "signature": "build123d.JernArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.JernArc.copy",
                    "signature": "build123d.JernArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.copy_attributes_to",
                    "signature": "build123d.JernArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.JernArc.cut",
                    "signature": "build123d.JernArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.distance",
                    "signature": "build123d.JernArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.JernArc.distance_to",
                    "signature": "build123d.JernArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.JernArc.distance_to_with_closest_points",
                    "signature": "build123d.JernArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.JernArc.distances",
                    "signature": "build123d.JernArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.JernArc.distribute_locations",
                    "signature": "build123d.JernArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.JernArc.edge",
                    "signature": "build123d.JernArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.edges",
                    "signature": "build123d.JernArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.JernArc.end_point",
                    "signature": "build123d.JernArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.export_brep",
                    "signature": "build123d.JernArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.JernArc.export_step",
                    "signature": "build123d.JernArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.JernArc.export_stl",
                    "signature": "build123d.JernArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.JernArc.extrude",
                    "signature": "build123d.JernArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.face",
                    "signature": "build123d.JernArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.JernArc.faces",
                    "signature": "build123d.JernArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.JernArc.faces_intersected_by_axis",
                    "signature": "build123d.JernArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.JernArc.find_intersection",
                    "signature": "build123d.JernArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.JernArc.find_intersection_points",
                    "signature": "build123d.JernArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.JernArc.find_tangent",
                    "signature": "build123d.JernArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.JernArc.fix",
                    "signature": "build123d.JernArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.fuse",
                    "signature": "build123d.JernArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.hash_code",
                    "signature": "build123d.JernArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.JernArc.intersect",
                    "signature": "build123d.JernArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.JernArc.is_equal",
                    "signature": "build123d.JernArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.JernArc.is_null",
                    "signature": "build123d.JernArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.JernArc.is_same",
                    "signature": "build123d.JernArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.JernArc.is_valid",
                    "signature": "build123d.JernArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.JernArc.iter_path_reverse",
                    "signature": "build123d.JernArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.JernArc.locate",
                    "signature": "build123d.JernArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.located",
                    "signature": "build123d.JernArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.location_at",
                    "signature": "build123d.JernArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.JernArc.locations",
                    "signature": "build123d.JernArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.JernArc.make_bezier",
                    "signature": "build123d.JernArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_circle",
                    "signature": "build123d.JernArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_ellipse",
                    "signature": "build123d.JernArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_helix",
                    "signature": "build123d.JernArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.JernArc.make_line",
                    "signature": "build123d.JernArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_mid_way",
                    "signature": "build123d.JernArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_spline",
                    "signature": "build123d.JernArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_spline_approx",
                    "signature": "build123d.JernArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_tangent_arc",
                    "signature": "build123d.JernArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.make_three_point_arc",
                    "signature": "build123d.JernArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.mesh",
                    "signature": "build123d.JernArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.JernArc.mirror",
                    "signature": "build123d.JernArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.move",
                    "signature": "build123d.JernArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.moved",
                    "signature": "build123d.JernArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.normal",
                    "signature": "build123d.JernArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.offset_2d",
                    "signature": "build123d.JernArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.JernArc.param_at",
                    "signature": "build123d.JernArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.JernArc.param_at_point",
                    "signature": "build123d.JernArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.JernArc.perpendicular_line",
                    "signature": "build123d.JernArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.position_at",
                    "signature": "build123d.JernArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.positions",
                    "signature": "build123d.JernArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.JernArc.project",
                    "signature": "build123d.JernArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.JernArc.project_faces",
                    "signature": "build123d.JernArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.JernArc.project_to_shape",
                    "signature": "build123d.JernArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.JernArc.project_to_viewport",
                    "signature": "build123d.JernArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.JernArc.relocate",
                    "signature": "build123d.JernArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.JernArc.reversed",
                    "signature": "build123d.JernArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.rotate",
                    "signature": "build123d.JernArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.scale",
                    "signature": "build123d.JernArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.shape_type",
                    "signature": "build123d.JernArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.JernArc.shell",
                    "signature": "build123d.JernArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.JernArc.shells",
                    "signature": "build123d.JernArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.JernArc.show_topology",
                    "signature": "build123d.JernArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.JernArc.solid",
                    "signature": "build123d.JernArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.JernArc.solids",
                    "signature": "build123d.JernArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.JernArc.split",
                    "signature": "build123d.JernArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.split_by_perimeter",
                    "signature": "build123d.JernArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.JernArc.start_point",
                    "signature": "build123d.JernArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.tangent_angle_at",
                    "signature": "build123d.JernArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.JernArc.tangent_at",
                    "signature": "build123d.JernArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.JernArc.tessellate",
                    "signature": "build123d.JernArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.JernArc.to_arcs",
                    "signature": "build123d.JernArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.JernArc.to_axis",
                    "signature": "build123d.JernArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.JernArc.to_splines",
                    "signature": "build123d.JernArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.JernArc.to_vtk_poly_data",
                    "signature": "build123d.JernArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.JernArc.to_wire",
                    "signature": "build123d.JernArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.JernArc.transform_geometry",
                    "signature": "build123d.JernArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.transform_shape",
                    "signature": "build123d.JernArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.transformed",
                    "signature": "build123d.JernArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.translate",
                    "signature": "build123d.JernArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.JernArc.trim",
                    "signature": "build123d.JernArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.trim_to_length",
                    "signature": "build123d.JernArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.JernArc.vertex",
                    "signature": "build123d.JernArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.JernArc.vertices",
                    "signature": "build123d.JernArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.JernArc.wire",
                    "signature": "build123d.JernArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.JernArc.wires",
                    "signature": "build123d.JernArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Joint",
            "signature": "build123d.Joint(label: 'str', parent: 'Union[Solid, Compound]')",
            "methods": [
                {
                    "name": "build123d.Joint.connect_to",
                    "signature": "build123d.Joint.connect_to(self, other: 'Joint')"
                },
                {
                    "name": "build123d.Joint.relative_to",
                    "signature": "build123d.Joint.relative_to(self, other: 'Joint') -> 'Location'"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ]
        },
        {
            "name": "build123d.Keep",
            "signature": "build123d.Keep()",
            "methods": [],
            "variables": [
                "BOTH",
                "BOTTOM",
                "INSIDE",
                "OUTSIDE",
                "TOP",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Kind",
            "signature": "build123d.Kind()",
            "methods": [],
            "variables": [
                "ARC",
                "INTERSECTION",
                "TANGENT",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.LengthMode",
            "signature": "build123d.LengthMode()",
            "methods": [],
            "variables": [
                "DIAGONAL",
                "HORIZONTAL",
                "VERTICAL",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Line",
            "signature": "build123d.Line(*pts: 'Union[VectorLike, Iterable[VectorLike]]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Line.bounding_box",
                    "signature": "build123d.Line.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Line.cast",
                    "signature": "build123d.Line.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Line.center",
                    "signature": "build123d.Line.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.clean",
                    "signature": "build123d.Line.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Line.close",
                    "signature": "build123d.Line.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Line.closest_points",
                    "signature": "build123d.Line.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Line.combined_center",
                    "signature": "build123d.Line.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.common_plane",
                    "signature": "build123d.Line.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Line.compound",
                    "signature": "build123d.Line.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Line.compounds",
                    "signature": "build123d.Line.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Line.compute_mass",
                    "signature": "build123d.Line.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Line.copy",
                    "signature": "build123d.Line.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Line.copy_attributes_to",
                    "signature": "build123d.Line.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Line.cut",
                    "signature": "build123d.Line.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Line.distance",
                    "signature": "build123d.Line.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Line.distance_to",
                    "signature": "build123d.Line.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Line.distance_to_with_closest_points",
                    "signature": "build123d.Line.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Line.distances",
                    "signature": "build123d.Line.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Line.distribute_locations",
                    "signature": "build123d.Line.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Line.edge",
                    "signature": "build123d.Line.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.edges",
                    "signature": "build123d.Line.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Line.end_point",
                    "signature": "build123d.Line.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.export_brep",
                    "signature": "build123d.Line.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Line.export_step",
                    "signature": "build123d.Line.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Line.export_stl",
                    "signature": "build123d.Line.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Line.extrude",
                    "signature": "build123d.Line.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Line.face",
                    "signature": "build123d.Line.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Line.faces",
                    "signature": "build123d.Line.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Line.faces_intersected_by_axis",
                    "signature": "build123d.Line.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Line.find_intersection",
                    "signature": "build123d.Line.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Line.find_intersection_points",
                    "signature": "build123d.Line.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.Line.find_tangent",
                    "signature": "build123d.Line.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.Line.fix",
                    "signature": "build123d.Line.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Line.fuse",
                    "signature": "build123d.Line.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Line.hash_code",
                    "signature": "build123d.Line.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Line.intersect",
                    "signature": "build123d.Line.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.Line.is_equal",
                    "signature": "build123d.Line.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Line.is_null",
                    "signature": "build123d.Line.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Line.is_same",
                    "signature": "build123d.Line.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Line.is_valid",
                    "signature": "build123d.Line.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Line.iter_path_reverse",
                    "signature": "build123d.Line.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Line.locate",
                    "signature": "build123d.Line.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Line.located",
                    "signature": "build123d.Line.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Line.location_at",
                    "signature": "build123d.Line.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Line.locations",
                    "signature": "build123d.Line.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Line.make_bezier",
                    "signature": "build123d.Line.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_circle",
                    "signature": "build123d.Line.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_ellipse",
                    "signature": "build123d.Line.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_helix",
                    "signature": "build123d.Line.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Line.make_line",
                    "signature": "build123d.Line.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_mid_way",
                    "signature": "build123d.Line.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_spline",
                    "signature": "build123d.Line.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_spline_approx",
                    "signature": "build123d.Line.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_tangent_arc",
                    "signature": "build123d.Line.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Line.make_three_point_arc",
                    "signature": "build123d.Line.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Line.mesh",
                    "signature": "build123d.Line.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Line.mirror",
                    "signature": "build123d.Line.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Line.move",
                    "signature": "build123d.Line.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Line.moved",
                    "signature": "build123d.Line.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Line.normal",
                    "signature": "build123d.Line.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.offset_2d",
                    "signature": "build123d.Line.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Line.param_at",
                    "signature": "build123d.Line.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Line.param_at_point",
                    "signature": "build123d.Line.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Line.perpendicular_line",
                    "signature": "build123d.Line.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.position_at",
                    "signature": "build123d.Line.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.positions",
                    "signature": "build123d.Line.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Line.project",
                    "signature": "build123d.Line.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Line.project_faces",
                    "signature": "build123d.Line.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Line.project_to_shape",
                    "signature": "build123d.Line.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.Line.project_to_viewport",
                    "signature": "build123d.Line.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Line.relocate",
                    "signature": "build123d.Line.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Line.reversed",
                    "signature": "build123d.Line.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Line.rotate",
                    "signature": "build123d.Line.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Line.scale",
                    "signature": "build123d.Line.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Line.shape_type",
                    "signature": "build123d.Line.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Line.shell",
                    "signature": "build123d.Line.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Line.shells",
                    "signature": "build123d.Line.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Line.show_topology",
                    "signature": "build123d.Line.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Line.solid",
                    "signature": "build123d.Line.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Line.solids",
                    "signature": "build123d.Line.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Line.split",
                    "signature": "build123d.Line.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Line.split_by_perimeter",
                    "signature": "build123d.Line.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Line.start_point",
                    "signature": "build123d.Line.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.tangent_angle_at",
                    "signature": "build123d.Line.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Line.tangent_at",
                    "signature": "build123d.Line.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Line.tessellate",
                    "signature": "build123d.Line.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Line.to_arcs",
                    "signature": "build123d.Line.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Line.to_axis",
                    "signature": "build123d.Line.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Line.to_splines",
                    "signature": "build123d.Line.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Line.to_vtk_poly_data",
                    "signature": "build123d.Line.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Line.to_wire",
                    "signature": "build123d.Line.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Line.transform_geometry",
                    "signature": "build123d.Line.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Line.transform_shape",
                    "signature": "build123d.Line.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Line.transformed",
                    "signature": "build123d.Line.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Line.translate",
                    "signature": "build123d.Line.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Line.trim",
                    "signature": "build123d.Line.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Line.trim_to_length",
                    "signature": "build123d.Line.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Line.vertex",
                    "signature": "build123d.Line.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Line.vertices",
                    "signature": "build123d.Line.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Line.wire",
                    "signature": "build123d.Line.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Line.wires",
                    "signature": "build123d.Line.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.LineType",
            "signature": "build123d.LineType()",
            "methods": [],
            "variables": [
                "BORDER",
                "BORDER2",
                "BORDERX2",
                "CENTER",
                "CENTER2",
                "CENTERX2",
                "CONTINUOUS",
                "DASHDOT",
                "DASHDOT2",
                "DASHDOTX2",
                "DASHED",
                "DASHED2",
                "DASHEDX2",
                "DIVIDE",
                "DIVIDE2",
                "DIVIDEX2",
                "DOT",
                "DOT2",
                "DOTX2",
                "HIDDEN",
                "HIDDEN2",
                "HIDDENX2",
                "ISO_DASH",
                "ISO_DASH_DOT",
                "ISO_DASH_DOUBLE_DOT",
                "ISO_DASH_SPACE",
                "ISO_DASH_TRIPLE_DOT",
                "ISO_DOT",
                "ISO_DOUBLE_DASH_DOT",
                "ISO_DOUBLE_DASH_DOUBLE_DOT",
                "ISO_DOUBLE_DASH_TRIPLE_DOT",
                "ISO_LONG_DASH_DOT",
                "ISO_LONG_DASH_DOUBLE_DOT",
                "ISO_LONG_DASH_DOUBLE_SHORT_DASH",
                "ISO_LONG_DASH_SHORT_DASH",
                "ISO_LONG_DASH_TRIPLE_DOT",
                "PHANTOM",
                "PHANTOM2",
                "PHANTOMX2"
            ]
        },
        {
            "name": "build123d.LinearJoint",
            "signature": "build123d.LinearJoint(label: 'str', to_part: 'Union[Solid, Compound]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), linear_range: 'tuple[float, float]' = (0, inf))",
            "methods": [
                {
                    "name": "build123d.LinearJoint.connect_to",
                    "signature": "build123d.LinearJoint.connect_to(self, other: 'Joint', **kwargs)"
                },
                {
                    "name": "build123d.LinearJoint.relative_to",
                    "signature": "build123d.LinearJoint.relative_to(self, other, **kwargs)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ]
        },
        {
            "name": "build123d.Location",
            "signature": "build123d.Location(*args)",
            "methods": [
                {
                    "name": "build123d.Location.intersect",
                    "signature": "build123d.Location.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Location.inverse",
                    "signature": "build123d.Location.inverse(self) -> 'Location'"
                },
                {
                    "name": "build123d.Location.to_axis",
                    "signature": "build123d.Location.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Location.to_tuple",
                    "signature": "build123d.Location.to_tuple(self) -> 'tuple[tuple[float, float, float], tuple[float, float, float]]'"
                }
            ],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ]
        },
        {
            "name": "build123d.LocationEncoder",
            "signature": "build123d.LocationEncoder()",
            "methods": [
                {
                    "name": "build123d.LocationEncoder.default",
                    "signature": "build123d.LocationEncoder.default(self, o: 'Location') -> 'dict'"
                },
                {
                    "name": "build123d.LocationEncoder.encode",
                    "signature": "build123d.LocationEncoder.encode(self, o)"
                },
                {
                    "name": "build123d.LocationEncoder.iterencode",
                    "signature": "build123d.LocationEncoder.iterencode(self, o, _one_shot=False)"
                },
                {
                    "name": "build123d.LocationEncoder.location_hook",
                    "signature": "build123d.LocationEncoder.location_hook(obj) -> 'dict'"
                }
            ],
            "variables": [
                "item_separator",
                "key_separator"
            ]
        },
        {
            "name": "build123d.LocationList",
            "signature": "build123d.LocationList(locations: 'list[Location]')",
            "methods": [],
            "variables": [
                "locations"
            ]
        },
        {
            "name": "build123d.Locations",
            "signature": "build123d.Locations(*pts: 'Union[VectorLike, Vertex, Location, Face, Plane, Axis, Iterable[VectorLike, Vertex, Location, Face, Plane, Axis]]')",
            "methods": [],
            "variables": [
                "locations"
            ]
        },
        {
            "name": "build123d.Matrix",
            "signature": "build123d.Matrix(matrix=None)",
            "methods": [
                {
                    "name": "build123d.Matrix.inverse",
                    "signature": "build123d.Matrix.inverse(self) -> 'Matrix'"
                },
                {
                    "name": "build123d.Matrix.multiply",
                    "signature": "build123d.Matrix.multiply(self, other)"
                },
                {
                    "name": "build123d.Matrix.rotate",
                    "signature": "build123d.Matrix.rotate(self, axis: 'Axis', angle: 'float')"
                },
                {
                    "name": "build123d.Matrix.transposed_list",
                    "signature": "build123d.Matrix.transposed_list(self) -> 'Sequence[float]'"
                }
            ],
            "variables": []
        },
        {
            "name": "build123d.MeshType",
            "signature": "build123d.MeshType()",
            "methods": [],
            "variables": [
                "MODEL",
                "OTHER",
                "SOLIDSUPPORT",
                "SUPPORT",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Mesher",
            "signature": "build123d.Mesher(unit: build123d.build_enums.Unit = <Unit.MM>)",
            "methods": [
                {
                    "name": "build123d.Mesher.add_code_to_metadata",
                    "signature": "build123d.Mesher.add_code_to_metadata(self)"
                },
                {
                    "name": "build123d.Mesher.add_meta_data",
                    "signature": "build123d.Mesher.add_meta_data(self, name_space: str, name: str, value: str, metadata_type: str, must_preserve: bool)"
                },
                {
                    "name": "build123d.Mesher.add_shape",
                    "signature": "build123d.Mesher.add_shape(self, shape: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]], linear_deflection: float = 0.001, angular_deflection: float = 0.1, mesh_type: build123d.build_enums.MeshType = <MeshType.MODEL>, part_number: str = None, uuid_value: <module 'uuid' from '/home/pding/mambaforge/envs/codecad/lib/python3.11/uuid.py'> = None)"
                },
                {
                    "name": "build123d.Mesher.get_mesh_properties",
                    "signature": "build123d.Mesher.get_mesh_properties(self) -> list[dict]"
                },
                {
                    "name": "build123d.Mesher.get_meta_data",
                    "signature": "build123d.Mesher.get_meta_data(self) -> list[dict]"
                },
                {
                    "name": "build123d.Mesher.get_meta_data_by_key",
                    "signature": "build123d.Mesher.get_meta_data_by_key(self, name_space: str, name: str) -> dict"
                },
                {
                    "name": "build123d.Mesher.read",
                    "signature": "build123d.Mesher.read(self, file_name: Union[os.PathLike, str, bytes]) -> list[build123d.topology.Shape]"
                },
                {
                    "name": "build123d.Mesher.write",
                    "signature": "build123d.Mesher.write(self, file_name: Union[os.PathLike, str, bytes])"
                }
            ],
            "variables": [
                "library_version",
                "mesh_count",
                "model_unit",
                "triangle_counts",
                "vertex_counts"
            ]
        },
        {
            "name": "build123d.Mixin1D",
            "signature": "build123d.Mixin1D()",
            "methods": [
                {
                    "name": "build123d.Mixin1D.center",
                    "signature": "build123d.Mixin1D.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.common_plane",
                    "signature": "build123d.Mixin1D.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Mixin1D.end_point",
                    "signature": "build123d.Mixin1D.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.location_at",
                    "signature": "build123d.Mixin1D.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Mixin1D.locations",
                    "signature": "build123d.Mixin1D.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Mixin1D.normal",
                    "signature": "build123d.Mixin1D.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.offset_2d",
                    "signature": "build123d.Mixin1D.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Mixin1D.param_at",
                    "signature": "build123d.Mixin1D.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Mixin1D.perpendicular_line",
                    "signature": "build123d.Mixin1D.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Mixin1D.position_at",
                    "signature": "build123d.Mixin1D.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.positions",
                    "signature": "build123d.Mixin1D.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Mixin1D.project",
                    "signature": "build123d.Mixin1D.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Mixin1D.start_point",
                    "signature": "build123d.Mixin1D.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin1D.tangent_angle_at",
                    "signature": "build123d.Mixin1D.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Mixin1D.tangent_at",
                    "signature": "build123d.Mixin1D.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                }
            ],
            "variables": [
                "is_closed",
                "is_forward",
                "length",
                "radius",
                "volume"
            ]
        },
        {
            "name": "build123d.Mixin3D",
            "signature": "build123d.Mixin3D()",
            "methods": [
                {
                    "name": "build123d.Mixin3D.center",
                    "signature": "build123d.Mixin3D.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Mixin3D.chamfer",
                    "signature": "build123d.Mixin3D.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Mixin3D.dprism",
                    "signature": "build123d.Mixin3D.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Mixin3D.fillet",
                    "signature": "build123d.Mixin3D.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Mixin3D.hollow",
                    "signature": "build123d.Mixin3D.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Mixin3D.is_inside",
                    "signature": "build123d.Mixin3D.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Mixin3D.max_fillet",
                    "signature": "build123d.Mixin3D.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Mixin3D.offset_3d",
                    "signature": "build123d.Mixin3D.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                }
            ],
            "variables": []
        },
        {
            "name": "build123d.Mode",
            "signature": "build123d.Mode()",
            "methods": [],
            "variables": [
                "ADD",
                "INTERSECT",
                "PRIVATE",
                "REPLACE",
                "SUBTRACT",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.NumberDisplay",
            "signature": "build123d.NumberDisplay()",
            "methods": [],
            "variables": [
                "DECIMAL",
                "FRACTION",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.PageSize",
            "signature": "build123d.PageSize()",
            "methods": [],
            "variables": [
                "A0",
                "A1",
                "A10",
                "A2",
                "A3",
                "A4",
                "A5",
                "A6",
                "A7",
                "A8",
                "A9",
                "LEDGER",
                "LEGAL",
                "LETTER",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Part",
            "signature": "build123d.Part()",
            "methods": [
                {
                    "name": "build123d.Part.bounding_box",
                    "signature": "build123d.Part.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Part.cast",
                    "signature": "build123d.Part.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Part.center",
                    "signature": "build123d.Part.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Part.chamfer",
                    "signature": "build123d.Part.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Part.clean",
                    "signature": "build123d.Part.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Part.closest_points",
                    "signature": "build123d.Part.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Part.combined_center",
                    "signature": "build123d.Part.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Part.compound",
                    "signature": "build123d.Part.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Part.compounds",
                    "signature": "build123d.Part.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Part.compute_mass",
                    "signature": "build123d.Part.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Part.copy",
                    "signature": "build123d.Part.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Part.copy_attributes_to",
                    "signature": "build123d.Part.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Part.cut",
                    "signature": "build123d.Part.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Part.distance",
                    "signature": "build123d.Part.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Part.distance_to",
                    "signature": "build123d.Part.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Part.distance_to_with_closest_points",
                    "signature": "build123d.Part.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Part.distances",
                    "signature": "build123d.Part.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Part.do_children_intersect",
                    "signature": "build123d.Part.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Part.dprism",
                    "signature": "build123d.Part.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Part.edge",
                    "signature": "build123d.Part.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Part.edges",
                    "signature": "build123d.Part.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Part.export_brep",
                    "signature": "build123d.Part.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Part.export_step",
                    "signature": "build123d.Part.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Part.export_stl",
                    "signature": "build123d.Part.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Part.extrude",
                    "signature": "build123d.Part.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Part.face",
                    "signature": "build123d.Part.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Part.faces",
                    "signature": "build123d.Part.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Part.faces_intersected_by_axis",
                    "signature": "build123d.Part.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Part.fillet",
                    "signature": "build123d.Part.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Part.find_intersection",
                    "signature": "build123d.Part.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Part.find_intersection_points",
                    "signature": "build123d.Part.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Part.first_level_shapes",
                    "signature": "build123d.Part.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Part.fix",
                    "signature": "build123d.Part.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Part.fuse",
                    "signature": "build123d.Part.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Part.get_type",
                    "signature": "build123d.Part.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Part.hash_code",
                    "signature": "build123d.Part.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Part.hollow",
                    "signature": "build123d.Part.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Part.intersect",
                    "signature": "build123d.Part.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Part.is_equal",
                    "signature": "build123d.Part.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Part.is_inside",
                    "signature": "build123d.Part.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Part.is_null",
                    "signature": "build123d.Part.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Part.is_same",
                    "signature": "build123d.Part.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Part.is_valid",
                    "signature": "build123d.Part.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Part.iter_path_reverse",
                    "signature": "build123d.Part.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Part.locate",
                    "signature": "build123d.Part.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Part.located",
                    "signature": "build123d.Part.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Part.make_compound",
                    "signature": "build123d.Part.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Part.make_text",
                    "signature": "build123d.Part.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Part.make_triad",
                    "signature": "build123d.Part.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Part.max_fillet",
                    "signature": "build123d.Part.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Part.mesh",
                    "signature": "build123d.Part.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Part.mirror",
                    "signature": "build123d.Part.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Part.move",
                    "signature": "build123d.Part.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Part.moved",
                    "signature": "build123d.Part.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Part.offset_3d",
                    "signature": "build123d.Part.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Part.project_faces",
                    "signature": "build123d.Part.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Part.project_to_viewport",
                    "signature": "build123d.Part.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Part.relocate",
                    "signature": "build123d.Part.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Part.rotate",
                    "signature": "build123d.Part.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Part.scale",
                    "signature": "build123d.Part.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Part.shape_type",
                    "signature": "build123d.Part.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Part.shell",
                    "signature": "build123d.Part.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Part.shells",
                    "signature": "build123d.Part.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Part.show_topology",
                    "signature": "build123d.Part.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Part.solid",
                    "signature": "build123d.Part.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Part.solids",
                    "signature": "build123d.Part.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Part.split",
                    "signature": "build123d.Part.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Part.split_by_perimeter",
                    "signature": "build123d.Part.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Part.tessellate",
                    "signature": "build123d.Part.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Part.to_arcs",
                    "signature": "build123d.Part.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Part.to_splines",
                    "signature": "build123d.Part.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Part.to_vtk_poly_data",
                    "signature": "build123d.Part.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Part.transform_geometry",
                    "signature": "build123d.Part.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Part.transform_shape",
                    "signature": "build123d.Part.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Part.transformed",
                    "signature": "build123d.Part.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Part.translate",
                    "signature": "build123d.Part.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Part.unwrap",
                    "signature": "build123d.Part.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Part.vertex",
                    "signature": "build123d.Part.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Part.vertices",
                    "signature": "build123d.Part.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Part.wire",
                    "signature": "build123d.Part.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Part.wires",
                    "signature": "build123d.Part.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Plane",
            "signature": "build123d.Plane(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Plane.contains",
                    "signature": "build123d.Plane.contains(self, obj: 'Union[VectorLike, Axis]', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Plane.from_local_coords",
                    "signature": "build123d.Plane.from_local_coords(self, obj: 'Union[tuple, Vector, Any, BoundBox]')"
                },
                {
                    "name": "build123d.Plane.get_topods_face_normal",
                    "signature": "build123d.Plane.get_topods_face_normal(face: 'TopoDS_Face') -> 'Vector'"
                },
                {
                    "name": "build123d.Plane.intersect",
                    "signature": "build123d.Plane.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Plane.location_between",
                    "signature": "build123d.Plane.location_between(self, other: 'Plane') -> 'Location'"
                },
                {
                    "name": "build123d.Plane.move",
                    "signature": "build123d.Plane.move(self, loc: 'Location') -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.offset",
                    "signature": "build123d.Plane.offset(self, amount: 'float') -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.reverse",
                    "signature": "build123d.Plane.reverse(self) -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.rotated",
                    "signature": "build123d.Plane.rotated(self, rotation: 'VectorLike' = (0, 0, 0), ordering: 'Union[Extrinsic, Intrinsic]' = None) -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.shift_origin",
                    "signature": "build123d.Plane.shift_origin(self, locator: \"Union[Axis, VectorLike, 'Vertex']\") -> 'Plane'"
                },
                {
                    "name": "build123d.Plane.to_gp_ax2",
                    "signature": "build123d.Plane.to_gp_ax2(self) -> 'gp_Ax2'"
                },
                {
                    "name": "build123d.Plane.to_local_coords",
                    "signature": "build123d.Plane.to_local_coords(self, obj: 'Union[VectorLike, Any, BoundBox]')"
                }
            ],
            "variables": [
                "location",
                "origin"
            ]
        },
        {
            "name": "build123d.PlaneMeta",
            "signature": "build123d.PlaneMeta()",
            "methods": [
                {
                    "name": "build123d.PlaneMeta.mro",
                    "signature": "build123d.PlaneMeta.mro(self, /)"
                }
            ],
            "variables": [
                "XY",
                "XZ",
                "YX",
                "YZ",
                "ZX",
                "ZY",
                "back",
                "bottom",
                "front",
                "isometric",
                "left",
                "right",
                "top"
            ]
        },
        {
            "name": "build123d.PolarLine",
            "signature": "build123d.PolarLine(start: 'VectorLike', length: 'float', angle: 'float' = None, direction: 'VectorLike' = None, length_mode: 'LengthMode' = <LengthMode.DIAGONAL>, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.PolarLine.bounding_box",
                    "signature": "build123d.PolarLine.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.PolarLine.cast",
                    "signature": "build123d.PolarLine.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.center",
                    "signature": "build123d.PolarLine.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.clean",
                    "signature": "build123d.PolarLine.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.close",
                    "signature": "build123d.PolarLine.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.PolarLine.closest_points",
                    "signature": "build123d.PolarLine.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.PolarLine.combined_center",
                    "signature": "build123d.PolarLine.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.common_plane",
                    "signature": "build123d.PolarLine.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.PolarLine.compound",
                    "signature": "build123d.PolarLine.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.PolarLine.compounds",
                    "signature": "build123d.PolarLine.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.PolarLine.compute_mass",
                    "signature": "build123d.PolarLine.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.PolarLine.copy",
                    "signature": "build123d.PolarLine.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.copy_attributes_to",
                    "signature": "build123d.PolarLine.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.PolarLine.cut",
                    "signature": "build123d.PolarLine.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.distance",
                    "signature": "build123d.PolarLine.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.PolarLine.distance_to",
                    "signature": "build123d.PolarLine.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.PolarLine.distance_to_with_closest_points",
                    "signature": "build123d.PolarLine.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.PolarLine.distances",
                    "signature": "build123d.PolarLine.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.PolarLine.distribute_locations",
                    "signature": "build123d.PolarLine.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.PolarLine.edge",
                    "signature": "build123d.PolarLine.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.edges",
                    "signature": "build123d.PolarLine.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.PolarLine.end_point",
                    "signature": "build123d.PolarLine.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.export_brep",
                    "signature": "build123d.PolarLine.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.PolarLine.export_step",
                    "signature": "build123d.PolarLine.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.PolarLine.export_stl",
                    "signature": "build123d.PolarLine.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.PolarLine.extrude",
                    "signature": "build123d.PolarLine.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.face",
                    "signature": "build123d.PolarLine.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.PolarLine.faces",
                    "signature": "build123d.PolarLine.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.PolarLine.faces_intersected_by_axis",
                    "signature": "build123d.PolarLine.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.PolarLine.find_intersection",
                    "signature": "build123d.PolarLine.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.PolarLine.find_intersection_points",
                    "signature": "build123d.PolarLine.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.PolarLine.find_tangent",
                    "signature": "build123d.PolarLine.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.PolarLine.fix",
                    "signature": "build123d.PolarLine.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.fuse",
                    "signature": "build123d.PolarLine.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.hash_code",
                    "signature": "build123d.PolarLine.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.PolarLine.intersect",
                    "signature": "build123d.PolarLine.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.PolarLine.is_equal",
                    "signature": "build123d.PolarLine.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.PolarLine.is_null",
                    "signature": "build123d.PolarLine.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.PolarLine.is_same",
                    "signature": "build123d.PolarLine.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.PolarLine.is_valid",
                    "signature": "build123d.PolarLine.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.PolarLine.iter_path_reverse",
                    "signature": "build123d.PolarLine.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.PolarLine.locate",
                    "signature": "build123d.PolarLine.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.located",
                    "signature": "build123d.PolarLine.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.location_at",
                    "signature": "build123d.PolarLine.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.PolarLine.locations",
                    "signature": "build123d.PolarLine.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.PolarLine.make_bezier",
                    "signature": "build123d.PolarLine.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_circle",
                    "signature": "build123d.PolarLine.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_ellipse",
                    "signature": "build123d.PolarLine.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_helix",
                    "signature": "build123d.PolarLine.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.PolarLine.make_line",
                    "signature": "build123d.PolarLine.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_mid_way",
                    "signature": "build123d.PolarLine.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_spline",
                    "signature": "build123d.PolarLine.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_spline_approx",
                    "signature": "build123d.PolarLine.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_tangent_arc",
                    "signature": "build123d.PolarLine.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.make_three_point_arc",
                    "signature": "build123d.PolarLine.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.mesh",
                    "signature": "build123d.PolarLine.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.PolarLine.mirror",
                    "signature": "build123d.PolarLine.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.move",
                    "signature": "build123d.PolarLine.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.moved",
                    "signature": "build123d.PolarLine.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.normal",
                    "signature": "build123d.PolarLine.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.offset_2d",
                    "signature": "build123d.PolarLine.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.PolarLine.param_at",
                    "signature": "build123d.PolarLine.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.PolarLine.param_at_point",
                    "signature": "build123d.PolarLine.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.PolarLine.perpendicular_line",
                    "signature": "build123d.PolarLine.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.position_at",
                    "signature": "build123d.PolarLine.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.positions",
                    "signature": "build123d.PolarLine.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.PolarLine.project",
                    "signature": "build123d.PolarLine.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.PolarLine.project_faces",
                    "signature": "build123d.PolarLine.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.PolarLine.project_to_shape",
                    "signature": "build123d.PolarLine.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.PolarLine.project_to_viewport",
                    "signature": "build123d.PolarLine.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.PolarLine.relocate",
                    "signature": "build123d.PolarLine.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.PolarLine.reversed",
                    "signature": "build123d.PolarLine.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.rotate",
                    "signature": "build123d.PolarLine.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.scale",
                    "signature": "build123d.PolarLine.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.shape_type",
                    "signature": "build123d.PolarLine.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.PolarLine.shell",
                    "signature": "build123d.PolarLine.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.PolarLine.shells",
                    "signature": "build123d.PolarLine.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.PolarLine.show_topology",
                    "signature": "build123d.PolarLine.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.PolarLine.solid",
                    "signature": "build123d.PolarLine.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.PolarLine.solids",
                    "signature": "build123d.PolarLine.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.PolarLine.split",
                    "signature": "build123d.PolarLine.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.split_by_perimeter",
                    "signature": "build123d.PolarLine.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.PolarLine.start_point",
                    "signature": "build123d.PolarLine.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.tangent_angle_at",
                    "signature": "build123d.PolarLine.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.PolarLine.tangent_at",
                    "signature": "build123d.PolarLine.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.PolarLine.tessellate",
                    "signature": "build123d.PolarLine.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.PolarLine.to_arcs",
                    "signature": "build123d.PolarLine.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.PolarLine.to_axis",
                    "signature": "build123d.PolarLine.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.PolarLine.to_splines",
                    "signature": "build123d.PolarLine.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.PolarLine.to_vtk_poly_data",
                    "signature": "build123d.PolarLine.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.PolarLine.to_wire",
                    "signature": "build123d.PolarLine.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.PolarLine.transform_geometry",
                    "signature": "build123d.PolarLine.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.transform_shape",
                    "signature": "build123d.PolarLine.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.transformed",
                    "signature": "build123d.PolarLine.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.translate",
                    "signature": "build123d.PolarLine.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.PolarLine.trim",
                    "signature": "build123d.PolarLine.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.trim_to_length",
                    "signature": "build123d.PolarLine.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.PolarLine.vertex",
                    "signature": "build123d.PolarLine.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.PolarLine.vertices",
                    "signature": "build123d.PolarLine.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.PolarLine.wire",
                    "signature": "build123d.PolarLine.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.PolarLine.wires",
                    "signature": "build123d.PolarLine.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.PolarLocations",
            "signature": "build123d.PolarLocations(radius: 'float', count: 'int', start_angle: 'float' = 0.0, angular_range: 'float' = 360.0, rotate: 'bool' = True, endpoint: 'bool' = False)",
            "methods": [],
            "variables": [
                "locations"
            ]
        },
        {
            "name": "build123d.Polygon",
            "signature": "build123d.Polygon(*pts: 'Union[VectorLike, Iterable[VectorLike]]', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Polygon.bounding_box",
                    "signature": "build123d.Polygon.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Polygon.cast",
                    "signature": "build123d.Polygon.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.center",
                    "signature": "build123d.Polygon.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Polygon.chamfer",
                    "signature": "build123d.Polygon.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.clean",
                    "signature": "build123d.Polygon.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.closest_points",
                    "signature": "build123d.Polygon.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Polygon.combined_center",
                    "signature": "build123d.Polygon.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Polygon.compound",
                    "signature": "build123d.Polygon.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.compounds",
                    "signature": "build123d.Polygon.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Polygon.compute_mass",
                    "signature": "build123d.Polygon.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Polygon.copy",
                    "signature": "build123d.Polygon.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.copy_attributes_to",
                    "signature": "build123d.Polygon.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Polygon.cut",
                    "signature": "build123d.Polygon.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.distance",
                    "signature": "build123d.Polygon.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Polygon.distance_to",
                    "signature": "build123d.Polygon.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Polygon.distance_to_with_closest_points",
                    "signature": "build123d.Polygon.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Polygon.distances",
                    "signature": "build123d.Polygon.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Polygon.do_children_intersect",
                    "signature": "build123d.Polygon.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Polygon.dprism",
                    "signature": "build123d.Polygon.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Polygon.edge",
                    "signature": "build123d.Polygon.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Polygon.edges",
                    "signature": "build123d.Polygon.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Polygon.export_brep",
                    "signature": "build123d.Polygon.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.export_step",
                    "signature": "build123d.Polygon.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Polygon.export_stl",
                    "signature": "build123d.Polygon.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.extrude",
                    "signature": "build123d.Polygon.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.face",
                    "signature": "build123d.Polygon.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Polygon.faces",
                    "signature": "build123d.Polygon.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Polygon.faces_intersected_by_axis",
                    "signature": "build123d.Polygon.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Polygon.fillet",
                    "signature": "build123d.Polygon.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.find_intersection",
                    "signature": "build123d.Polygon.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Polygon.find_intersection_points",
                    "signature": "build123d.Polygon.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Polygon.first_level_shapes",
                    "signature": "build123d.Polygon.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Polygon.fix",
                    "signature": "build123d.Polygon.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.fuse",
                    "signature": "build123d.Polygon.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.get_type",
                    "signature": "build123d.Polygon.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Polygon.hash_code",
                    "signature": "build123d.Polygon.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Polygon.hollow",
                    "signature": "build123d.Polygon.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Polygon.intersect",
                    "signature": "build123d.Polygon.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.is_equal",
                    "signature": "build123d.Polygon.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.is_inside",
                    "signature": "build123d.Polygon.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.is_null",
                    "signature": "build123d.Polygon.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.is_same",
                    "signature": "build123d.Polygon.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.is_valid",
                    "signature": "build123d.Polygon.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Polygon.iter_path_reverse",
                    "signature": "build123d.Polygon.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Polygon.locate",
                    "signature": "build123d.Polygon.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.located",
                    "signature": "build123d.Polygon.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.make_compound",
                    "signature": "build123d.Polygon.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.make_text",
                    "signature": "build123d.Polygon.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Polygon.make_triad",
                    "signature": "build123d.Polygon.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.max_fillet",
                    "signature": "build123d.Polygon.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Polygon.mesh",
                    "signature": "build123d.Polygon.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Polygon.mirror",
                    "signature": "build123d.Polygon.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.move",
                    "signature": "build123d.Polygon.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.moved",
                    "signature": "build123d.Polygon.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.offset_3d",
                    "signature": "build123d.Polygon.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Polygon.project_faces",
                    "signature": "build123d.Polygon.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Polygon.project_to_viewport",
                    "signature": "build123d.Polygon.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Polygon.relocate",
                    "signature": "build123d.Polygon.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Polygon.rotate",
                    "signature": "build123d.Polygon.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.scale",
                    "signature": "build123d.Polygon.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.shape_type",
                    "signature": "build123d.Polygon.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Polygon.shell",
                    "signature": "build123d.Polygon.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Polygon.shells",
                    "signature": "build123d.Polygon.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Polygon.show_topology",
                    "signature": "build123d.Polygon.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Polygon.solid",
                    "signature": "build123d.Polygon.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Polygon.solids",
                    "signature": "build123d.Polygon.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Polygon.split",
                    "signature": "build123d.Polygon.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.split_by_perimeter",
                    "signature": "build123d.Polygon.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Polygon.tessellate",
                    "signature": "build123d.Polygon.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Polygon.to_arcs",
                    "signature": "build123d.Polygon.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Polygon.to_splines",
                    "signature": "build123d.Polygon.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Polygon.to_vtk_poly_data",
                    "signature": "build123d.Polygon.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Polygon.transform_geometry",
                    "signature": "build123d.Polygon.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.transform_shape",
                    "signature": "build123d.Polygon.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.transformed",
                    "signature": "build123d.Polygon.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.translate",
                    "signature": "build123d.Polygon.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Polygon.unwrap",
                    "signature": "build123d.Polygon.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Polygon.vertex",
                    "signature": "build123d.Polygon.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Polygon.vertices",
                    "signature": "build123d.Polygon.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Polygon.wire",
                    "signature": "build123d.Polygon.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Polygon.wires",
                    "signature": "build123d.Polygon.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Polyline",
            "signature": "build123d.Polyline(*pts: 'Union[VectorLike, Iterable[VectorLike]]', close: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Polyline.bounding_box",
                    "signature": "build123d.Polyline.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Polyline.cast",
                    "signature": "build123d.Polyline.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.center",
                    "signature": "build123d.Polyline.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.chamfer_2d",
                    "signature": "build123d.Polyline.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.clean",
                    "signature": "build123d.Polyline.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.close",
                    "signature": "build123d.Polyline.close(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.closest_points",
                    "signature": "build123d.Polyline.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Polyline.combine",
                    "signature": "build123d.Polyline.combine(wires: 'Iterable[Union[Wire, Edge]]', tol: 'float' = 1e-09) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.Polyline.combined_center",
                    "signature": "build123d.Polyline.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.common_plane",
                    "signature": "build123d.Polyline.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Polyline.compound",
                    "signature": "build123d.Polyline.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Polyline.compounds",
                    "signature": "build123d.Polyline.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Polyline.compute_mass",
                    "signature": "build123d.Polyline.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Polyline.copy",
                    "signature": "build123d.Polyline.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.copy_attributes_to",
                    "signature": "build123d.Polyline.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Polyline.cut",
                    "signature": "build123d.Polyline.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.distance",
                    "signature": "build123d.Polyline.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Polyline.distance_to",
                    "signature": "build123d.Polyline.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Polyline.distance_to_with_closest_points",
                    "signature": "build123d.Polyline.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Polyline.distances",
                    "signature": "build123d.Polyline.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Polyline.edge",
                    "signature": "build123d.Polyline.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Polyline.edges",
                    "signature": "build123d.Polyline.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Polyline.end_point",
                    "signature": "build123d.Polyline.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.export_brep",
                    "signature": "build123d.Polyline.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Polyline.export_step",
                    "signature": "build123d.Polyline.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Polyline.export_stl",
                    "signature": "build123d.Polyline.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Polyline.extrude",
                    "signature": "build123d.Polyline.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.face",
                    "signature": "build123d.Polyline.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Polyline.faces",
                    "signature": "build123d.Polyline.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Polyline.faces_intersected_by_axis",
                    "signature": "build123d.Polyline.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Polyline.fillet_2d",
                    "signature": "build123d.Polyline.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.find_intersection",
                    "signature": "build123d.Polyline.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Polyline.find_intersection_points",
                    "signature": "build123d.Polyline.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Polyline.fix",
                    "signature": "build123d.Polyline.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.fix_degenerate_edges",
                    "signature": "build123d.Polyline.fix_degenerate_edges(self, precision: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.fuse",
                    "signature": "build123d.Polyline.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.hash_code",
                    "signature": "build123d.Polyline.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Polyline.intersect",
                    "signature": "build123d.Polyline.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Polyline.is_equal",
                    "signature": "build123d.Polyline.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Polyline.is_null",
                    "signature": "build123d.Polyline.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Polyline.is_same",
                    "signature": "build123d.Polyline.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Polyline.is_valid",
                    "signature": "build123d.Polyline.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Polyline.iter_path_reverse",
                    "signature": "build123d.Polyline.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Polyline.locate",
                    "signature": "build123d.Polyline.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.located",
                    "signature": "build123d.Polyline.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.location_at",
                    "signature": "build123d.Polyline.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Polyline.locations",
                    "signature": "build123d.Polyline.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Polyline.make_circle",
                    "signature": "build123d.Polyline.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.make_convex_hull",
                    "signature": "build123d.Polyline.make_convex_hull(edges: 'Iterable[Edge]', tolerance: 'float' = 0.001) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.make_ellipse",
                    "signature": "build123d.Polyline.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, closed: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.make_polygon",
                    "signature": "build123d.Polyline.make_polygon(vertices: 'Iterable[VectorLike]', close: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.make_rect",
                    "signature": "build123d.Polyline.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.make_wire",
                    "signature": "build123d.Polyline.make_wire(edges: 'Iterable[Edge]', sequenced: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.mesh",
                    "signature": "build123d.Polyline.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Polyline.mirror",
                    "signature": "build123d.Polyline.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.move",
                    "signature": "build123d.Polyline.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.moved",
                    "signature": "build123d.Polyline.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.normal",
                    "signature": "build123d.Polyline.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.offset_2d",
                    "signature": "build123d.Polyline.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Polyline.order_edges",
                    "signature": "build123d.Polyline.order_edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Polyline.param_at",
                    "signature": "build123d.Polyline.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Polyline.param_at_point",
                    "signature": "build123d.Polyline.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Polyline.perpendicular_line",
                    "signature": "build123d.Polyline.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Polyline.position_at",
                    "signature": "build123d.Polyline.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.positions",
                    "signature": "build123d.Polyline.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Polyline.project",
                    "signature": "build123d.Polyline.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Polyline.project_faces",
                    "signature": "build123d.Polyline.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Polyline.project_to_shape",
                    "signature": "build123d.Polyline.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Wire]'"
                },
                {
                    "name": "build123d.Polyline.project_to_viewport",
                    "signature": "build123d.Polyline.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Polyline.relocate",
                    "signature": "build123d.Polyline.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Polyline.rotate",
                    "signature": "build123d.Polyline.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.scale",
                    "signature": "build123d.Polyline.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.shape_type",
                    "signature": "build123d.Polyline.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Polyline.shell",
                    "signature": "build123d.Polyline.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Polyline.shells",
                    "signature": "build123d.Polyline.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Polyline.show_topology",
                    "signature": "build123d.Polyline.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Polyline.solid",
                    "signature": "build123d.Polyline.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Polyline.solids",
                    "signature": "build123d.Polyline.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Polyline.split",
                    "signature": "build123d.Polyline.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.split_by_perimeter",
                    "signature": "build123d.Polyline.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Polyline.start_point",
                    "signature": "build123d.Polyline.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.stitch",
                    "signature": "build123d.Polyline.stitch(self, other: 'Wire') -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.tangent_angle_at",
                    "signature": "build123d.Polyline.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Polyline.tangent_at",
                    "signature": "build123d.Polyline.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Polyline.tessellate",
                    "signature": "build123d.Polyline.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Polyline.to_arcs",
                    "signature": "build123d.Polyline.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Polyline.to_splines",
                    "signature": "build123d.Polyline.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Polyline.to_vtk_poly_data",
                    "signature": "build123d.Polyline.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Polyline.to_wire",
                    "signature": "build123d.Polyline.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.transform_geometry",
                    "signature": "build123d.Polyline.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.transform_shape",
                    "signature": "build123d.Polyline.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.transformed",
                    "signature": "build123d.Polyline.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.translate",
                    "signature": "build123d.Polyline.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Polyline.trim",
                    "signature": "build123d.Polyline.trim(self: 'Wire', start: 'float', end: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.vertex",
                    "signature": "build123d.Polyline.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Polyline.vertices",
                    "signature": "build123d.Polyline.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Polyline.wire",
                    "signature": "build123d.Polyline.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Polyline.wires",
                    "signature": "build123d.Polyline.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Pos",
            "signature": "build123d.Pos(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Pos.intersect",
                    "signature": "build123d.Pos.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Pos.inverse",
                    "signature": "build123d.Pos.inverse(self) -> 'Location'"
                },
                {
                    "name": "build123d.Pos.to_axis",
                    "signature": "build123d.Pos.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Pos.to_tuple",
                    "signature": "build123d.Pos.to_tuple(self) -> 'tuple[tuple[float, float, float], tuple[float, float, float]]'"
                }
            ],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ]
        },
        {
            "name": "build123d.PositionMode",
            "signature": "build123d.PositionMode()",
            "methods": [],
            "variables": [
                "LENGTH",
                "PARAMETER",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.PrecisionMode",
            "signature": "build123d.PrecisionMode()",
            "methods": [],
            "variables": [
                "AVERAGE",
                "GREATEST",
                "LEAST",
                "SESSION",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.RadiusArc",
            "signature": "build123d.RadiusArc(start_point: 'VectorLike', end_point: 'VectorLike', radius: 'float', short_sagitta: 'bool' = True, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.RadiusArc.bounding_box",
                    "signature": "build123d.RadiusArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.RadiusArc.cast",
                    "signature": "build123d.RadiusArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.center",
                    "signature": "build123d.RadiusArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.clean",
                    "signature": "build123d.RadiusArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.close",
                    "signature": "build123d.RadiusArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.RadiusArc.closest_points",
                    "signature": "build123d.RadiusArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.RadiusArc.combined_center",
                    "signature": "build123d.RadiusArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.common_plane",
                    "signature": "build123d.RadiusArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.RadiusArc.compound",
                    "signature": "build123d.RadiusArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.RadiusArc.compounds",
                    "signature": "build123d.RadiusArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.RadiusArc.compute_mass",
                    "signature": "build123d.RadiusArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.RadiusArc.copy",
                    "signature": "build123d.RadiusArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.copy_attributes_to",
                    "signature": "build123d.RadiusArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.RadiusArc.cut",
                    "signature": "build123d.RadiusArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.distance",
                    "signature": "build123d.RadiusArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.RadiusArc.distance_to",
                    "signature": "build123d.RadiusArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.RadiusArc.distance_to_with_closest_points",
                    "signature": "build123d.RadiusArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.RadiusArc.distances",
                    "signature": "build123d.RadiusArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.RadiusArc.distribute_locations",
                    "signature": "build123d.RadiusArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.RadiusArc.edge",
                    "signature": "build123d.RadiusArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.edges",
                    "signature": "build123d.RadiusArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.RadiusArc.end_point",
                    "signature": "build123d.RadiusArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.export_brep",
                    "signature": "build123d.RadiusArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.RadiusArc.export_step",
                    "signature": "build123d.RadiusArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.RadiusArc.export_stl",
                    "signature": "build123d.RadiusArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.RadiusArc.extrude",
                    "signature": "build123d.RadiusArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.face",
                    "signature": "build123d.RadiusArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.RadiusArc.faces",
                    "signature": "build123d.RadiusArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.RadiusArc.faces_intersected_by_axis",
                    "signature": "build123d.RadiusArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.RadiusArc.find_intersection",
                    "signature": "build123d.RadiusArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.RadiusArc.find_intersection_points",
                    "signature": "build123d.RadiusArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.RadiusArc.find_tangent",
                    "signature": "build123d.RadiusArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.RadiusArc.fix",
                    "signature": "build123d.RadiusArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.fuse",
                    "signature": "build123d.RadiusArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.hash_code",
                    "signature": "build123d.RadiusArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.RadiusArc.intersect",
                    "signature": "build123d.RadiusArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.RadiusArc.is_equal",
                    "signature": "build123d.RadiusArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.RadiusArc.is_null",
                    "signature": "build123d.RadiusArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.RadiusArc.is_same",
                    "signature": "build123d.RadiusArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.RadiusArc.is_valid",
                    "signature": "build123d.RadiusArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.RadiusArc.iter_path_reverse",
                    "signature": "build123d.RadiusArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.RadiusArc.locate",
                    "signature": "build123d.RadiusArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.located",
                    "signature": "build123d.RadiusArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.location_at",
                    "signature": "build123d.RadiusArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.RadiusArc.locations",
                    "signature": "build123d.RadiusArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.RadiusArc.make_bezier",
                    "signature": "build123d.RadiusArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_circle",
                    "signature": "build123d.RadiusArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_ellipse",
                    "signature": "build123d.RadiusArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_helix",
                    "signature": "build123d.RadiusArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.RadiusArc.make_line",
                    "signature": "build123d.RadiusArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_mid_way",
                    "signature": "build123d.RadiusArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_spline",
                    "signature": "build123d.RadiusArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_spline_approx",
                    "signature": "build123d.RadiusArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_tangent_arc",
                    "signature": "build123d.RadiusArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.make_three_point_arc",
                    "signature": "build123d.RadiusArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.mesh",
                    "signature": "build123d.RadiusArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.RadiusArc.mirror",
                    "signature": "build123d.RadiusArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.move",
                    "signature": "build123d.RadiusArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.moved",
                    "signature": "build123d.RadiusArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.normal",
                    "signature": "build123d.RadiusArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.offset_2d",
                    "signature": "build123d.RadiusArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.RadiusArc.param_at",
                    "signature": "build123d.RadiusArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.RadiusArc.param_at_point",
                    "signature": "build123d.RadiusArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.RadiusArc.perpendicular_line",
                    "signature": "build123d.RadiusArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.position_at",
                    "signature": "build123d.RadiusArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.positions",
                    "signature": "build123d.RadiusArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.RadiusArc.project",
                    "signature": "build123d.RadiusArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.RadiusArc.project_faces",
                    "signature": "build123d.RadiusArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.RadiusArc.project_to_shape",
                    "signature": "build123d.RadiusArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.RadiusArc.project_to_viewport",
                    "signature": "build123d.RadiusArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.RadiusArc.relocate",
                    "signature": "build123d.RadiusArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.RadiusArc.reversed",
                    "signature": "build123d.RadiusArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.rotate",
                    "signature": "build123d.RadiusArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.scale",
                    "signature": "build123d.RadiusArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.shape_type",
                    "signature": "build123d.RadiusArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.RadiusArc.shell",
                    "signature": "build123d.RadiusArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.RadiusArc.shells",
                    "signature": "build123d.RadiusArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.RadiusArc.show_topology",
                    "signature": "build123d.RadiusArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.RadiusArc.solid",
                    "signature": "build123d.RadiusArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.RadiusArc.solids",
                    "signature": "build123d.RadiusArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.RadiusArc.split",
                    "signature": "build123d.RadiusArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.split_by_perimeter",
                    "signature": "build123d.RadiusArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.RadiusArc.start_point",
                    "signature": "build123d.RadiusArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.tangent_angle_at",
                    "signature": "build123d.RadiusArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.RadiusArc.tangent_at",
                    "signature": "build123d.RadiusArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.RadiusArc.tessellate",
                    "signature": "build123d.RadiusArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.RadiusArc.to_arcs",
                    "signature": "build123d.RadiusArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.RadiusArc.to_axis",
                    "signature": "build123d.RadiusArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.RadiusArc.to_splines",
                    "signature": "build123d.RadiusArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.RadiusArc.to_vtk_poly_data",
                    "signature": "build123d.RadiusArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.RadiusArc.to_wire",
                    "signature": "build123d.RadiusArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.RadiusArc.transform_geometry",
                    "signature": "build123d.RadiusArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.transform_shape",
                    "signature": "build123d.RadiusArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.transformed",
                    "signature": "build123d.RadiusArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.translate",
                    "signature": "build123d.RadiusArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.RadiusArc.trim",
                    "signature": "build123d.RadiusArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.trim_to_length",
                    "signature": "build123d.RadiusArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.RadiusArc.vertex",
                    "signature": "build123d.RadiusArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.RadiusArc.vertices",
                    "signature": "build123d.RadiusArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.RadiusArc.wire",
                    "signature": "build123d.RadiusArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.RadiusArc.wires",
                    "signature": "build123d.RadiusArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Rectangle",
            "signature": "build123d.Rectangle(width: 'float', height: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Rectangle.bounding_box",
                    "signature": "build123d.Rectangle.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Rectangle.cast",
                    "signature": "build123d.Rectangle.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.center",
                    "signature": "build123d.Rectangle.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Rectangle.chamfer",
                    "signature": "build123d.Rectangle.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.clean",
                    "signature": "build123d.Rectangle.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.closest_points",
                    "signature": "build123d.Rectangle.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Rectangle.combined_center",
                    "signature": "build123d.Rectangle.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Rectangle.compound",
                    "signature": "build123d.Rectangle.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.compounds",
                    "signature": "build123d.Rectangle.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Rectangle.compute_mass",
                    "signature": "build123d.Rectangle.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Rectangle.copy",
                    "signature": "build123d.Rectangle.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.copy_attributes_to",
                    "signature": "build123d.Rectangle.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Rectangle.cut",
                    "signature": "build123d.Rectangle.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.distance",
                    "signature": "build123d.Rectangle.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Rectangle.distance_to",
                    "signature": "build123d.Rectangle.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Rectangle.distance_to_with_closest_points",
                    "signature": "build123d.Rectangle.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Rectangle.distances",
                    "signature": "build123d.Rectangle.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Rectangle.do_children_intersect",
                    "signature": "build123d.Rectangle.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Rectangle.dprism",
                    "signature": "build123d.Rectangle.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Rectangle.edge",
                    "signature": "build123d.Rectangle.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Rectangle.edges",
                    "signature": "build123d.Rectangle.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Rectangle.export_brep",
                    "signature": "build123d.Rectangle.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.export_step",
                    "signature": "build123d.Rectangle.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Rectangle.export_stl",
                    "signature": "build123d.Rectangle.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.extrude",
                    "signature": "build123d.Rectangle.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.face",
                    "signature": "build123d.Rectangle.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Rectangle.faces",
                    "signature": "build123d.Rectangle.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Rectangle.faces_intersected_by_axis",
                    "signature": "build123d.Rectangle.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Rectangle.fillet",
                    "signature": "build123d.Rectangle.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.find_intersection",
                    "signature": "build123d.Rectangle.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Rectangle.find_intersection_points",
                    "signature": "build123d.Rectangle.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Rectangle.first_level_shapes",
                    "signature": "build123d.Rectangle.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Rectangle.fix",
                    "signature": "build123d.Rectangle.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.fuse",
                    "signature": "build123d.Rectangle.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.get_type",
                    "signature": "build123d.Rectangle.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Rectangle.hash_code",
                    "signature": "build123d.Rectangle.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Rectangle.hollow",
                    "signature": "build123d.Rectangle.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Rectangle.intersect",
                    "signature": "build123d.Rectangle.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.is_equal",
                    "signature": "build123d.Rectangle.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.is_inside",
                    "signature": "build123d.Rectangle.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.is_null",
                    "signature": "build123d.Rectangle.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.is_same",
                    "signature": "build123d.Rectangle.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.is_valid",
                    "signature": "build123d.Rectangle.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Rectangle.iter_path_reverse",
                    "signature": "build123d.Rectangle.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Rectangle.locate",
                    "signature": "build123d.Rectangle.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.located",
                    "signature": "build123d.Rectangle.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.make_compound",
                    "signature": "build123d.Rectangle.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.make_text",
                    "signature": "build123d.Rectangle.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Rectangle.make_triad",
                    "signature": "build123d.Rectangle.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.max_fillet",
                    "signature": "build123d.Rectangle.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Rectangle.mesh",
                    "signature": "build123d.Rectangle.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Rectangle.mirror",
                    "signature": "build123d.Rectangle.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.move",
                    "signature": "build123d.Rectangle.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.moved",
                    "signature": "build123d.Rectangle.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.offset_3d",
                    "signature": "build123d.Rectangle.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Rectangle.project_faces",
                    "signature": "build123d.Rectangle.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Rectangle.project_to_viewport",
                    "signature": "build123d.Rectangle.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Rectangle.relocate",
                    "signature": "build123d.Rectangle.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Rectangle.rotate",
                    "signature": "build123d.Rectangle.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.scale",
                    "signature": "build123d.Rectangle.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.shape_type",
                    "signature": "build123d.Rectangle.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Rectangle.shell",
                    "signature": "build123d.Rectangle.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Rectangle.shells",
                    "signature": "build123d.Rectangle.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Rectangle.show_topology",
                    "signature": "build123d.Rectangle.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Rectangle.solid",
                    "signature": "build123d.Rectangle.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Rectangle.solids",
                    "signature": "build123d.Rectangle.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Rectangle.split",
                    "signature": "build123d.Rectangle.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.split_by_perimeter",
                    "signature": "build123d.Rectangle.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Rectangle.tessellate",
                    "signature": "build123d.Rectangle.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Rectangle.to_arcs",
                    "signature": "build123d.Rectangle.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Rectangle.to_splines",
                    "signature": "build123d.Rectangle.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Rectangle.to_vtk_poly_data",
                    "signature": "build123d.Rectangle.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Rectangle.transform_geometry",
                    "signature": "build123d.Rectangle.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.transform_shape",
                    "signature": "build123d.Rectangle.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.transformed",
                    "signature": "build123d.Rectangle.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.translate",
                    "signature": "build123d.Rectangle.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Rectangle.unwrap",
                    "signature": "build123d.Rectangle.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Rectangle.vertex",
                    "signature": "build123d.Rectangle.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Rectangle.vertices",
                    "signature": "build123d.Rectangle.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Rectangle.wire",
                    "signature": "build123d.Rectangle.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Rectangle.wires",
                    "signature": "build123d.Rectangle.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.RectangleRounded",
            "signature": "build123d.RectangleRounded(width: 'float', height: 'float', radius: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.RectangleRounded.bounding_box",
                    "signature": "build123d.RectangleRounded.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.RectangleRounded.cast",
                    "signature": "build123d.RectangleRounded.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.center",
                    "signature": "build123d.RectangleRounded.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.RectangleRounded.chamfer",
                    "signature": "build123d.RectangleRounded.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.clean",
                    "signature": "build123d.RectangleRounded.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.closest_points",
                    "signature": "build123d.RectangleRounded.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.RectangleRounded.combined_center",
                    "signature": "build123d.RectangleRounded.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.RectangleRounded.compound",
                    "signature": "build123d.RectangleRounded.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.compounds",
                    "signature": "build123d.RectangleRounded.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.RectangleRounded.compute_mass",
                    "signature": "build123d.RectangleRounded.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.RectangleRounded.copy",
                    "signature": "build123d.RectangleRounded.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.copy_attributes_to",
                    "signature": "build123d.RectangleRounded.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.RectangleRounded.cut",
                    "signature": "build123d.RectangleRounded.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.distance",
                    "signature": "build123d.RectangleRounded.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.RectangleRounded.distance_to",
                    "signature": "build123d.RectangleRounded.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.RectangleRounded.distance_to_with_closest_points",
                    "signature": "build123d.RectangleRounded.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.RectangleRounded.distances",
                    "signature": "build123d.RectangleRounded.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.RectangleRounded.do_children_intersect",
                    "signature": "build123d.RectangleRounded.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.RectangleRounded.dprism",
                    "signature": "build123d.RectangleRounded.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.RectangleRounded.edge",
                    "signature": "build123d.RectangleRounded.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.RectangleRounded.edges",
                    "signature": "build123d.RectangleRounded.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.RectangleRounded.export_brep",
                    "signature": "build123d.RectangleRounded.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.export_step",
                    "signature": "build123d.RectangleRounded.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.RectangleRounded.export_stl",
                    "signature": "build123d.RectangleRounded.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.extrude",
                    "signature": "build123d.RectangleRounded.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.face",
                    "signature": "build123d.RectangleRounded.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.RectangleRounded.faces",
                    "signature": "build123d.RectangleRounded.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.RectangleRounded.faces_intersected_by_axis",
                    "signature": "build123d.RectangleRounded.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.RectangleRounded.fillet",
                    "signature": "build123d.RectangleRounded.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.find_intersection",
                    "signature": "build123d.RectangleRounded.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.RectangleRounded.find_intersection_points",
                    "signature": "build123d.RectangleRounded.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.RectangleRounded.first_level_shapes",
                    "signature": "build123d.RectangleRounded.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.RectangleRounded.fix",
                    "signature": "build123d.RectangleRounded.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.fuse",
                    "signature": "build123d.RectangleRounded.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.get_type",
                    "signature": "build123d.RectangleRounded.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.RectangleRounded.hash_code",
                    "signature": "build123d.RectangleRounded.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.RectangleRounded.hollow",
                    "signature": "build123d.RectangleRounded.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.RectangleRounded.intersect",
                    "signature": "build123d.RectangleRounded.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.is_equal",
                    "signature": "build123d.RectangleRounded.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.is_inside",
                    "signature": "build123d.RectangleRounded.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.is_null",
                    "signature": "build123d.RectangleRounded.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.is_same",
                    "signature": "build123d.RectangleRounded.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.is_valid",
                    "signature": "build123d.RectangleRounded.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.RectangleRounded.iter_path_reverse",
                    "signature": "build123d.RectangleRounded.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.RectangleRounded.locate",
                    "signature": "build123d.RectangleRounded.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.located",
                    "signature": "build123d.RectangleRounded.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.make_compound",
                    "signature": "build123d.RectangleRounded.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.make_text",
                    "signature": "build123d.RectangleRounded.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.RectangleRounded.make_triad",
                    "signature": "build123d.RectangleRounded.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.max_fillet",
                    "signature": "build123d.RectangleRounded.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.RectangleRounded.mesh",
                    "signature": "build123d.RectangleRounded.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.RectangleRounded.mirror",
                    "signature": "build123d.RectangleRounded.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.move",
                    "signature": "build123d.RectangleRounded.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.moved",
                    "signature": "build123d.RectangleRounded.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.offset_3d",
                    "signature": "build123d.RectangleRounded.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.RectangleRounded.project_faces",
                    "signature": "build123d.RectangleRounded.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.RectangleRounded.project_to_viewport",
                    "signature": "build123d.RectangleRounded.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.RectangleRounded.relocate",
                    "signature": "build123d.RectangleRounded.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.RectangleRounded.rotate",
                    "signature": "build123d.RectangleRounded.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.scale",
                    "signature": "build123d.RectangleRounded.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.shape_type",
                    "signature": "build123d.RectangleRounded.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.RectangleRounded.shell",
                    "signature": "build123d.RectangleRounded.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.RectangleRounded.shells",
                    "signature": "build123d.RectangleRounded.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.RectangleRounded.show_topology",
                    "signature": "build123d.RectangleRounded.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.RectangleRounded.solid",
                    "signature": "build123d.RectangleRounded.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.RectangleRounded.solids",
                    "signature": "build123d.RectangleRounded.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.RectangleRounded.split",
                    "signature": "build123d.RectangleRounded.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.split_by_perimeter",
                    "signature": "build123d.RectangleRounded.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.RectangleRounded.tessellate",
                    "signature": "build123d.RectangleRounded.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.RectangleRounded.to_arcs",
                    "signature": "build123d.RectangleRounded.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.RectangleRounded.to_splines",
                    "signature": "build123d.RectangleRounded.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.RectangleRounded.to_vtk_poly_data",
                    "signature": "build123d.RectangleRounded.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.RectangleRounded.transform_geometry",
                    "signature": "build123d.RectangleRounded.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.transform_shape",
                    "signature": "build123d.RectangleRounded.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.transformed",
                    "signature": "build123d.RectangleRounded.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.translate",
                    "signature": "build123d.RectangleRounded.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.RectangleRounded.unwrap",
                    "signature": "build123d.RectangleRounded.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.RectangleRounded.vertex",
                    "signature": "build123d.RectangleRounded.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.RectangleRounded.vertices",
                    "signature": "build123d.RectangleRounded.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.RectangleRounded.wire",
                    "signature": "build123d.RectangleRounded.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.RectangleRounded.wires",
                    "signature": "build123d.RectangleRounded.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.RegularPolygon",
            "signature": "build123d.RegularPolygon(radius: 'float', side_count: 'int', major_radius: 'bool' = True, rotation: 'float' = 0, align: 'tuple[Align, Align]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.RegularPolygon.bounding_box",
                    "signature": "build123d.RegularPolygon.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.RegularPolygon.cast",
                    "signature": "build123d.RegularPolygon.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.center",
                    "signature": "build123d.RegularPolygon.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.RegularPolygon.chamfer",
                    "signature": "build123d.RegularPolygon.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.clean",
                    "signature": "build123d.RegularPolygon.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.closest_points",
                    "signature": "build123d.RegularPolygon.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.RegularPolygon.combined_center",
                    "signature": "build123d.RegularPolygon.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.RegularPolygon.compound",
                    "signature": "build123d.RegularPolygon.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.compounds",
                    "signature": "build123d.RegularPolygon.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.RegularPolygon.compute_mass",
                    "signature": "build123d.RegularPolygon.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.RegularPolygon.copy",
                    "signature": "build123d.RegularPolygon.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.copy_attributes_to",
                    "signature": "build123d.RegularPolygon.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.RegularPolygon.cut",
                    "signature": "build123d.RegularPolygon.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.distance",
                    "signature": "build123d.RegularPolygon.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.RegularPolygon.distance_to",
                    "signature": "build123d.RegularPolygon.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.RegularPolygon.distance_to_with_closest_points",
                    "signature": "build123d.RegularPolygon.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.RegularPolygon.distances",
                    "signature": "build123d.RegularPolygon.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.RegularPolygon.do_children_intersect",
                    "signature": "build123d.RegularPolygon.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.RegularPolygon.dprism",
                    "signature": "build123d.RegularPolygon.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.RegularPolygon.edge",
                    "signature": "build123d.RegularPolygon.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.RegularPolygon.edges",
                    "signature": "build123d.RegularPolygon.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.RegularPolygon.export_brep",
                    "signature": "build123d.RegularPolygon.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.export_step",
                    "signature": "build123d.RegularPolygon.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.RegularPolygon.export_stl",
                    "signature": "build123d.RegularPolygon.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.extrude",
                    "signature": "build123d.RegularPolygon.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.face",
                    "signature": "build123d.RegularPolygon.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.RegularPolygon.faces",
                    "signature": "build123d.RegularPolygon.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.RegularPolygon.faces_intersected_by_axis",
                    "signature": "build123d.RegularPolygon.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.RegularPolygon.fillet",
                    "signature": "build123d.RegularPolygon.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.find_intersection",
                    "signature": "build123d.RegularPolygon.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.RegularPolygon.find_intersection_points",
                    "signature": "build123d.RegularPolygon.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.RegularPolygon.first_level_shapes",
                    "signature": "build123d.RegularPolygon.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.RegularPolygon.fix",
                    "signature": "build123d.RegularPolygon.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.fuse",
                    "signature": "build123d.RegularPolygon.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.get_type",
                    "signature": "build123d.RegularPolygon.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.RegularPolygon.hash_code",
                    "signature": "build123d.RegularPolygon.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.RegularPolygon.hollow",
                    "signature": "build123d.RegularPolygon.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.RegularPolygon.intersect",
                    "signature": "build123d.RegularPolygon.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.is_equal",
                    "signature": "build123d.RegularPolygon.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.is_inside",
                    "signature": "build123d.RegularPolygon.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.is_null",
                    "signature": "build123d.RegularPolygon.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.is_same",
                    "signature": "build123d.RegularPolygon.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.is_valid",
                    "signature": "build123d.RegularPolygon.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.RegularPolygon.iter_path_reverse",
                    "signature": "build123d.RegularPolygon.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.RegularPolygon.locate",
                    "signature": "build123d.RegularPolygon.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.located",
                    "signature": "build123d.RegularPolygon.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.make_compound",
                    "signature": "build123d.RegularPolygon.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.make_text",
                    "signature": "build123d.RegularPolygon.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.RegularPolygon.make_triad",
                    "signature": "build123d.RegularPolygon.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.max_fillet",
                    "signature": "build123d.RegularPolygon.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.RegularPolygon.mesh",
                    "signature": "build123d.RegularPolygon.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.RegularPolygon.mirror",
                    "signature": "build123d.RegularPolygon.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.move",
                    "signature": "build123d.RegularPolygon.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.moved",
                    "signature": "build123d.RegularPolygon.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.offset_3d",
                    "signature": "build123d.RegularPolygon.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.RegularPolygon.project_faces",
                    "signature": "build123d.RegularPolygon.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.RegularPolygon.project_to_viewport",
                    "signature": "build123d.RegularPolygon.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.RegularPolygon.relocate",
                    "signature": "build123d.RegularPolygon.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.RegularPolygon.rotate",
                    "signature": "build123d.RegularPolygon.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.scale",
                    "signature": "build123d.RegularPolygon.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.shape_type",
                    "signature": "build123d.RegularPolygon.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.RegularPolygon.shell",
                    "signature": "build123d.RegularPolygon.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.RegularPolygon.shells",
                    "signature": "build123d.RegularPolygon.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.RegularPolygon.show_topology",
                    "signature": "build123d.RegularPolygon.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.RegularPolygon.solid",
                    "signature": "build123d.RegularPolygon.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.RegularPolygon.solids",
                    "signature": "build123d.RegularPolygon.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.RegularPolygon.split",
                    "signature": "build123d.RegularPolygon.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.split_by_perimeter",
                    "signature": "build123d.RegularPolygon.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.RegularPolygon.tessellate",
                    "signature": "build123d.RegularPolygon.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.RegularPolygon.to_arcs",
                    "signature": "build123d.RegularPolygon.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.RegularPolygon.to_splines",
                    "signature": "build123d.RegularPolygon.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.RegularPolygon.to_vtk_poly_data",
                    "signature": "build123d.RegularPolygon.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.RegularPolygon.transform_geometry",
                    "signature": "build123d.RegularPolygon.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.transform_shape",
                    "signature": "build123d.RegularPolygon.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.transformed",
                    "signature": "build123d.RegularPolygon.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.translate",
                    "signature": "build123d.RegularPolygon.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.RegularPolygon.unwrap",
                    "signature": "build123d.RegularPolygon.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.RegularPolygon.vertex",
                    "signature": "build123d.RegularPolygon.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.RegularPolygon.vertices",
                    "signature": "build123d.RegularPolygon.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.RegularPolygon.wire",
                    "signature": "build123d.RegularPolygon.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.RegularPolygon.wires",
                    "signature": "build123d.RegularPolygon.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.RevoluteJoint",
            "signature": "build123d.RevoluteJoint(label: 'str', to_part: 'Union[Solid, Compound]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), angle_reference: 'VectorLike' = None, angular_range: 'tuple[float, float]' = (0, 360))",
            "methods": [
                {
                    "name": "build123d.RevoluteJoint.connect_to",
                    "signature": "build123d.RevoluteJoint.connect_to(self, other: 'RigidJoint', *, angle: 'float' = None)"
                },
                {
                    "name": "build123d.RevoluteJoint.relative_to",
                    "signature": "build123d.RevoluteJoint.relative_to(self, other: 'RigidJoint', *, angle: 'float' = None)"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ]
        },
        {
            "name": "build123d.RigidJoint",
            "signature": "build123d.RigidJoint(label: 'str', to_part: 'Optional[Union[Solid, Compound]]' = None, joint_location: 'Union[Location, None]' = None)",
            "methods": [
                {
                    "name": "build123d.RigidJoint.connect_to",
                    "signature": "build123d.RigidJoint.connect_to(self, other: 'Joint', **kwargs)"
                },
                {
                    "name": "build123d.RigidJoint.relative_to",
                    "signature": "build123d.RigidJoint.relative_to(self, other: 'Joint', **kwargs) -> 'Location'"
                }
            ],
            "variables": [
                "location",
                "symbol"
            ]
        },
        {
            "name": "build123d.Rot",
            "signature": "build123d.Rot(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Rot.intersect",
                    "signature": "build123d.Rot.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Rot.inverse",
                    "signature": "build123d.Rot.inverse(self) -> 'Location'"
                },
                {
                    "name": "build123d.Rot.to_axis",
                    "signature": "build123d.Rot.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Rot.to_tuple",
                    "signature": "build123d.Rot.to_tuple(self) -> 'tuple[tuple[float, float, float], tuple[float, float, float]]'"
                }
            ],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ]
        },
        {
            "name": "build123d.Rotation",
            "signature": "build123d.Rotation(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Rotation.intersect",
                    "signature": "build123d.Rotation.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Rotation.inverse",
                    "signature": "build123d.Rotation.inverse(self) -> 'Location'"
                },
                {
                    "name": "build123d.Rotation.to_axis",
                    "signature": "build123d.Rotation.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Rotation.to_tuple",
                    "signature": "build123d.Rotation.to_tuple(self) -> 'tuple[tuple[float, float, float], tuple[float, float, float]]'"
                }
            ],
            "variables": [
                "T",
                "orientation",
                "position",
                "x_axis",
                "y_axis",
                "z_axis"
            ]
        },
        {
            "name": "build123d.SagittaArc",
            "signature": "build123d.SagittaArc(start_point: 'VectorLike', end_point: 'VectorLike', sagitta: 'float', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.SagittaArc.bounding_box",
                    "signature": "build123d.SagittaArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.SagittaArc.cast",
                    "signature": "build123d.SagittaArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.center",
                    "signature": "build123d.SagittaArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.clean",
                    "signature": "build123d.SagittaArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.close",
                    "signature": "build123d.SagittaArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.SagittaArc.closest_points",
                    "signature": "build123d.SagittaArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.SagittaArc.combined_center",
                    "signature": "build123d.SagittaArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.common_plane",
                    "signature": "build123d.SagittaArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.SagittaArc.compound",
                    "signature": "build123d.SagittaArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.SagittaArc.compounds",
                    "signature": "build123d.SagittaArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.SagittaArc.compute_mass",
                    "signature": "build123d.SagittaArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SagittaArc.copy",
                    "signature": "build123d.SagittaArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.copy_attributes_to",
                    "signature": "build123d.SagittaArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.SagittaArc.cut",
                    "signature": "build123d.SagittaArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.distance",
                    "signature": "build123d.SagittaArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SagittaArc.distance_to",
                    "signature": "build123d.SagittaArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.SagittaArc.distance_to_with_closest_points",
                    "signature": "build123d.SagittaArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.SagittaArc.distances",
                    "signature": "build123d.SagittaArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.SagittaArc.distribute_locations",
                    "signature": "build123d.SagittaArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.SagittaArc.edge",
                    "signature": "build123d.SagittaArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.edges",
                    "signature": "build123d.SagittaArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.SagittaArc.end_point",
                    "signature": "build123d.SagittaArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.export_brep",
                    "signature": "build123d.SagittaArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.SagittaArc.export_step",
                    "signature": "build123d.SagittaArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.SagittaArc.export_stl",
                    "signature": "build123d.SagittaArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.SagittaArc.extrude",
                    "signature": "build123d.SagittaArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.face",
                    "signature": "build123d.SagittaArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.SagittaArc.faces",
                    "signature": "build123d.SagittaArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SagittaArc.faces_intersected_by_axis",
                    "signature": "build123d.SagittaArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SagittaArc.find_intersection",
                    "signature": "build123d.SagittaArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SagittaArc.find_intersection_points",
                    "signature": "build123d.SagittaArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.SagittaArc.find_tangent",
                    "signature": "build123d.SagittaArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.SagittaArc.fix",
                    "signature": "build123d.SagittaArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.fuse",
                    "signature": "build123d.SagittaArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.hash_code",
                    "signature": "build123d.SagittaArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.SagittaArc.intersect",
                    "signature": "build123d.SagittaArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.SagittaArc.is_equal",
                    "signature": "build123d.SagittaArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SagittaArc.is_null",
                    "signature": "build123d.SagittaArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.SagittaArc.is_same",
                    "signature": "build123d.SagittaArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SagittaArc.is_valid",
                    "signature": "build123d.SagittaArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.SagittaArc.iter_path_reverse",
                    "signature": "build123d.SagittaArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.SagittaArc.locate",
                    "signature": "build123d.SagittaArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.located",
                    "signature": "build123d.SagittaArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.location_at",
                    "signature": "build123d.SagittaArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.SagittaArc.locations",
                    "signature": "build123d.SagittaArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.SagittaArc.make_bezier",
                    "signature": "build123d.SagittaArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_circle",
                    "signature": "build123d.SagittaArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_ellipse",
                    "signature": "build123d.SagittaArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_helix",
                    "signature": "build123d.SagittaArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.SagittaArc.make_line",
                    "signature": "build123d.SagittaArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_mid_way",
                    "signature": "build123d.SagittaArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_spline",
                    "signature": "build123d.SagittaArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_spline_approx",
                    "signature": "build123d.SagittaArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_tangent_arc",
                    "signature": "build123d.SagittaArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.make_three_point_arc",
                    "signature": "build123d.SagittaArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.mesh",
                    "signature": "build123d.SagittaArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.SagittaArc.mirror",
                    "signature": "build123d.SagittaArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.move",
                    "signature": "build123d.SagittaArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.moved",
                    "signature": "build123d.SagittaArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.normal",
                    "signature": "build123d.SagittaArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.offset_2d",
                    "signature": "build123d.SagittaArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.SagittaArc.param_at",
                    "signature": "build123d.SagittaArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.SagittaArc.param_at_point",
                    "signature": "build123d.SagittaArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.SagittaArc.perpendicular_line",
                    "signature": "build123d.SagittaArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.position_at",
                    "signature": "build123d.SagittaArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.positions",
                    "signature": "build123d.SagittaArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.SagittaArc.project",
                    "signature": "build123d.SagittaArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.SagittaArc.project_faces",
                    "signature": "build123d.SagittaArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.SagittaArc.project_to_shape",
                    "signature": "build123d.SagittaArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.SagittaArc.project_to_viewport",
                    "signature": "build123d.SagittaArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.SagittaArc.relocate",
                    "signature": "build123d.SagittaArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.SagittaArc.reversed",
                    "signature": "build123d.SagittaArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.rotate",
                    "signature": "build123d.SagittaArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.scale",
                    "signature": "build123d.SagittaArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.shape_type",
                    "signature": "build123d.SagittaArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.SagittaArc.shell",
                    "signature": "build123d.SagittaArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.SagittaArc.shells",
                    "signature": "build123d.SagittaArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.SagittaArc.show_topology",
                    "signature": "build123d.SagittaArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.SagittaArc.solid",
                    "signature": "build123d.SagittaArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.SagittaArc.solids",
                    "signature": "build123d.SagittaArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.SagittaArc.split",
                    "signature": "build123d.SagittaArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.split_by_perimeter",
                    "signature": "build123d.SagittaArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.SagittaArc.start_point",
                    "signature": "build123d.SagittaArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.tangent_angle_at",
                    "signature": "build123d.SagittaArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.SagittaArc.tangent_at",
                    "signature": "build123d.SagittaArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.SagittaArc.tessellate",
                    "signature": "build123d.SagittaArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.SagittaArc.to_arcs",
                    "signature": "build123d.SagittaArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.SagittaArc.to_axis",
                    "signature": "build123d.SagittaArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.SagittaArc.to_splines",
                    "signature": "build123d.SagittaArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.SagittaArc.to_vtk_poly_data",
                    "signature": "build123d.SagittaArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.SagittaArc.to_wire",
                    "signature": "build123d.SagittaArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.SagittaArc.transform_geometry",
                    "signature": "build123d.SagittaArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.transform_shape",
                    "signature": "build123d.SagittaArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.transformed",
                    "signature": "build123d.SagittaArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.translate",
                    "signature": "build123d.SagittaArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SagittaArc.trim",
                    "signature": "build123d.SagittaArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.trim_to_length",
                    "signature": "build123d.SagittaArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.SagittaArc.vertex",
                    "signature": "build123d.SagittaArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.SagittaArc.vertices",
                    "signature": "build123d.SagittaArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.SagittaArc.wire",
                    "signature": "build123d.SagittaArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.SagittaArc.wires",
                    "signature": "build123d.SagittaArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Select",
            "signature": "build123d.Select()",
            "methods": [],
            "variables": [
                "ALL",
                "LAST",
                "NEW",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Shape",
            "signature": "build123d.Shape(obj: 'TopoDS_Shape' = None, label: 'str' = '', color: 'Color' = None, parent: 'Compound' = None)",
            "methods": [
                {
                    "name": "build123d.Shape.bounding_box",
                    "signature": "build123d.Shape.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Shape.cast",
                    "signature": "build123d.Shape.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.center",
                    "signature": "build123d.Shape.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Shape.clean",
                    "signature": "build123d.Shape.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.closest_points",
                    "signature": "build123d.Shape.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Shape.combined_center",
                    "signature": "build123d.Shape.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Shape.compound",
                    "signature": "build123d.Shape.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Shape.compounds",
                    "signature": "build123d.Shape.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Shape.compute_mass",
                    "signature": "build123d.Shape.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Shape.copy",
                    "signature": "build123d.Shape.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.copy_attributes_to",
                    "signature": "build123d.Shape.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Shape.cut",
                    "signature": "build123d.Shape.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.distance",
                    "signature": "build123d.Shape.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Shape.distance_to",
                    "signature": "build123d.Shape.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Shape.distance_to_with_closest_points",
                    "signature": "build123d.Shape.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Shape.distances",
                    "signature": "build123d.Shape.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Shape.edge",
                    "signature": "build123d.Shape.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Shape.edges",
                    "signature": "build123d.Shape.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Shape.export_brep",
                    "signature": "build123d.Shape.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Shape.export_step",
                    "signature": "build123d.Shape.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Shape.export_stl",
                    "signature": "build123d.Shape.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Shape.extrude",
                    "signature": "build123d.Shape.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.face",
                    "signature": "build123d.Shape.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Shape.faces",
                    "signature": "build123d.Shape.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Shape.faces_intersected_by_axis",
                    "signature": "build123d.Shape.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Shape.find_intersection",
                    "signature": "build123d.Shape.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Shape.find_intersection_points",
                    "signature": "build123d.Shape.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Shape.fix",
                    "signature": "build123d.Shape.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.fuse",
                    "signature": "build123d.Shape.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.hash_code",
                    "signature": "build123d.Shape.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Shape.intersect",
                    "signature": "build123d.Shape.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Shape.is_equal",
                    "signature": "build123d.Shape.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Shape.is_null",
                    "signature": "build123d.Shape.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Shape.is_same",
                    "signature": "build123d.Shape.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Shape.is_valid",
                    "signature": "build123d.Shape.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Shape.iter_path_reverse",
                    "signature": "build123d.Shape.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Shape.locate",
                    "signature": "build123d.Shape.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.located",
                    "signature": "build123d.Shape.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.mesh",
                    "signature": "build123d.Shape.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Shape.mirror",
                    "signature": "build123d.Shape.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.move",
                    "signature": "build123d.Shape.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.moved",
                    "signature": "build123d.Shape.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.project_faces",
                    "signature": "build123d.Shape.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Shape.project_to_viewport",
                    "signature": "build123d.Shape.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Shape.relocate",
                    "signature": "build123d.Shape.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Shape.rotate",
                    "signature": "build123d.Shape.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.scale",
                    "signature": "build123d.Shape.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.shape_type",
                    "signature": "build123d.Shape.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Shape.shell",
                    "signature": "build123d.Shape.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Shape.shells",
                    "signature": "build123d.Shape.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Shape.show_topology",
                    "signature": "build123d.Shape.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Shape.solid",
                    "signature": "build123d.Shape.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Shape.solids",
                    "signature": "build123d.Shape.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Shape.split",
                    "signature": "build123d.Shape.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.split_by_perimeter",
                    "signature": "build123d.Shape.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Shape.tessellate",
                    "signature": "build123d.Shape.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Shape.to_arcs",
                    "signature": "build123d.Shape.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Shape.to_splines",
                    "signature": "build123d.Shape.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Shape.to_vtk_poly_data",
                    "signature": "build123d.Shape.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Shape.transform_geometry",
                    "signature": "build123d.Shape.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.transform_shape",
                    "signature": "build123d.Shape.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.transformed",
                    "signature": "build123d.Shape.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Shape.translate",
                    "signature": "build123d.Shape.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Shape.vertex",
                    "signature": "build123d.Shape.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Shape.vertices",
                    "signature": "build123d.Shape.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Shape.wire",
                    "signature": "build123d.Shape.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Shape.wires",
                    "signature": "build123d.Shape.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size"
            ]
        },
        {
            "name": "build123d.ShapeList",
            "signature": "build123d.ShapeList()",
            "methods": [
                {
                    "name": "build123d.ShapeList.append",
                    "signature": "build123d.ShapeList.append(self, object, /)"
                },
                {
                    "name": "build123d.ShapeList.clear",
                    "signature": "build123d.ShapeList.clear(self, /)"
                },
                {
                    "name": "build123d.ShapeList.compound",
                    "signature": "build123d.ShapeList.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.ShapeList.compounds",
                    "signature": "build123d.ShapeList.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.ShapeList.copy",
                    "signature": "build123d.ShapeList.copy(self, /)"
                },
                {
                    "name": "build123d.ShapeList.count",
                    "signature": "build123d.ShapeList.count(self, value, /)"
                },
                {
                    "name": "build123d.ShapeList.edge",
                    "signature": "build123d.ShapeList.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.ShapeList.edges",
                    "signature": "build123d.ShapeList.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.ShapeList.extend",
                    "signature": "build123d.ShapeList.extend(self, iterable, /)"
                },
                {
                    "name": "build123d.ShapeList.face",
                    "signature": "build123d.ShapeList.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.ShapeList.faces",
                    "signature": "build123d.ShapeList.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ShapeList.filter_by",
                    "signature": "build123d.ShapeList.filter_by(self, filter_by: 'Union[ShapePredicate, Axis, Plane, GeomType]', reverse: 'bool' = False, tolerance: 'float' = 1e-05) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.filter_by_position",
                    "signature": "build123d.ShapeList.filter_by_position(self, axis: 'Axis', minimum: 'float', maximum: 'float', inclusive: 'tuple[bool, bool]' = (True, True)) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.group_by",
                    "signature": "build123d.ShapeList.group_by(self, group_by: 'Union[Callable[[Shape], K], Axis, Edge, Wire, SortBy]' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), reverse=False, tol_digits=6) -> 'GroupBy[T, K]'"
                },
                {
                    "name": "build123d.ShapeList.index",
                    "signature": "build123d.ShapeList.index(self, value, start=0, stop=9223372036854775807, /)"
                },
                {
                    "name": "build123d.ShapeList.insert",
                    "signature": "build123d.ShapeList.insert(self, index, object, /)"
                },
                {
                    "name": "build123d.ShapeList.pop",
                    "signature": "build123d.ShapeList.pop(self, index=-1, /)"
                },
                {
                    "name": "build123d.ShapeList.remove",
                    "signature": "build123d.ShapeList.remove(self, value, /)"
                },
                {
                    "name": "build123d.ShapeList.reverse",
                    "signature": "build123d.ShapeList.reverse(self, /)"
                },
                {
                    "name": "build123d.ShapeList.shell",
                    "signature": "build123d.ShapeList.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.ShapeList.shells",
                    "signature": "build123d.ShapeList.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.ShapeList.solid",
                    "signature": "build123d.ShapeList.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.ShapeList.solids",
                    "signature": "build123d.ShapeList.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.ShapeList.sort",
                    "signature": "build123d.ShapeList.sort(self, /, *, key=None, reverse=False)"
                },
                {
                    "name": "build123d.ShapeList.sort_by",
                    "signature": "build123d.ShapeList.sort_by(self, sort_by: 'Union[Axis, Edge, Wire, SortBy]' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), reverse: 'bool' = False) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.sort_by_distance",
                    "signature": "build123d.ShapeList.sort_by_distance(self, other: 'Union[Shape, VectorLike]', reverse: 'bool' = False) -> 'ShapeList[T]'"
                },
                {
                    "name": "build123d.ShapeList.vertex",
                    "signature": "build123d.ShapeList.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.ShapeList.vertices",
                    "signature": "build123d.ShapeList.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.ShapeList.wire",
                    "signature": "build123d.ShapeList.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.ShapeList.wires",
                    "signature": "build123d.ShapeList.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "first",
                "last"
            ]
        },
        {
            "name": "build123d.ShapePredicate",
            "signature": "build123d.ShapePredicate(*args, **kwargs)",
            "methods": [],
            "variables": []
        },
        {
            "name": "build123d.Shell",
            "signature": "build123d.Shell(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Shell.bounding_box",
                    "signature": "build123d.Shell.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Shell.cast",
                    "signature": "build123d.Shell.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.center",
                    "signature": "build123d.Shell.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Shell.clean",
                    "signature": "build123d.Shell.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.closest_points",
                    "signature": "build123d.Shell.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Shell.combined_center",
                    "signature": "build123d.Shell.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Shell.compound",
                    "signature": "build123d.Shell.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Shell.compounds",
                    "signature": "build123d.Shell.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Shell.compute_mass",
                    "signature": "build123d.Shell.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Shell.copy",
                    "signature": "build123d.Shell.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.copy_attributes_to",
                    "signature": "build123d.Shell.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Shell.cut",
                    "signature": "build123d.Shell.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.distance",
                    "signature": "build123d.Shell.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Shell.distance_to",
                    "signature": "build123d.Shell.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Shell.distance_to_with_closest_points",
                    "signature": "build123d.Shell.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Shell.distances",
                    "signature": "build123d.Shell.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Shell.edge",
                    "signature": "build123d.Shell.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Shell.edges",
                    "signature": "build123d.Shell.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Shell.export_brep",
                    "signature": "build123d.Shell.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Shell.export_step",
                    "signature": "build123d.Shell.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Shell.export_stl",
                    "signature": "build123d.Shell.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Shell.extrude",
                    "signature": "build123d.Shell.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.face",
                    "signature": "build123d.Shell.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Shell.faces",
                    "signature": "build123d.Shell.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Shell.faces_intersected_by_axis",
                    "signature": "build123d.Shell.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Shell.find_intersection",
                    "signature": "build123d.Shell.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Shell.find_intersection_points",
                    "signature": "build123d.Shell.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Shell.fix",
                    "signature": "build123d.Shell.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.fuse",
                    "signature": "build123d.Shell.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.hash_code",
                    "signature": "build123d.Shell.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Shell.intersect",
                    "signature": "build123d.Shell.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Shell.is_equal",
                    "signature": "build123d.Shell.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Shell.is_null",
                    "signature": "build123d.Shell.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Shell.is_same",
                    "signature": "build123d.Shell.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Shell.is_valid",
                    "signature": "build123d.Shell.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Shell.iter_path_reverse",
                    "signature": "build123d.Shell.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Shell.locate",
                    "signature": "build123d.Shell.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.located",
                    "signature": "build123d.Shell.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.make_loft",
                    "signature": "build123d.Shell.make_loft(objs: 'Iterable[Union[Vertex, Wire]]', ruled: 'bool' = False) -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.make_shell",
                    "signature": "build123d.Shell.make_shell(faces: 'Iterable[Face]') -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.mesh",
                    "signature": "build123d.Shell.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Shell.mirror",
                    "signature": "build123d.Shell.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.move",
                    "signature": "build123d.Shell.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.moved",
                    "signature": "build123d.Shell.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.project_faces",
                    "signature": "build123d.Shell.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Shell.project_to_viewport",
                    "signature": "build123d.Shell.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Shell.relocate",
                    "signature": "build123d.Shell.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Shell.rotate",
                    "signature": "build123d.Shell.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.scale",
                    "signature": "build123d.Shell.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.shape_type",
                    "signature": "build123d.Shell.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Shell.shell",
                    "signature": "build123d.Shell.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.shells",
                    "signature": "build123d.Shell.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Shell.show_topology",
                    "signature": "build123d.Shell.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Shell.solid",
                    "signature": "build123d.Shell.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Shell.solids",
                    "signature": "build123d.Shell.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Shell.split",
                    "signature": "build123d.Shell.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.split_by_perimeter",
                    "signature": "build123d.Shell.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Shell.sweep",
                    "signature": "build123d.Shell.sweep(profile: 'Union[Curve, Edge, Wire]', path: 'Union[Curve, Edge, Wire]', transition=<Transition.TRANSFORMED>) -> 'Shell'"
                },
                {
                    "name": "build123d.Shell.tessellate",
                    "signature": "build123d.Shell.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Shell.thicken",
                    "signature": "build123d.Shell.thicken(self, depth: 'float') -> 'Solid'"
                },
                {
                    "name": "build123d.Shell.to_arcs",
                    "signature": "build123d.Shell.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Shell.to_splines",
                    "signature": "build123d.Shell.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Shell.to_vtk_poly_data",
                    "signature": "build123d.Shell.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Shell.transform_geometry",
                    "signature": "build123d.Shell.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.transform_shape",
                    "signature": "build123d.Shell.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.transformed",
                    "signature": "build123d.Shell.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Shell.translate",
                    "signature": "build123d.Shell.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Shell.vertex",
                    "signature": "build123d.Shell.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Shell.vertices",
                    "signature": "build123d.Shell.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Shell.wire",
                    "signature": "build123d.Shell.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Shell.wires",
                    "signature": "build123d.Shell.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Side",
            "signature": "build123d.Side()",
            "methods": [],
            "variables": [
                "BOTH",
                "LEFT",
                "RIGHT",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Sketch",
            "signature": "build123d.Sketch()",
            "methods": [
                {
                    "name": "build123d.Sketch.bounding_box",
                    "signature": "build123d.Sketch.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Sketch.cast",
                    "signature": "build123d.Sketch.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.center",
                    "signature": "build123d.Sketch.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Sketch.chamfer",
                    "signature": "build123d.Sketch.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.clean",
                    "signature": "build123d.Sketch.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.closest_points",
                    "signature": "build123d.Sketch.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Sketch.combined_center",
                    "signature": "build123d.Sketch.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Sketch.compound",
                    "signature": "build123d.Sketch.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.compounds",
                    "signature": "build123d.Sketch.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Sketch.compute_mass",
                    "signature": "build123d.Sketch.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Sketch.copy",
                    "signature": "build123d.Sketch.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.copy_attributes_to",
                    "signature": "build123d.Sketch.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Sketch.cut",
                    "signature": "build123d.Sketch.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.distance",
                    "signature": "build123d.Sketch.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Sketch.distance_to",
                    "signature": "build123d.Sketch.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Sketch.distance_to_with_closest_points",
                    "signature": "build123d.Sketch.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Sketch.distances",
                    "signature": "build123d.Sketch.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Sketch.do_children_intersect",
                    "signature": "build123d.Sketch.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Sketch.dprism",
                    "signature": "build123d.Sketch.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Sketch.edge",
                    "signature": "build123d.Sketch.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Sketch.edges",
                    "signature": "build123d.Sketch.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Sketch.export_brep",
                    "signature": "build123d.Sketch.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.export_step",
                    "signature": "build123d.Sketch.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Sketch.export_stl",
                    "signature": "build123d.Sketch.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.extrude",
                    "signature": "build123d.Sketch.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.face",
                    "signature": "build123d.Sketch.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Sketch.faces",
                    "signature": "build123d.Sketch.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Sketch.faces_intersected_by_axis",
                    "signature": "build123d.Sketch.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Sketch.fillet",
                    "signature": "build123d.Sketch.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.find_intersection",
                    "signature": "build123d.Sketch.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Sketch.find_intersection_points",
                    "signature": "build123d.Sketch.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Sketch.first_level_shapes",
                    "signature": "build123d.Sketch.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Sketch.fix",
                    "signature": "build123d.Sketch.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.fuse",
                    "signature": "build123d.Sketch.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.get_type",
                    "signature": "build123d.Sketch.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Sketch.hash_code",
                    "signature": "build123d.Sketch.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Sketch.hollow",
                    "signature": "build123d.Sketch.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Sketch.intersect",
                    "signature": "build123d.Sketch.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.is_equal",
                    "signature": "build123d.Sketch.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.is_inside",
                    "signature": "build123d.Sketch.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.is_null",
                    "signature": "build123d.Sketch.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.is_same",
                    "signature": "build123d.Sketch.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.is_valid",
                    "signature": "build123d.Sketch.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Sketch.iter_path_reverse",
                    "signature": "build123d.Sketch.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Sketch.locate",
                    "signature": "build123d.Sketch.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.located",
                    "signature": "build123d.Sketch.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.make_compound",
                    "signature": "build123d.Sketch.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.make_text",
                    "signature": "build123d.Sketch.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Sketch.make_triad",
                    "signature": "build123d.Sketch.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.max_fillet",
                    "signature": "build123d.Sketch.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Sketch.mesh",
                    "signature": "build123d.Sketch.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Sketch.mirror",
                    "signature": "build123d.Sketch.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.move",
                    "signature": "build123d.Sketch.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.moved",
                    "signature": "build123d.Sketch.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.offset_3d",
                    "signature": "build123d.Sketch.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Sketch.project_faces",
                    "signature": "build123d.Sketch.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Sketch.project_to_viewport",
                    "signature": "build123d.Sketch.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Sketch.relocate",
                    "signature": "build123d.Sketch.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Sketch.rotate",
                    "signature": "build123d.Sketch.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.scale",
                    "signature": "build123d.Sketch.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.shape_type",
                    "signature": "build123d.Sketch.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Sketch.shell",
                    "signature": "build123d.Sketch.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Sketch.shells",
                    "signature": "build123d.Sketch.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Sketch.show_topology",
                    "signature": "build123d.Sketch.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Sketch.solid",
                    "signature": "build123d.Sketch.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Sketch.solids",
                    "signature": "build123d.Sketch.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Sketch.split",
                    "signature": "build123d.Sketch.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.split_by_perimeter",
                    "signature": "build123d.Sketch.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Sketch.tessellate",
                    "signature": "build123d.Sketch.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Sketch.to_arcs",
                    "signature": "build123d.Sketch.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Sketch.to_splines",
                    "signature": "build123d.Sketch.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Sketch.to_vtk_poly_data",
                    "signature": "build123d.Sketch.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Sketch.transform_geometry",
                    "signature": "build123d.Sketch.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.transform_shape",
                    "signature": "build123d.Sketch.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.transformed",
                    "signature": "build123d.Sketch.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.translate",
                    "signature": "build123d.Sketch.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Sketch.unwrap",
                    "signature": "build123d.Sketch.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Sketch.vertex",
                    "signature": "build123d.Sketch.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Sketch.vertices",
                    "signature": "build123d.Sketch.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Sketch.wire",
                    "signature": "build123d.Sketch.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Sketch.wires",
                    "signature": "build123d.Sketch.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.SkipClean",
            "signature": "build123d.SkipClean()",
            "methods": [],
            "variables": [
                "clean"
            ]
        },
        {
            "name": "build123d.SlotArc",
            "signature": "build123d.SlotArc(arc: 'Union[Edge, Wire]', height: 'float', rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.SlotArc.bounding_box",
                    "signature": "build123d.SlotArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.SlotArc.cast",
                    "signature": "build123d.SlotArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.center",
                    "signature": "build123d.SlotArc.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotArc.chamfer",
                    "signature": "build123d.SlotArc.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.clean",
                    "signature": "build123d.SlotArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.closest_points",
                    "signature": "build123d.SlotArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotArc.combined_center",
                    "signature": "build123d.SlotArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotArc.compound",
                    "signature": "build123d.SlotArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.compounds",
                    "signature": "build123d.SlotArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.SlotArc.compute_mass",
                    "signature": "build123d.SlotArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotArc.copy",
                    "signature": "build123d.SlotArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.copy_attributes_to",
                    "signature": "build123d.SlotArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.SlotArc.cut",
                    "signature": "build123d.SlotArc.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.distance",
                    "signature": "build123d.SlotArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotArc.distance_to",
                    "signature": "build123d.SlotArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.SlotArc.distance_to_with_closest_points",
                    "signature": "build123d.SlotArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotArc.distances",
                    "signature": "build123d.SlotArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.SlotArc.do_children_intersect",
                    "signature": "build123d.SlotArc.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.SlotArc.dprism",
                    "signature": "build123d.SlotArc.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotArc.edge",
                    "signature": "build123d.SlotArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.SlotArc.edges",
                    "signature": "build123d.SlotArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.SlotArc.export_brep",
                    "signature": "build123d.SlotArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.export_step",
                    "signature": "build123d.SlotArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.SlotArc.export_stl",
                    "signature": "build123d.SlotArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.extrude",
                    "signature": "build123d.SlotArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.face",
                    "signature": "build123d.SlotArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.SlotArc.faces",
                    "signature": "build123d.SlotArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotArc.faces_intersected_by_axis",
                    "signature": "build123d.SlotArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotArc.fillet",
                    "signature": "build123d.SlotArc.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.find_intersection",
                    "signature": "build123d.SlotArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotArc.find_intersection_points",
                    "signature": "build123d.SlotArc.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotArc.first_level_shapes",
                    "signature": "build123d.SlotArc.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.SlotArc.fix",
                    "signature": "build123d.SlotArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.fuse",
                    "signature": "build123d.SlotArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.get_type",
                    "signature": "build123d.SlotArc.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.SlotArc.hash_code",
                    "signature": "build123d.SlotArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.SlotArc.hollow",
                    "signature": "build123d.SlotArc.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotArc.intersect",
                    "signature": "build123d.SlotArc.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.is_equal",
                    "signature": "build123d.SlotArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.is_inside",
                    "signature": "build123d.SlotArc.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.is_null",
                    "signature": "build123d.SlotArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.is_same",
                    "signature": "build123d.SlotArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.is_valid",
                    "signature": "build123d.SlotArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotArc.iter_path_reverse",
                    "signature": "build123d.SlotArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.SlotArc.locate",
                    "signature": "build123d.SlotArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.located",
                    "signature": "build123d.SlotArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.make_compound",
                    "signature": "build123d.SlotArc.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.make_text",
                    "signature": "build123d.SlotArc.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.SlotArc.make_triad",
                    "signature": "build123d.SlotArc.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.max_fillet",
                    "signature": "build123d.SlotArc.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.SlotArc.mesh",
                    "signature": "build123d.SlotArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.SlotArc.mirror",
                    "signature": "build123d.SlotArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.move",
                    "signature": "build123d.SlotArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.moved",
                    "signature": "build123d.SlotArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.offset_3d",
                    "signature": "build123d.SlotArc.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotArc.project_faces",
                    "signature": "build123d.SlotArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotArc.project_to_viewport",
                    "signature": "build123d.SlotArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.SlotArc.relocate",
                    "signature": "build123d.SlotArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.SlotArc.rotate",
                    "signature": "build123d.SlotArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.scale",
                    "signature": "build123d.SlotArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.shape_type",
                    "signature": "build123d.SlotArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.SlotArc.shell",
                    "signature": "build123d.SlotArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.SlotArc.shells",
                    "signature": "build123d.SlotArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.SlotArc.show_topology",
                    "signature": "build123d.SlotArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.SlotArc.solid",
                    "signature": "build123d.SlotArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotArc.solids",
                    "signature": "build123d.SlotArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.SlotArc.split",
                    "signature": "build123d.SlotArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.split_by_perimeter",
                    "signature": "build123d.SlotArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.SlotArc.tessellate",
                    "signature": "build123d.SlotArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.SlotArc.to_arcs",
                    "signature": "build123d.SlotArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.SlotArc.to_splines",
                    "signature": "build123d.SlotArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.SlotArc.to_vtk_poly_data",
                    "signature": "build123d.SlotArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.SlotArc.transform_geometry",
                    "signature": "build123d.SlotArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.transform_shape",
                    "signature": "build123d.SlotArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.transformed",
                    "signature": "build123d.SlotArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.translate",
                    "signature": "build123d.SlotArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotArc.unwrap",
                    "signature": "build123d.SlotArc.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.SlotArc.vertex",
                    "signature": "build123d.SlotArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.SlotArc.vertices",
                    "signature": "build123d.SlotArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.SlotArc.wire",
                    "signature": "build123d.SlotArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.SlotArc.wires",
                    "signature": "build123d.SlotArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.SlotCenterPoint",
            "signature": "build123d.SlotCenterPoint(center: 'VectorLike', point: 'VectorLike', height: 'float', rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.SlotCenterPoint.bounding_box",
                    "signature": "build123d.SlotCenterPoint.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.SlotCenterPoint.cast",
                    "signature": "build123d.SlotCenterPoint.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.center",
                    "signature": "build123d.SlotCenterPoint.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotCenterPoint.chamfer",
                    "signature": "build123d.SlotCenterPoint.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.clean",
                    "signature": "build123d.SlotCenterPoint.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.closest_points",
                    "signature": "build123d.SlotCenterPoint.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.combined_center",
                    "signature": "build123d.SlotCenterPoint.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotCenterPoint.compound",
                    "signature": "build123d.SlotCenterPoint.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.compounds",
                    "signature": "build123d.SlotCenterPoint.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.compute_mass",
                    "signature": "build123d.SlotCenterPoint.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterPoint.copy",
                    "signature": "build123d.SlotCenterPoint.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.copy_attributes_to",
                    "signature": "build123d.SlotCenterPoint.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.SlotCenterPoint.cut",
                    "signature": "build123d.SlotCenterPoint.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.distance",
                    "signature": "build123d.SlotCenterPoint.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterPoint.distance_to",
                    "signature": "build123d.SlotCenterPoint.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterPoint.distance_to_with_closest_points",
                    "signature": "build123d.SlotCenterPoint.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.distances",
                    "signature": "build123d.SlotCenterPoint.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.do_children_intersect",
                    "signature": "build123d.SlotCenterPoint.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.dprism",
                    "signature": "build123d.SlotCenterPoint.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterPoint.edge",
                    "signature": "build123d.SlotCenterPoint.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.SlotCenterPoint.edges",
                    "signature": "build123d.SlotCenterPoint.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.export_brep",
                    "signature": "build123d.SlotCenterPoint.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.export_step",
                    "signature": "build123d.SlotCenterPoint.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.SlotCenterPoint.export_stl",
                    "signature": "build123d.SlotCenterPoint.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.extrude",
                    "signature": "build123d.SlotCenterPoint.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.face",
                    "signature": "build123d.SlotCenterPoint.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.SlotCenterPoint.faces",
                    "signature": "build123d.SlotCenterPoint.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.faces_intersected_by_axis",
                    "signature": "build123d.SlotCenterPoint.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.fillet",
                    "signature": "build123d.SlotCenterPoint.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.find_intersection",
                    "signature": "build123d.SlotCenterPoint.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.find_intersection_points",
                    "signature": "build123d.SlotCenterPoint.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.first_level_shapes",
                    "signature": "build123d.SlotCenterPoint.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.fix",
                    "signature": "build123d.SlotCenterPoint.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.fuse",
                    "signature": "build123d.SlotCenterPoint.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.get_type",
                    "signature": "build123d.SlotCenterPoint.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.hash_code",
                    "signature": "build123d.SlotCenterPoint.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.SlotCenterPoint.hollow",
                    "signature": "build123d.SlotCenterPoint.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterPoint.intersect",
                    "signature": "build123d.SlotCenterPoint.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.is_equal",
                    "signature": "build123d.SlotCenterPoint.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.is_inside",
                    "signature": "build123d.SlotCenterPoint.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.is_null",
                    "signature": "build123d.SlotCenterPoint.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.is_same",
                    "signature": "build123d.SlotCenterPoint.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.is_valid",
                    "signature": "build123d.SlotCenterPoint.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterPoint.iter_path_reverse",
                    "signature": "build123d.SlotCenterPoint.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.SlotCenterPoint.locate",
                    "signature": "build123d.SlotCenterPoint.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.located",
                    "signature": "build123d.SlotCenterPoint.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.make_compound",
                    "signature": "build123d.SlotCenterPoint.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.make_text",
                    "signature": "build123d.SlotCenterPoint.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.SlotCenterPoint.make_triad",
                    "signature": "build123d.SlotCenterPoint.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.max_fillet",
                    "signature": "build123d.SlotCenterPoint.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterPoint.mesh",
                    "signature": "build123d.SlotCenterPoint.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.SlotCenterPoint.mirror",
                    "signature": "build123d.SlotCenterPoint.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.move",
                    "signature": "build123d.SlotCenterPoint.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.moved",
                    "signature": "build123d.SlotCenterPoint.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.offset_3d",
                    "signature": "build123d.SlotCenterPoint.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterPoint.project_faces",
                    "signature": "build123d.SlotCenterPoint.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterPoint.project_to_viewport",
                    "signature": "build123d.SlotCenterPoint.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.relocate",
                    "signature": "build123d.SlotCenterPoint.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.SlotCenterPoint.rotate",
                    "signature": "build123d.SlotCenterPoint.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.scale",
                    "signature": "build123d.SlotCenterPoint.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.shape_type",
                    "signature": "build123d.SlotCenterPoint.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.SlotCenterPoint.shell",
                    "signature": "build123d.SlotCenterPoint.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.SlotCenterPoint.shells",
                    "signature": "build123d.SlotCenterPoint.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.show_topology",
                    "signature": "build123d.SlotCenterPoint.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.SlotCenterPoint.solid",
                    "signature": "build123d.SlotCenterPoint.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterPoint.solids",
                    "signature": "build123d.SlotCenterPoint.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.split",
                    "signature": "build123d.SlotCenterPoint.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.split_by_perimeter",
                    "signature": "build123d.SlotCenterPoint.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.SlotCenterPoint.tessellate",
                    "signature": "build123d.SlotCenterPoint.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.to_arcs",
                    "signature": "build123d.SlotCenterPoint.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.SlotCenterPoint.to_splines",
                    "signature": "build123d.SlotCenterPoint.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.SlotCenterPoint.to_vtk_poly_data",
                    "signature": "build123d.SlotCenterPoint.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.SlotCenterPoint.transform_geometry",
                    "signature": "build123d.SlotCenterPoint.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.transform_shape",
                    "signature": "build123d.SlotCenterPoint.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.transformed",
                    "signature": "build123d.SlotCenterPoint.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.translate",
                    "signature": "build123d.SlotCenterPoint.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterPoint.unwrap",
                    "signature": "build123d.SlotCenterPoint.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.vertex",
                    "signature": "build123d.SlotCenterPoint.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.SlotCenterPoint.vertices",
                    "signature": "build123d.SlotCenterPoint.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.SlotCenterPoint.wire",
                    "signature": "build123d.SlotCenterPoint.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.SlotCenterPoint.wires",
                    "signature": "build123d.SlotCenterPoint.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.SlotCenterToCenter",
            "signature": "build123d.SlotCenterToCenter(center_separation: 'float', height: 'float', rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.SlotCenterToCenter.bounding_box",
                    "signature": "build123d.SlotCenterToCenter.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.cast",
                    "signature": "build123d.SlotCenterToCenter.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.center",
                    "signature": "build123d.SlotCenterToCenter.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.chamfer",
                    "signature": "build123d.SlotCenterToCenter.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.clean",
                    "signature": "build123d.SlotCenterToCenter.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.closest_points",
                    "signature": "build123d.SlotCenterToCenter.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.combined_center",
                    "signature": "build123d.SlotCenterToCenter.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.compound",
                    "signature": "build123d.SlotCenterToCenter.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.compounds",
                    "signature": "build123d.SlotCenterToCenter.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.compute_mass",
                    "signature": "build123d.SlotCenterToCenter.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.copy",
                    "signature": "build123d.SlotCenterToCenter.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.copy_attributes_to",
                    "signature": "build123d.SlotCenterToCenter.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.SlotCenterToCenter.cut",
                    "signature": "build123d.SlotCenterToCenter.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.distance",
                    "signature": "build123d.SlotCenterToCenter.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.distance_to",
                    "signature": "build123d.SlotCenterToCenter.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.distance_to_with_closest_points",
                    "signature": "build123d.SlotCenterToCenter.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.distances",
                    "signature": "build123d.SlotCenterToCenter.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.do_children_intersect",
                    "signature": "build123d.SlotCenterToCenter.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.dprism",
                    "signature": "build123d.SlotCenterToCenter.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.edge",
                    "signature": "build123d.SlotCenterToCenter.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.edges",
                    "signature": "build123d.SlotCenterToCenter.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.export_brep",
                    "signature": "build123d.SlotCenterToCenter.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.export_step",
                    "signature": "build123d.SlotCenterToCenter.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.export_stl",
                    "signature": "build123d.SlotCenterToCenter.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.extrude",
                    "signature": "build123d.SlotCenterToCenter.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.face",
                    "signature": "build123d.SlotCenterToCenter.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.faces",
                    "signature": "build123d.SlotCenterToCenter.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.faces_intersected_by_axis",
                    "signature": "build123d.SlotCenterToCenter.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.fillet",
                    "signature": "build123d.SlotCenterToCenter.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.find_intersection",
                    "signature": "build123d.SlotCenterToCenter.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.find_intersection_points",
                    "signature": "build123d.SlotCenterToCenter.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.first_level_shapes",
                    "signature": "build123d.SlotCenterToCenter.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.fix",
                    "signature": "build123d.SlotCenterToCenter.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.fuse",
                    "signature": "build123d.SlotCenterToCenter.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.get_type",
                    "signature": "build123d.SlotCenterToCenter.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.hash_code",
                    "signature": "build123d.SlotCenterToCenter.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.hollow",
                    "signature": "build123d.SlotCenterToCenter.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.intersect",
                    "signature": "build123d.SlotCenterToCenter.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.is_equal",
                    "signature": "build123d.SlotCenterToCenter.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.is_inside",
                    "signature": "build123d.SlotCenterToCenter.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.is_null",
                    "signature": "build123d.SlotCenterToCenter.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.is_same",
                    "signature": "build123d.SlotCenterToCenter.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.is_valid",
                    "signature": "build123d.SlotCenterToCenter.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.iter_path_reverse",
                    "signature": "build123d.SlotCenterToCenter.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.SlotCenterToCenter.locate",
                    "signature": "build123d.SlotCenterToCenter.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.located",
                    "signature": "build123d.SlotCenterToCenter.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.make_compound",
                    "signature": "build123d.SlotCenterToCenter.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.make_text",
                    "signature": "build123d.SlotCenterToCenter.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.SlotCenterToCenter.make_triad",
                    "signature": "build123d.SlotCenterToCenter.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.max_fillet",
                    "signature": "build123d.SlotCenterToCenter.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.mesh",
                    "signature": "build123d.SlotCenterToCenter.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.SlotCenterToCenter.mirror",
                    "signature": "build123d.SlotCenterToCenter.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.move",
                    "signature": "build123d.SlotCenterToCenter.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.moved",
                    "signature": "build123d.SlotCenterToCenter.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.offset_3d",
                    "signature": "build123d.SlotCenterToCenter.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.project_faces",
                    "signature": "build123d.SlotCenterToCenter.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.project_to_viewport",
                    "signature": "build123d.SlotCenterToCenter.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.relocate",
                    "signature": "build123d.SlotCenterToCenter.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.SlotCenterToCenter.rotate",
                    "signature": "build123d.SlotCenterToCenter.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.scale",
                    "signature": "build123d.SlotCenterToCenter.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.shape_type",
                    "signature": "build123d.SlotCenterToCenter.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.shell",
                    "signature": "build123d.SlotCenterToCenter.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.shells",
                    "signature": "build123d.SlotCenterToCenter.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.show_topology",
                    "signature": "build123d.SlotCenterToCenter.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.solid",
                    "signature": "build123d.SlotCenterToCenter.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.solids",
                    "signature": "build123d.SlotCenterToCenter.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.split",
                    "signature": "build123d.SlotCenterToCenter.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.split_by_perimeter",
                    "signature": "build123d.SlotCenterToCenter.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.SlotCenterToCenter.tessellate",
                    "signature": "build123d.SlotCenterToCenter.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.to_arcs",
                    "signature": "build123d.SlotCenterToCenter.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.to_splines",
                    "signature": "build123d.SlotCenterToCenter.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.to_vtk_poly_data",
                    "signature": "build123d.SlotCenterToCenter.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.transform_geometry",
                    "signature": "build123d.SlotCenterToCenter.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.transform_shape",
                    "signature": "build123d.SlotCenterToCenter.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.transformed",
                    "signature": "build123d.SlotCenterToCenter.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.translate",
                    "signature": "build123d.SlotCenterToCenter.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.unwrap",
                    "signature": "build123d.SlotCenterToCenter.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.vertex",
                    "signature": "build123d.SlotCenterToCenter.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.vertices",
                    "signature": "build123d.SlotCenterToCenter.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.wire",
                    "signature": "build123d.SlotCenterToCenter.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.SlotCenterToCenter.wires",
                    "signature": "build123d.SlotCenterToCenter.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.SlotOverall",
            "signature": "build123d.SlotOverall(width: 'float', height: 'float', rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.SlotOverall.bounding_box",
                    "signature": "build123d.SlotOverall.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.SlotOverall.cast",
                    "signature": "build123d.SlotOverall.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.center",
                    "signature": "build123d.SlotOverall.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotOverall.chamfer",
                    "signature": "build123d.SlotOverall.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.clean",
                    "signature": "build123d.SlotOverall.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.closest_points",
                    "signature": "build123d.SlotOverall.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotOverall.combined_center",
                    "signature": "build123d.SlotOverall.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.SlotOverall.compound",
                    "signature": "build123d.SlotOverall.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.compounds",
                    "signature": "build123d.SlotOverall.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.SlotOverall.compute_mass",
                    "signature": "build123d.SlotOverall.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotOverall.copy",
                    "signature": "build123d.SlotOverall.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.copy_attributes_to",
                    "signature": "build123d.SlotOverall.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.SlotOverall.cut",
                    "signature": "build123d.SlotOverall.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.distance",
                    "signature": "build123d.SlotOverall.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.SlotOverall.distance_to",
                    "signature": "build123d.SlotOverall.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.SlotOverall.distance_to_with_closest_points",
                    "signature": "build123d.SlotOverall.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.SlotOverall.distances",
                    "signature": "build123d.SlotOverall.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.SlotOverall.do_children_intersect",
                    "signature": "build123d.SlotOverall.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.SlotOverall.dprism",
                    "signature": "build123d.SlotOverall.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotOverall.edge",
                    "signature": "build123d.SlotOverall.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.SlotOverall.edges",
                    "signature": "build123d.SlotOverall.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.SlotOverall.export_brep",
                    "signature": "build123d.SlotOverall.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.export_step",
                    "signature": "build123d.SlotOverall.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.SlotOverall.export_stl",
                    "signature": "build123d.SlotOverall.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.extrude",
                    "signature": "build123d.SlotOverall.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.face",
                    "signature": "build123d.SlotOverall.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.SlotOverall.faces",
                    "signature": "build123d.SlotOverall.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotOverall.faces_intersected_by_axis",
                    "signature": "build123d.SlotOverall.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.SlotOverall.fillet",
                    "signature": "build123d.SlotOverall.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.find_intersection",
                    "signature": "build123d.SlotOverall.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotOverall.find_intersection_points",
                    "signature": "build123d.SlotOverall.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.SlotOverall.first_level_shapes",
                    "signature": "build123d.SlotOverall.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.SlotOverall.fix",
                    "signature": "build123d.SlotOverall.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.fuse",
                    "signature": "build123d.SlotOverall.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.get_type",
                    "signature": "build123d.SlotOverall.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.SlotOverall.hash_code",
                    "signature": "build123d.SlotOverall.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.SlotOverall.hollow",
                    "signature": "build123d.SlotOverall.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotOverall.intersect",
                    "signature": "build123d.SlotOverall.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.is_equal",
                    "signature": "build123d.SlotOverall.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.is_inside",
                    "signature": "build123d.SlotOverall.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.is_null",
                    "signature": "build123d.SlotOverall.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.is_same",
                    "signature": "build123d.SlotOverall.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.is_valid",
                    "signature": "build123d.SlotOverall.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.SlotOverall.iter_path_reverse",
                    "signature": "build123d.SlotOverall.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.SlotOverall.locate",
                    "signature": "build123d.SlotOverall.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.located",
                    "signature": "build123d.SlotOverall.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.make_compound",
                    "signature": "build123d.SlotOverall.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.make_text",
                    "signature": "build123d.SlotOverall.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.SlotOverall.make_triad",
                    "signature": "build123d.SlotOverall.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.max_fillet",
                    "signature": "build123d.SlotOverall.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.SlotOverall.mesh",
                    "signature": "build123d.SlotOverall.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.SlotOverall.mirror",
                    "signature": "build123d.SlotOverall.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.move",
                    "signature": "build123d.SlotOverall.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.moved",
                    "signature": "build123d.SlotOverall.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.offset_3d",
                    "signature": "build123d.SlotOverall.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotOverall.project_faces",
                    "signature": "build123d.SlotOverall.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.SlotOverall.project_to_viewport",
                    "signature": "build123d.SlotOverall.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.SlotOverall.relocate",
                    "signature": "build123d.SlotOverall.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.SlotOverall.rotate",
                    "signature": "build123d.SlotOverall.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.scale",
                    "signature": "build123d.SlotOverall.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.shape_type",
                    "signature": "build123d.SlotOverall.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.SlotOverall.shell",
                    "signature": "build123d.SlotOverall.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.SlotOverall.shells",
                    "signature": "build123d.SlotOverall.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.SlotOverall.show_topology",
                    "signature": "build123d.SlotOverall.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.SlotOverall.solid",
                    "signature": "build123d.SlotOverall.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.SlotOverall.solids",
                    "signature": "build123d.SlotOverall.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.SlotOverall.split",
                    "signature": "build123d.SlotOverall.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.split_by_perimeter",
                    "signature": "build123d.SlotOverall.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.SlotOverall.tessellate",
                    "signature": "build123d.SlotOverall.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.SlotOverall.to_arcs",
                    "signature": "build123d.SlotOverall.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.SlotOverall.to_splines",
                    "signature": "build123d.SlotOverall.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.SlotOverall.to_vtk_poly_data",
                    "signature": "build123d.SlotOverall.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.SlotOverall.transform_geometry",
                    "signature": "build123d.SlotOverall.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.transform_shape",
                    "signature": "build123d.SlotOverall.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.transformed",
                    "signature": "build123d.SlotOverall.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.translate",
                    "signature": "build123d.SlotOverall.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.SlotOverall.unwrap",
                    "signature": "build123d.SlotOverall.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.SlotOverall.vertex",
                    "signature": "build123d.SlotOverall.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.SlotOverall.vertices",
                    "signature": "build123d.SlotOverall.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.SlotOverall.wire",
                    "signature": "build123d.SlotOverall.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.SlotOverall.wires",
                    "signature": "build123d.SlotOverall.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Solid",
            "signature": "build123d.Solid(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Solid.bounding_box",
                    "signature": "build123d.Solid.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Solid.cast",
                    "signature": "build123d.Solid.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.center",
                    "signature": "build123d.Solid.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Solid.chamfer",
                    "signature": "build123d.Solid.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.clean",
                    "signature": "build123d.Solid.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.closest_points",
                    "signature": "build123d.Solid.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Solid.combined_center",
                    "signature": "build123d.Solid.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Solid.compound",
                    "signature": "build123d.Solid.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Solid.compounds",
                    "signature": "build123d.Solid.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Solid.compute_mass",
                    "signature": "build123d.Solid.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Solid.copy",
                    "signature": "build123d.Solid.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.copy_attributes_to",
                    "signature": "build123d.Solid.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Solid.cut",
                    "signature": "build123d.Solid.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.distance",
                    "signature": "build123d.Solid.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Solid.distance_to",
                    "signature": "build123d.Solid.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Solid.distance_to_with_closest_points",
                    "signature": "build123d.Solid.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Solid.distances",
                    "signature": "build123d.Solid.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Solid.dprism",
                    "signature": "build123d.Solid.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.edge",
                    "signature": "build123d.Solid.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Solid.edges",
                    "signature": "build123d.Solid.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Solid.export_brep",
                    "signature": "build123d.Solid.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Solid.export_step",
                    "signature": "build123d.Solid.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Solid.export_stl",
                    "signature": "build123d.Solid.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Solid.extrude",
                    "signature": "build123d.Solid.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.extrude_linear_with_rotation",
                    "signature": "build123d.Solid.extrude_linear_with_rotation(section: 'Union[Face, Wire]', center: 'VectorLike', normal: 'VectorLike', angle: 'float', inner_wires: 'list[Wire]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.extrude_taper",
                    "signature": "build123d.Solid.extrude_taper(profile: 'Face', direction: 'VectorLike', taper: 'float', flip_inner: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.extrude_until",
                    "signature": "build123d.Solid.extrude_until(section: 'Face', target_object: 'Union[Compound, Solid]', direction: 'VectorLike', until: 'Until' = <Until.NEXT>) -> 'Union[Compound, Solid]'"
                },
                {
                    "name": "build123d.Solid.face",
                    "signature": "build123d.Solid.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Solid.faces",
                    "signature": "build123d.Solid.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Solid.faces_intersected_by_axis",
                    "signature": "build123d.Solid.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Solid.fillet",
                    "signature": "build123d.Solid.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.find_intersection",
                    "signature": "build123d.Solid.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Solid.find_intersection_points",
                    "signature": "build123d.Solid.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Solid.fix",
                    "signature": "build123d.Solid.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.from_bounding_box",
                    "signature": "build123d.Solid.from_bounding_box(bbox: 'BoundBox') -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.fuse",
                    "signature": "build123d.Solid.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.hash_code",
                    "signature": "build123d.Solid.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Solid.hollow",
                    "signature": "build123d.Solid.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.intersect",
                    "signature": "build123d.Solid.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Solid.is_equal",
                    "signature": "build123d.Solid.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Solid.is_inside",
                    "signature": "build123d.Solid.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Solid.is_null",
                    "signature": "build123d.Solid.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Solid.is_same",
                    "signature": "build123d.Solid.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Solid.is_valid",
                    "signature": "build123d.Solid.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Solid.iter_path_reverse",
                    "signature": "build123d.Solid.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Solid.locate",
                    "signature": "build123d.Solid.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.located",
                    "signature": "build123d.Solid.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.make_box",
                    "signature": "build123d.Solid.make_box(length: 'float', width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_cone",
                    "signature": "build123d.Solid.make_cone(base_radius: 'float', top_radius: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), angle: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_cylinder",
                    "signature": "build123d.Solid.make_cylinder(radius: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), angle: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_loft",
                    "signature": "build123d.Solid.make_loft(objs: 'Iterable[Union[Vertex, Wire]]', ruled: 'bool' = False) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_solid",
                    "signature": "build123d.Solid.make_solid(shell: 'Shell') -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_sphere",
                    "signature": "build123d.Solid.make_sphere(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), angle1: 'float' = -90, angle2: 'float' = 90, angle3: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_torus",
                    "signature": "build123d.Solid.make_torus(major_radius: 'float', minor_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 0, end_angle: 'float' = 360, major_angle: 'float' = 360) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.make_wedge",
                    "signature": "build123d.Solid.make_wedge(delta_x: 'float', delta_y: 'float', delta_z: 'float', min_x: 'float', min_z: 'float', max_x: 'float', max_z: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.max_fillet",
                    "signature": "build123d.Solid.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Solid.mesh",
                    "signature": "build123d.Solid.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Solid.mirror",
                    "signature": "build123d.Solid.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.move",
                    "signature": "build123d.Solid.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.moved",
                    "signature": "build123d.Solid.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.offset_3d",
                    "signature": "build123d.Solid.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.project_faces",
                    "signature": "build123d.Solid.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Solid.project_to_viewport",
                    "signature": "build123d.Solid.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Solid.relocate",
                    "signature": "build123d.Solid.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Solid.revolve",
                    "signature": "build123d.Solid.revolve(section: 'Union[Face, Wire]', angle: 'float', axis: 'Axis', inner_wires: 'list[Wire]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.rotate",
                    "signature": "build123d.Solid.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.scale",
                    "signature": "build123d.Solid.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.shape_type",
                    "signature": "build123d.Solid.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Solid.shell",
                    "signature": "build123d.Solid.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Solid.shells",
                    "signature": "build123d.Solid.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Solid.show_topology",
                    "signature": "build123d.Solid.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Solid.solid",
                    "signature": "build123d.Solid.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.solids",
                    "signature": "build123d.Solid.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Solid.split",
                    "signature": "build123d.Solid.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.split_by_perimeter",
                    "signature": "build123d.Solid.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Solid.sweep",
                    "signature": "build123d.Solid.sweep(section: 'Union[Face, Wire]', path: 'Union[Wire, Edge]', inner_wires: 'list[Wire]' = None, make_solid: 'bool' = True, is_frenet: 'bool' = False, mode: 'Union[Vector, Wire, Edge, None]' = None, transition: 'Transition' = <Transition.TRANSFORMED>) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.sweep_multi",
                    "signature": "build123d.Solid.sweep_multi(profiles: 'Iterable[Union[Wire, Face]]', path: 'Union[Wire, Edge]', make_solid: 'bool' = True, is_frenet: 'bool' = False, mode: 'Union[Vector, Wire, Edge, None]' = None) -> 'Solid'"
                },
                {
                    "name": "build123d.Solid.tessellate",
                    "signature": "build123d.Solid.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Solid.to_arcs",
                    "signature": "build123d.Solid.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Solid.to_splines",
                    "signature": "build123d.Solid.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Solid.to_vtk_poly_data",
                    "signature": "build123d.Solid.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Solid.transform_geometry",
                    "signature": "build123d.Solid.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.transform_shape",
                    "signature": "build123d.Solid.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.transformed",
                    "signature": "build123d.Solid.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Solid.translate",
                    "signature": "build123d.Solid.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Solid.vertex",
                    "signature": "build123d.Solid.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Solid.vertices",
                    "signature": "build123d.Solid.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Solid.wire",
                    "signature": "build123d.Solid.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Solid.wires",
                    "signature": "build123d.Solid.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.SortBy",
            "signature": "build123d.SortBy()",
            "methods": [],
            "variables": [
                "AREA",
                "DISTANCE",
                "LENGTH",
                "RADIUS",
                "VOLUME",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Sphere",
            "signature": "build123d.Sphere(radius: 'float', arc_size1: 'float' = -90, arc_size2: 'float' = 90, arc_size3: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Sphere.bounding_box",
                    "signature": "build123d.Sphere.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Sphere.cast",
                    "signature": "build123d.Sphere.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.center",
                    "signature": "build123d.Sphere.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Sphere.chamfer",
                    "signature": "build123d.Sphere.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.clean",
                    "signature": "build123d.Sphere.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.closest_points",
                    "signature": "build123d.Sphere.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Sphere.combined_center",
                    "signature": "build123d.Sphere.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Sphere.compound",
                    "signature": "build123d.Sphere.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.compounds",
                    "signature": "build123d.Sphere.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Sphere.compute_mass",
                    "signature": "build123d.Sphere.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Sphere.copy",
                    "signature": "build123d.Sphere.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.copy_attributes_to",
                    "signature": "build123d.Sphere.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Sphere.cut",
                    "signature": "build123d.Sphere.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.distance",
                    "signature": "build123d.Sphere.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Sphere.distance_to",
                    "signature": "build123d.Sphere.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Sphere.distance_to_with_closest_points",
                    "signature": "build123d.Sphere.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Sphere.distances",
                    "signature": "build123d.Sphere.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Sphere.do_children_intersect",
                    "signature": "build123d.Sphere.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Sphere.dprism",
                    "signature": "build123d.Sphere.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Sphere.edge",
                    "signature": "build123d.Sphere.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Sphere.edges",
                    "signature": "build123d.Sphere.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Sphere.export_brep",
                    "signature": "build123d.Sphere.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.export_step",
                    "signature": "build123d.Sphere.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Sphere.export_stl",
                    "signature": "build123d.Sphere.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.extrude",
                    "signature": "build123d.Sphere.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.face",
                    "signature": "build123d.Sphere.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Sphere.faces",
                    "signature": "build123d.Sphere.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Sphere.faces_intersected_by_axis",
                    "signature": "build123d.Sphere.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Sphere.fillet",
                    "signature": "build123d.Sphere.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.find_intersection",
                    "signature": "build123d.Sphere.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Sphere.find_intersection_points",
                    "signature": "build123d.Sphere.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Sphere.first_level_shapes",
                    "signature": "build123d.Sphere.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Sphere.fix",
                    "signature": "build123d.Sphere.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.fuse",
                    "signature": "build123d.Sphere.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.get_type",
                    "signature": "build123d.Sphere.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Sphere.hash_code",
                    "signature": "build123d.Sphere.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Sphere.hollow",
                    "signature": "build123d.Sphere.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Sphere.intersect",
                    "signature": "build123d.Sphere.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.is_equal",
                    "signature": "build123d.Sphere.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.is_inside",
                    "signature": "build123d.Sphere.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.is_null",
                    "signature": "build123d.Sphere.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.is_same",
                    "signature": "build123d.Sphere.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.is_valid",
                    "signature": "build123d.Sphere.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Sphere.iter_path_reverse",
                    "signature": "build123d.Sphere.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Sphere.locate",
                    "signature": "build123d.Sphere.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.located",
                    "signature": "build123d.Sphere.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.make_compound",
                    "signature": "build123d.Sphere.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.make_text",
                    "signature": "build123d.Sphere.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Sphere.make_triad",
                    "signature": "build123d.Sphere.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.max_fillet",
                    "signature": "build123d.Sphere.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Sphere.mesh",
                    "signature": "build123d.Sphere.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Sphere.mirror",
                    "signature": "build123d.Sphere.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.move",
                    "signature": "build123d.Sphere.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.moved",
                    "signature": "build123d.Sphere.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.offset_3d",
                    "signature": "build123d.Sphere.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Sphere.project_faces",
                    "signature": "build123d.Sphere.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Sphere.project_to_viewport",
                    "signature": "build123d.Sphere.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Sphere.relocate",
                    "signature": "build123d.Sphere.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Sphere.rotate",
                    "signature": "build123d.Sphere.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.scale",
                    "signature": "build123d.Sphere.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.shape_type",
                    "signature": "build123d.Sphere.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Sphere.shell",
                    "signature": "build123d.Sphere.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Sphere.shells",
                    "signature": "build123d.Sphere.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Sphere.show_topology",
                    "signature": "build123d.Sphere.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Sphere.solid",
                    "signature": "build123d.Sphere.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Sphere.solids",
                    "signature": "build123d.Sphere.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Sphere.split",
                    "signature": "build123d.Sphere.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.split_by_perimeter",
                    "signature": "build123d.Sphere.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Sphere.tessellate",
                    "signature": "build123d.Sphere.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Sphere.to_arcs",
                    "signature": "build123d.Sphere.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Sphere.to_splines",
                    "signature": "build123d.Sphere.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Sphere.to_vtk_poly_data",
                    "signature": "build123d.Sphere.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Sphere.transform_geometry",
                    "signature": "build123d.Sphere.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.transform_shape",
                    "signature": "build123d.Sphere.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.transformed",
                    "signature": "build123d.Sphere.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.translate",
                    "signature": "build123d.Sphere.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Sphere.unwrap",
                    "signature": "build123d.Sphere.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Sphere.vertex",
                    "signature": "build123d.Sphere.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Sphere.vertices",
                    "signature": "build123d.Sphere.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Sphere.wire",
                    "signature": "build123d.Sphere.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Sphere.wires",
                    "signature": "build123d.Sphere.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Spline",
            "signature": "build123d.Spline(*pts: 'Union[VectorLike, Iterable[VectorLike]]', tangents: 'Iterable[VectorLike]' = None, tangent_scalars: 'Iterable[float]' = None, periodic: 'bool' = False, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Spline.bounding_box",
                    "signature": "build123d.Spline.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Spline.cast",
                    "signature": "build123d.Spline.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.center",
                    "signature": "build123d.Spline.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.clean",
                    "signature": "build123d.Spline.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.close",
                    "signature": "build123d.Spline.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Spline.closest_points",
                    "signature": "build123d.Spline.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Spline.combined_center",
                    "signature": "build123d.Spline.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.common_plane",
                    "signature": "build123d.Spline.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Spline.compound",
                    "signature": "build123d.Spline.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Spline.compounds",
                    "signature": "build123d.Spline.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Spline.compute_mass",
                    "signature": "build123d.Spline.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Spline.copy",
                    "signature": "build123d.Spline.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.copy_attributes_to",
                    "signature": "build123d.Spline.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Spline.cut",
                    "signature": "build123d.Spline.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.distance",
                    "signature": "build123d.Spline.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Spline.distance_to",
                    "signature": "build123d.Spline.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Spline.distance_to_with_closest_points",
                    "signature": "build123d.Spline.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Spline.distances",
                    "signature": "build123d.Spline.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Spline.distribute_locations",
                    "signature": "build123d.Spline.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Spline.edge",
                    "signature": "build123d.Spline.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.edges",
                    "signature": "build123d.Spline.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Spline.end_point",
                    "signature": "build123d.Spline.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.export_brep",
                    "signature": "build123d.Spline.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Spline.export_step",
                    "signature": "build123d.Spline.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Spline.export_stl",
                    "signature": "build123d.Spline.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Spline.extrude",
                    "signature": "build123d.Spline.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.face",
                    "signature": "build123d.Spline.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Spline.faces",
                    "signature": "build123d.Spline.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Spline.faces_intersected_by_axis",
                    "signature": "build123d.Spline.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Spline.find_intersection",
                    "signature": "build123d.Spline.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Spline.find_intersection_points",
                    "signature": "build123d.Spline.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.Spline.find_tangent",
                    "signature": "build123d.Spline.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.Spline.fix",
                    "signature": "build123d.Spline.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.fuse",
                    "signature": "build123d.Spline.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.hash_code",
                    "signature": "build123d.Spline.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Spline.intersect",
                    "signature": "build123d.Spline.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.Spline.is_equal",
                    "signature": "build123d.Spline.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Spline.is_null",
                    "signature": "build123d.Spline.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Spline.is_same",
                    "signature": "build123d.Spline.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Spline.is_valid",
                    "signature": "build123d.Spline.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Spline.iter_path_reverse",
                    "signature": "build123d.Spline.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Spline.locate",
                    "signature": "build123d.Spline.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.located",
                    "signature": "build123d.Spline.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.location_at",
                    "signature": "build123d.Spline.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Spline.locations",
                    "signature": "build123d.Spline.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Spline.make_bezier",
                    "signature": "build123d.Spline.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_circle",
                    "signature": "build123d.Spline.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_ellipse",
                    "signature": "build123d.Spline.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_helix",
                    "signature": "build123d.Spline.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Spline.make_line",
                    "signature": "build123d.Spline.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_mid_way",
                    "signature": "build123d.Spline.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_spline",
                    "signature": "build123d.Spline.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_spline_approx",
                    "signature": "build123d.Spline.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_tangent_arc",
                    "signature": "build123d.Spline.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.make_three_point_arc",
                    "signature": "build123d.Spline.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.mesh",
                    "signature": "build123d.Spline.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Spline.mirror",
                    "signature": "build123d.Spline.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.move",
                    "signature": "build123d.Spline.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.moved",
                    "signature": "build123d.Spline.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.normal",
                    "signature": "build123d.Spline.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.offset_2d",
                    "signature": "build123d.Spline.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Spline.param_at",
                    "signature": "build123d.Spline.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Spline.param_at_point",
                    "signature": "build123d.Spline.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Spline.perpendicular_line",
                    "signature": "build123d.Spline.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.position_at",
                    "signature": "build123d.Spline.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.positions",
                    "signature": "build123d.Spline.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Spline.project",
                    "signature": "build123d.Spline.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Spline.project_faces",
                    "signature": "build123d.Spline.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Spline.project_to_shape",
                    "signature": "build123d.Spline.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.Spline.project_to_viewport",
                    "signature": "build123d.Spline.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Spline.relocate",
                    "signature": "build123d.Spline.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Spline.reversed",
                    "signature": "build123d.Spline.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.rotate",
                    "signature": "build123d.Spline.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.scale",
                    "signature": "build123d.Spline.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.shape_type",
                    "signature": "build123d.Spline.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Spline.shell",
                    "signature": "build123d.Spline.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Spline.shells",
                    "signature": "build123d.Spline.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Spline.show_topology",
                    "signature": "build123d.Spline.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Spline.solid",
                    "signature": "build123d.Spline.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Spline.solids",
                    "signature": "build123d.Spline.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Spline.split",
                    "signature": "build123d.Spline.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.split_by_perimeter",
                    "signature": "build123d.Spline.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Spline.start_point",
                    "signature": "build123d.Spline.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.tangent_angle_at",
                    "signature": "build123d.Spline.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Spline.tangent_at",
                    "signature": "build123d.Spline.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Spline.tessellate",
                    "signature": "build123d.Spline.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Spline.to_arcs",
                    "signature": "build123d.Spline.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Spline.to_axis",
                    "signature": "build123d.Spline.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.Spline.to_splines",
                    "signature": "build123d.Spline.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Spline.to_vtk_poly_data",
                    "signature": "build123d.Spline.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Spline.to_wire",
                    "signature": "build123d.Spline.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Spline.transform_geometry",
                    "signature": "build123d.Spline.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.transform_shape",
                    "signature": "build123d.Spline.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.transformed",
                    "signature": "build123d.Spline.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Spline.translate",
                    "signature": "build123d.Spline.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Spline.trim",
                    "signature": "build123d.Spline.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.trim_to_length",
                    "signature": "build123d.Spline.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.Spline.vertex",
                    "signature": "build123d.Spline.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Spline.vertices",
                    "signature": "build123d.Spline.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Spline.wire",
                    "signature": "build123d.Spline.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Spline.wires",
                    "signature": "build123d.Spline.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.TangentArc",
            "signature": "build123d.TangentArc(*pts: 'Union[VectorLike, Iterable[VectorLike]]', tangent: 'VectorLike', tangent_from_first: 'bool' = True, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.TangentArc.bounding_box",
                    "signature": "build123d.TangentArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.TangentArc.cast",
                    "signature": "build123d.TangentArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.center",
                    "signature": "build123d.TangentArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.clean",
                    "signature": "build123d.TangentArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.close",
                    "signature": "build123d.TangentArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.TangentArc.closest_points",
                    "signature": "build123d.TangentArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.TangentArc.combined_center",
                    "signature": "build123d.TangentArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.common_plane",
                    "signature": "build123d.TangentArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.TangentArc.compound",
                    "signature": "build123d.TangentArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.TangentArc.compounds",
                    "signature": "build123d.TangentArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.TangentArc.compute_mass",
                    "signature": "build123d.TangentArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.TangentArc.copy",
                    "signature": "build123d.TangentArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.copy_attributes_to",
                    "signature": "build123d.TangentArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.TangentArc.cut",
                    "signature": "build123d.TangentArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.distance",
                    "signature": "build123d.TangentArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.TangentArc.distance_to",
                    "signature": "build123d.TangentArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.TangentArc.distance_to_with_closest_points",
                    "signature": "build123d.TangentArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.TangentArc.distances",
                    "signature": "build123d.TangentArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.TangentArc.distribute_locations",
                    "signature": "build123d.TangentArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.TangentArc.edge",
                    "signature": "build123d.TangentArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.edges",
                    "signature": "build123d.TangentArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.TangentArc.end_point",
                    "signature": "build123d.TangentArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.export_brep",
                    "signature": "build123d.TangentArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.TangentArc.export_step",
                    "signature": "build123d.TangentArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.TangentArc.export_stl",
                    "signature": "build123d.TangentArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.TangentArc.extrude",
                    "signature": "build123d.TangentArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.face",
                    "signature": "build123d.TangentArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.TangentArc.faces",
                    "signature": "build123d.TangentArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.TangentArc.faces_intersected_by_axis",
                    "signature": "build123d.TangentArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.TangentArc.find_intersection",
                    "signature": "build123d.TangentArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.TangentArc.find_intersection_points",
                    "signature": "build123d.TangentArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.TangentArc.find_tangent",
                    "signature": "build123d.TangentArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.TangentArc.fix",
                    "signature": "build123d.TangentArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.fuse",
                    "signature": "build123d.TangentArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.hash_code",
                    "signature": "build123d.TangentArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.TangentArc.intersect",
                    "signature": "build123d.TangentArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.TangentArc.is_equal",
                    "signature": "build123d.TangentArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.TangentArc.is_null",
                    "signature": "build123d.TangentArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.TangentArc.is_same",
                    "signature": "build123d.TangentArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.TangentArc.is_valid",
                    "signature": "build123d.TangentArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.TangentArc.iter_path_reverse",
                    "signature": "build123d.TangentArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.TangentArc.locate",
                    "signature": "build123d.TangentArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.located",
                    "signature": "build123d.TangentArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.location_at",
                    "signature": "build123d.TangentArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.TangentArc.locations",
                    "signature": "build123d.TangentArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.TangentArc.make_bezier",
                    "signature": "build123d.TangentArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_circle",
                    "signature": "build123d.TangentArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_ellipse",
                    "signature": "build123d.TangentArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_helix",
                    "signature": "build123d.TangentArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.TangentArc.make_line",
                    "signature": "build123d.TangentArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_mid_way",
                    "signature": "build123d.TangentArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_spline",
                    "signature": "build123d.TangentArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_spline_approx",
                    "signature": "build123d.TangentArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_tangent_arc",
                    "signature": "build123d.TangentArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.make_three_point_arc",
                    "signature": "build123d.TangentArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.mesh",
                    "signature": "build123d.TangentArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.TangentArc.mirror",
                    "signature": "build123d.TangentArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.move",
                    "signature": "build123d.TangentArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.moved",
                    "signature": "build123d.TangentArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.normal",
                    "signature": "build123d.TangentArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.offset_2d",
                    "signature": "build123d.TangentArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.TangentArc.param_at",
                    "signature": "build123d.TangentArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.TangentArc.param_at_point",
                    "signature": "build123d.TangentArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.TangentArc.perpendicular_line",
                    "signature": "build123d.TangentArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.position_at",
                    "signature": "build123d.TangentArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.positions",
                    "signature": "build123d.TangentArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.TangentArc.project",
                    "signature": "build123d.TangentArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.TangentArc.project_faces",
                    "signature": "build123d.TangentArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.TangentArc.project_to_shape",
                    "signature": "build123d.TangentArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.TangentArc.project_to_viewport",
                    "signature": "build123d.TangentArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.TangentArc.relocate",
                    "signature": "build123d.TangentArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.TangentArc.reversed",
                    "signature": "build123d.TangentArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.rotate",
                    "signature": "build123d.TangentArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.scale",
                    "signature": "build123d.TangentArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.shape_type",
                    "signature": "build123d.TangentArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.TangentArc.shell",
                    "signature": "build123d.TangentArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.TangentArc.shells",
                    "signature": "build123d.TangentArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.TangentArc.show_topology",
                    "signature": "build123d.TangentArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.TangentArc.solid",
                    "signature": "build123d.TangentArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.TangentArc.solids",
                    "signature": "build123d.TangentArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.TangentArc.split",
                    "signature": "build123d.TangentArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.split_by_perimeter",
                    "signature": "build123d.TangentArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.TangentArc.start_point",
                    "signature": "build123d.TangentArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.tangent_angle_at",
                    "signature": "build123d.TangentArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.TangentArc.tangent_at",
                    "signature": "build123d.TangentArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.TangentArc.tessellate",
                    "signature": "build123d.TangentArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.TangentArc.to_arcs",
                    "signature": "build123d.TangentArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.TangentArc.to_axis",
                    "signature": "build123d.TangentArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.TangentArc.to_splines",
                    "signature": "build123d.TangentArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.TangentArc.to_vtk_poly_data",
                    "signature": "build123d.TangentArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.TangentArc.to_wire",
                    "signature": "build123d.TangentArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.TangentArc.transform_geometry",
                    "signature": "build123d.TangentArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.transform_shape",
                    "signature": "build123d.TangentArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.transformed",
                    "signature": "build123d.TangentArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.translate",
                    "signature": "build123d.TangentArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.TangentArc.trim",
                    "signature": "build123d.TangentArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.trim_to_length",
                    "signature": "build123d.TangentArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.TangentArc.vertex",
                    "signature": "build123d.TangentArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.TangentArc.vertices",
                    "signature": "build123d.TangentArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.TangentArc.wire",
                    "signature": "build123d.TangentArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.TangentArc.wires",
                    "signature": "build123d.TangentArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.TechnicalDrawing",
            "signature": "build123d.TechnicalDrawing(designed_by: str = 'build123d', design_date: Optional[datetime.date] = None, page_size: build123d.build_enums.PageSize = <PageSize.A4>, title: str = 'Title', sub_title: str = 'Sub Title', drawing_number: str = 'B3D-1', sheet_number: int = None, drawing_scale: float = 1.0, nominal_text_size: float = 10.0, line_width: float = 0.5, mode: build123d.build_enums.Mode = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.TechnicalDrawing.bounding_box",
                    "signature": "build123d.TechnicalDrawing.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.TechnicalDrawing.cast",
                    "signature": "build123d.TechnicalDrawing.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.center",
                    "signature": "build123d.TechnicalDrawing.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.TechnicalDrawing.chamfer",
                    "signature": "build123d.TechnicalDrawing.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.clean",
                    "signature": "build123d.TechnicalDrawing.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.closest_points",
                    "signature": "build123d.TechnicalDrawing.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.combined_center",
                    "signature": "build123d.TechnicalDrawing.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.TechnicalDrawing.compound",
                    "signature": "build123d.TechnicalDrawing.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.compounds",
                    "signature": "build123d.TechnicalDrawing.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.compute_mass",
                    "signature": "build123d.TechnicalDrawing.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.TechnicalDrawing.copy",
                    "signature": "build123d.TechnicalDrawing.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.copy_attributes_to",
                    "signature": "build123d.TechnicalDrawing.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.TechnicalDrawing.cut",
                    "signature": "build123d.TechnicalDrawing.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.distance",
                    "signature": "build123d.TechnicalDrawing.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.TechnicalDrawing.distance_to",
                    "signature": "build123d.TechnicalDrawing.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.TechnicalDrawing.distance_to_with_closest_points",
                    "signature": "build123d.TechnicalDrawing.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.distances",
                    "signature": "build123d.TechnicalDrawing.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.do_children_intersect",
                    "signature": "build123d.TechnicalDrawing.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.dprism",
                    "signature": "build123d.TechnicalDrawing.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.TechnicalDrawing.edge",
                    "signature": "build123d.TechnicalDrawing.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.TechnicalDrawing.edges",
                    "signature": "build123d.TechnicalDrawing.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.export_brep",
                    "signature": "build123d.TechnicalDrawing.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.export_step",
                    "signature": "build123d.TechnicalDrawing.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.TechnicalDrawing.export_stl",
                    "signature": "build123d.TechnicalDrawing.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.extrude",
                    "signature": "build123d.TechnicalDrawing.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.face",
                    "signature": "build123d.TechnicalDrawing.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.TechnicalDrawing.faces",
                    "signature": "build123d.TechnicalDrawing.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.faces_intersected_by_axis",
                    "signature": "build123d.TechnicalDrawing.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.fillet",
                    "signature": "build123d.TechnicalDrawing.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.find_intersection",
                    "signature": "build123d.TechnicalDrawing.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.find_intersection_points",
                    "signature": "build123d.TechnicalDrawing.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.first_level_shapes",
                    "signature": "build123d.TechnicalDrawing.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.fix",
                    "signature": "build123d.TechnicalDrawing.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.fuse",
                    "signature": "build123d.TechnicalDrawing.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.get_type",
                    "signature": "build123d.TechnicalDrawing.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.hash_code",
                    "signature": "build123d.TechnicalDrawing.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.TechnicalDrawing.hollow",
                    "signature": "build123d.TechnicalDrawing.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.TechnicalDrawing.intersect",
                    "signature": "build123d.TechnicalDrawing.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.is_equal",
                    "signature": "build123d.TechnicalDrawing.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.is_inside",
                    "signature": "build123d.TechnicalDrawing.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.is_null",
                    "signature": "build123d.TechnicalDrawing.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.is_same",
                    "signature": "build123d.TechnicalDrawing.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.is_valid",
                    "signature": "build123d.TechnicalDrawing.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.TechnicalDrawing.iter_path_reverse",
                    "signature": "build123d.TechnicalDrawing.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.TechnicalDrawing.locate",
                    "signature": "build123d.TechnicalDrawing.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.located",
                    "signature": "build123d.TechnicalDrawing.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.make_compound",
                    "signature": "build123d.TechnicalDrawing.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.make_text",
                    "signature": "build123d.TechnicalDrawing.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.TechnicalDrawing.make_triad",
                    "signature": "build123d.TechnicalDrawing.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.max_fillet",
                    "signature": "build123d.TechnicalDrawing.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.TechnicalDrawing.mesh",
                    "signature": "build123d.TechnicalDrawing.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.TechnicalDrawing.mirror",
                    "signature": "build123d.TechnicalDrawing.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.move",
                    "signature": "build123d.TechnicalDrawing.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.moved",
                    "signature": "build123d.TechnicalDrawing.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.offset_3d",
                    "signature": "build123d.TechnicalDrawing.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.TechnicalDrawing.project_faces",
                    "signature": "build123d.TechnicalDrawing.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.TechnicalDrawing.project_to_viewport",
                    "signature": "build123d.TechnicalDrawing.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.relocate",
                    "signature": "build123d.TechnicalDrawing.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.TechnicalDrawing.rotate",
                    "signature": "build123d.TechnicalDrawing.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.scale",
                    "signature": "build123d.TechnicalDrawing.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.shape_type",
                    "signature": "build123d.TechnicalDrawing.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.TechnicalDrawing.shell",
                    "signature": "build123d.TechnicalDrawing.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.TechnicalDrawing.shells",
                    "signature": "build123d.TechnicalDrawing.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.show_topology",
                    "signature": "build123d.TechnicalDrawing.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.TechnicalDrawing.solid",
                    "signature": "build123d.TechnicalDrawing.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.TechnicalDrawing.solids",
                    "signature": "build123d.TechnicalDrawing.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.split",
                    "signature": "build123d.TechnicalDrawing.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.split_by_perimeter",
                    "signature": "build123d.TechnicalDrawing.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.TechnicalDrawing.tessellate",
                    "signature": "build123d.TechnicalDrawing.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.to_arcs",
                    "signature": "build123d.TechnicalDrawing.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.TechnicalDrawing.to_splines",
                    "signature": "build123d.TechnicalDrawing.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.TechnicalDrawing.to_vtk_poly_data",
                    "signature": "build123d.TechnicalDrawing.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.TechnicalDrawing.transform_geometry",
                    "signature": "build123d.TechnicalDrawing.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.transform_shape",
                    "signature": "build123d.TechnicalDrawing.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.transformed",
                    "signature": "build123d.TechnicalDrawing.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.translate",
                    "signature": "build123d.TechnicalDrawing.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.TechnicalDrawing.unwrap",
                    "signature": "build123d.TechnicalDrawing.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.vertex",
                    "signature": "build123d.TechnicalDrawing.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.TechnicalDrawing.vertices",
                    "signature": "build123d.TechnicalDrawing.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.TechnicalDrawing.wire",
                    "signature": "build123d.TechnicalDrawing.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.TechnicalDrawing.wires",
                    "signature": "build123d.TechnicalDrawing.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "margin",
                "orientation",
                "page_sizes",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Text",
            "signature": "build123d.Text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'str' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), path: 'Union[Edge, Wire]' = None, position_on_path: 'float' = 0.0, rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>) -> 'Compound'",
            "methods": [
                {
                    "name": "build123d.Text.bounding_box",
                    "signature": "build123d.Text.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Text.cast",
                    "signature": "build123d.Text.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Text.center",
                    "signature": "build123d.Text.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Text.chamfer",
                    "signature": "build123d.Text.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Text.clean",
                    "signature": "build123d.Text.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Text.closest_points",
                    "signature": "build123d.Text.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Text.combined_center",
                    "signature": "build123d.Text.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Text.compound",
                    "signature": "build123d.Text.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Text.compounds",
                    "signature": "build123d.Text.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Text.compute_mass",
                    "signature": "build123d.Text.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Text.copy",
                    "signature": "build123d.Text.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Text.copy_attributes_to",
                    "signature": "build123d.Text.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Text.cut",
                    "signature": "build123d.Text.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Text.distance",
                    "signature": "build123d.Text.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Text.distance_to",
                    "signature": "build123d.Text.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Text.distance_to_with_closest_points",
                    "signature": "build123d.Text.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Text.distances",
                    "signature": "build123d.Text.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Text.do_children_intersect",
                    "signature": "build123d.Text.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Text.dprism",
                    "signature": "build123d.Text.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Text.edge",
                    "signature": "build123d.Text.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Text.edges",
                    "signature": "build123d.Text.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Text.export_brep",
                    "signature": "build123d.Text.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Text.export_step",
                    "signature": "build123d.Text.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Text.export_stl",
                    "signature": "build123d.Text.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Text.extrude",
                    "signature": "build123d.Text.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Text.face",
                    "signature": "build123d.Text.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Text.faces",
                    "signature": "build123d.Text.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Text.faces_intersected_by_axis",
                    "signature": "build123d.Text.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Text.fillet",
                    "signature": "build123d.Text.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Text.find_intersection",
                    "signature": "build123d.Text.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Text.find_intersection_points",
                    "signature": "build123d.Text.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Text.first_level_shapes",
                    "signature": "build123d.Text.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Text.fix",
                    "signature": "build123d.Text.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Text.fuse",
                    "signature": "build123d.Text.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Text.get_type",
                    "signature": "build123d.Text.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Text.hash_code",
                    "signature": "build123d.Text.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Text.hollow",
                    "signature": "build123d.Text.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Text.intersect",
                    "signature": "build123d.Text.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Text.is_equal",
                    "signature": "build123d.Text.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Text.is_inside",
                    "signature": "build123d.Text.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Text.is_null",
                    "signature": "build123d.Text.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Text.is_same",
                    "signature": "build123d.Text.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Text.is_valid",
                    "signature": "build123d.Text.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Text.iter_path_reverse",
                    "signature": "build123d.Text.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Text.locate",
                    "signature": "build123d.Text.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Text.located",
                    "signature": "build123d.Text.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Text.make_compound",
                    "signature": "build123d.Text.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Text.make_text",
                    "signature": "build123d.Text.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Text.make_triad",
                    "signature": "build123d.Text.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Text.max_fillet",
                    "signature": "build123d.Text.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Text.mesh",
                    "signature": "build123d.Text.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Text.mirror",
                    "signature": "build123d.Text.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Text.move",
                    "signature": "build123d.Text.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Text.moved",
                    "signature": "build123d.Text.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Text.offset_3d",
                    "signature": "build123d.Text.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Text.project_faces",
                    "signature": "build123d.Text.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Text.project_to_viewport",
                    "signature": "build123d.Text.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Text.relocate",
                    "signature": "build123d.Text.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Text.rotate",
                    "signature": "build123d.Text.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Text.scale",
                    "signature": "build123d.Text.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Text.shape_type",
                    "signature": "build123d.Text.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Text.shell",
                    "signature": "build123d.Text.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Text.shells",
                    "signature": "build123d.Text.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Text.show_topology",
                    "signature": "build123d.Text.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Text.solid",
                    "signature": "build123d.Text.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Text.solids",
                    "signature": "build123d.Text.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Text.split",
                    "signature": "build123d.Text.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Text.split_by_perimeter",
                    "signature": "build123d.Text.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Text.tessellate",
                    "signature": "build123d.Text.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Text.to_arcs",
                    "signature": "build123d.Text.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Text.to_splines",
                    "signature": "build123d.Text.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Text.to_vtk_poly_data",
                    "signature": "build123d.Text.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Text.transform_geometry",
                    "signature": "build123d.Text.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Text.transform_shape",
                    "signature": "build123d.Text.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Text.transformed",
                    "signature": "build123d.Text.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Text.translate",
                    "signature": "build123d.Text.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Text.unwrap",
                    "signature": "build123d.Text.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Text.vertex",
                    "signature": "build123d.Text.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Text.vertices",
                    "signature": "build123d.Text.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Text.wire",
                    "signature": "build123d.Text.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Text.wires",
                    "signature": "build123d.Text.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.ThreePointArc",
            "signature": "build123d.ThreePointArc(*pts: 'Union[VectorLike, Iterable[VectorLike]]', mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.ThreePointArc.bounding_box",
                    "signature": "build123d.ThreePointArc.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.ThreePointArc.cast",
                    "signature": "build123d.ThreePointArc.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.center",
                    "signature": "build123d.ThreePointArc.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.clean",
                    "signature": "build123d.ThreePointArc.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.close",
                    "signature": "build123d.ThreePointArc.close(self) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.ThreePointArc.closest_points",
                    "signature": "build123d.ThreePointArc.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.ThreePointArc.combined_center",
                    "signature": "build123d.ThreePointArc.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.common_plane",
                    "signature": "build123d.ThreePointArc.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.ThreePointArc.compound",
                    "signature": "build123d.ThreePointArc.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.ThreePointArc.compounds",
                    "signature": "build123d.ThreePointArc.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.ThreePointArc.compute_mass",
                    "signature": "build123d.ThreePointArc.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.ThreePointArc.copy",
                    "signature": "build123d.ThreePointArc.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.copy_attributes_to",
                    "signature": "build123d.ThreePointArc.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.ThreePointArc.cut",
                    "signature": "build123d.ThreePointArc.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.distance",
                    "signature": "build123d.ThreePointArc.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.ThreePointArc.distance_to",
                    "signature": "build123d.ThreePointArc.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.ThreePointArc.distance_to_with_closest_points",
                    "signature": "build123d.ThreePointArc.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.ThreePointArc.distances",
                    "signature": "build123d.ThreePointArc.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.ThreePointArc.distribute_locations",
                    "signature": "build123d.ThreePointArc.distribute_locations(self: 'Union[Wire, Edge]', count: 'int', start: 'float' = 0.0, stop: 'float' = 1.0, positions_only: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.ThreePointArc.edge",
                    "signature": "build123d.ThreePointArc.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.edges",
                    "signature": "build123d.ThreePointArc.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.ThreePointArc.end_point",
                    "signature": "build123d.ThreePointArc.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.export_brep",
                    "signature": "build123d.ThreePointArc.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.ThreePointArc.export_step",
                    "signature": "build123d.ThreePointArc.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.ThreePointArc.export_stl",
                    "signature": "build123d.ThreePointArc.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.ThreePointArc.extrude",
                    "signature": "build123d.ThreePointArc.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.face",
                    "signature": "build123d.ThreePointArc.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.ThreePointArc.faces",
                    "signature": "build123d.ThreePointArc.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ThreePointArc.faces_intersected_by_axis",
                    "signature": "build123d.ThreePointArc.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.ThreePointArc.find_intersection",
                    "signature": "build123d.ThreePointArc.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.ThreePointArc.find_intersection_points",
                    "signature": "build123d.ThreePointArc.find_intersection_points(self, edge: 'Union[Axis, Edge]' = None, tolerance: 'float' = 1e-06) -> 'ShapeList[Vector]'"
                },
                {
                    "name": "build123d.ThreePointArc.find_tangent",
                    "signature": "build123d.ThreePointArc.find_tangent(self, angle: 'float') -> 'list[float]'"
                },
                {
                    "name": "build123d.ThreePointArc.fix",
                    "signature": "build123d.ThreePointArc.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.fuse",
                    "signature": "build123d.ThreePointArc.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.hash_code",
                    "signature": "build123d.ThreePointArc.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.ThreePointArc.intersect",
                    "signature": "build123d.ThreePointArc.intersect(self, other: 'Union[Edge, Axis]') -> 'Union[Shape, None]'"
                },
                {
                    "name": "build123d.ThreePointArc.is_equal",
                    "signature": "build123d.ThreePointArc.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.ThreePointArc.is_null",
                    "signature": "build123d.ThreePointArc.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.ThreePointArc.is_same",
                    "signature": "build123d.ThreePointArc.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.ThreePointArc.is_valid",
                    "signature": "build123d.ThreePointArc.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.ThreePointArc.iter_path_reverse",
                    "signature": "build123d.ThreePointArc.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.ThreePointArc.locate",
                    "signature": "build123d.ThreePointArc.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.located",
                    "signature": "build123d.ThreePointArc.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.location_at",
                    "signature": "build123d.ThreePointArc.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.ThreePointArc.locations",
                    "signature": "build123d.ThreePointArc.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.ThreePointArc.make_bezier",
                    "signature": "build123d.ThreePointArc.make_bezier(*cntl_pnts: 'VectorLike', weights: 'list[float]' = None) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_circle",
                    "signature": "build123d.ThreePointArc.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_ellipse",
                    "signature": "build123d.ThreePointArc.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_helix",
                    "signature": "build123d.ThreePointArc.make_helix(pitch: 'float', height: 'float', radius: 'float', center: 'VectorLike' = (0, 0, 0), normal: 'VectorLike' = (0, 0, 1), angle: 'float' = 0.0, lefthand: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.ThreePointArc.make_line",
                    "signature": "build123d.ThreePointArc.make_line(point1: 'VectorLike', point2: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_mid_way",
                    "signature": "build123d.ThreePointArc.make_mid_way(first: 'Edge', second: 'Edge', middle: 'float' = 0.5) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_spline",
                    "signature": "build123d.ThreePointArc.make_spline(points: 'list[VectorLike]', tangents: 'list[VectorLike]' = None, periodic: 'bool' = False, parameters: 'list[float]' = None, scale: 'bool' = True, tol: 'float' = 1e-06) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_spline_approx",
                    "signature": "build123d.ThreePointArc.make_spline_approx(points: 'list[VectorLike]', tol: 'float' = 0.001, smoothing: 'Tuple[float, float, float]' = None, min_deg: 'int' = 1, max_deg: 'int' = 6) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_tangent_arc",
                    "signature": "build123d.ThreePointArc.make_tangent_arc(start: 'VectorLike', tangent: 'VectorLike', end: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.make_three_point_arc",
                    "signature": "build123d.ThreePointArc.make_three_point_arc(point1: 'VectorLike', point2: 'VectorLike', point3: 'VectorLike') -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.mesh",
                    "signature": "build123d.ThreePointArc.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.ThreePointArc.mirror",
                    "signature": "build123d.ThreePointArc.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.move",
                    "signature": "build123d.ThreePointArc.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.moved",
                    "signature": "build123d.ThreePointArc.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.normal",
                    "signature": "build123d.ThreePointArc.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.offset_2d",
                    "signature": "build123d.ThreePointArc.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.ThreePointArc.param_at",
                    "signature": "build123d.ThreePointArc.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.ThreePointArc.param_at_point",
                    "signature": "build123d.ThreePointArc.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.ThreePointArc.perpendicular_line",
                    "signature": "build123d.ThreePointArc.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.position_at",
                    "signature": "build123d.ThreePointArc.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.positions",
                    "signature": "build123d.ThreePointArc.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.ThreePointArc.project",
                    "signature": "build123d.ThreePointArc.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.ThreePointArc.project_faces",
                    "signature": "build123d.ThreePointArc.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.ThreePointArc.project_to_shape",
                    "signature": "build123d.ThreePointArc.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Edge]'"
                },
                {
                    "name": "build123d.ThreePointArc.project_to_viewport",
                    "signature": "build123d.ThreePointArc.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.ThreePointArc.relocate",
                    "signature": "build123d.ThreePointArc.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.ThreePointArc.reversed",
                    "signature": "build123d.ThreePointArc.reversed(self) -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.rotate",
                    "signature": "build123d.ThreePointArc.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.scale",
                    "signature": "build123d.ThreePointArc.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.shape_type",
                    "signature": "build123d.ThreePointArc.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.ThreePointArc.shell",
                    "signature": "build123d.ThreePointArc.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.ThreePointArc.shells",
                    "signature": "build123d.ThreePointArc.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.ThreePointArc.show_topology",
                    "signature": "build123d.ThreePointArc.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.ThreePointArc.solid",
                    "signature": "build123d.ThreePointArc.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.ThreePointArc.solids",
                    "signature": "build123d.ThreePointArc.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.ThreePointArc.split",
                    "signature": "build123d.ThreePointArc.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.split_by_perimeter",
                    "signature": "build123d.ThreePointArc.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.ThreePointArc.start_point",
                    "signature": "build123d.ThreePointArc.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.tangent_angle_at",
                    "signature": "build123d.ThreePointArc.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.ThreePointArc.tangent_at",
                    "signature": "build123d.ThreePointArc.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.ThreePointArc.tessellate",
                    "signature": "build123d.ThreePointArc.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.ThreePointArc.to_arcs",
                    "signature": "build123d.ThreePointArc.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.ThreePointArc.to_axis",
                    "signature": "build123d.ThreePointArc.to_axis(self) -> 'Axis'"
                },
                {
                    "name": "build123d.ThreePointArc.to_splines",
                    "signature": "build123d.ThreePointArc.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.ThreePointArc.to_vtk_poly_data",
                    "signature": "build123d.ThreePointArc.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.ThreePointArc.to_wire",
                    "signature": "build123d.ThreePointArc.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.ThreePointArc.transform_geometry",
                    "signature": "build123d.ThreePointArc.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.transform_shape",
                    "signature": "build123d.ThreePointArc.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.transformed",
                    "signature": "build123d.ThreePointArc.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.translate",
                    "signature": "build123d.ThreePointArc.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.ThreePointArc.trim",
                    "signature": "build123d.ThreePointArc.trim(self, start: 'float', end: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.trim_to_length",
                    "signature": "build123d.ThreePointArc.trim_to_length(self, start: 'float', length: 'float') -> 'Edge'"
                },
                {
                    "name": "build123d.ThreePointArc.vertex",
                    "signature": "build123d.ThreePointArc.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.ThreePointArc.vertices",
                    "signature": "build123d.ThreePointArc.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.ThreePointArc.wire",
                    "signature": "build123d.ThreePointArc.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.ThreePointArc.wires",
                    "signature": "build123d.ThreePointArc.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "arc_center",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Torus",
            "signature": "build123d.Torus(major_radius: 'float', minor_radius: 'float', minor_start_angle: 'float' = 0, minor_end_angle: 'float' = 360, major_angle: 'float' = 360, rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Torus.bounding_box",
                    "signature": "build123d.Torus.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Torus.cast",
                    "signature": "build123d.Torus.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.center",
                    "signature": "build123d.Torus.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Torus.chamfer",
                    "signature": "build123d.Torus.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.clean",
                    "signature": "build123d.Torus.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.closest_points",
                    "signature": "build123d.Torus.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Torus.combined_center",
                    "signature": "build123d.Torus.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Torus.compound",
                    "signature": "build123d.Torus.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.compounds",
                    "signature": "build123d.Torus.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Torus.compute_mass",
                    "signature": "build123d.Torus.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Torus.copy",
                    "signature": "build123d.Torus.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.copy_attributes_to",
                    "signature": "build123d.Torus.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Torus.cut",
                    "signature": "build123d.Torus.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.distance",
                    "signature": "build123d.Torus.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Torus.distance_to",
                    "signature": "build123d.Torus.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Torus.distance_to_with_closest_points",
                    "signature": "build123d.Torus.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Torus.distances",
                    "signature": "build123d.Torus.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Torus.do_children_intersect",
                    "signature": "build123d.Torus.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Torus.dprism",
                    "signature": "build123d.Torus.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Torus.edge",
                    "signature": "build123d.Torus.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Torus.edges",
                    "signature": "build123d.Torus.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Torus.export_brep",
                    "signature": "build123d.Torus.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Torus.export_step",
                    "signature": "build123d.Torus.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Torus.export_stl",
                    "signature": "build123d.Torus.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Torus.extrude",
                    "signature": "build123d.Torus.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.face",
                    "signature": "build123d.Torus.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Torus.faces",
                    "signature": "build123d.Torus.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Torus.faces_intersected_by_axis",
                    "signature": "build123d.Torus.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Torus.fillet",
                    "signature": "build123d.Torus.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.find_intersection",
                    "signature": "build123d.Torus.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Torus.find_intersection_points",
                    "signature": "build123d.Torus.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Torus.first_level_shapes",
                    "signature": "build123d.Torus.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Torus.fix",
                    "signature": "build123d.Torus.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.fuse",
                    "signature": "build123d.Torus.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.get_type",
                    "signature": "build123d.Torus.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Torus.hash_code",
                    "signature": "build123d.Torus.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Torus.hollow",
                    "signature": "build123d.Torus.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Torus.intersect",
                    "signature": "build123d.Torus.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.is_equal",
                    "signature": "build123d.Torus.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Torus.is_inside",
                    "signature": "build123d.Torus.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Torus.is_null",
                    "signature": "build123d.Torus.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Torus.is_same",
                    "signature": "build123d.Torus.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Torus.is_valid",
                    "signature": "build123d.Torus.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Torus.iter_path_reverse",
                    "signature": "build123d.Torus.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Torus.locate",
                    "signature": "build123d.Torus.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.located",
                    "signature": "build123d.Torus.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.make_compound",
                    "signature": "build123d.Torus.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.make_text",
                    "signature": "build123d.Torus.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Torus.make_triad",
                    "signature": "build123d.Torus.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.max_fillet",
                    "signature": "build123d.Torus.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Torus.mesh",
                    "signature": "build123d.Torus.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Torus.mirror",
                    "signature": "build123d.Torus.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.move",
                    "signature": "build123d.Torus.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.moved",
                    "signature": "build123d.Torus.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.offset_3d",
                    "signature": "build123d.Torus.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Torus.project_faces",
                    "signature": "build123d.Torus.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Torus.project_to_viewport",
                    "signature": "build123d.Torus.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Torus.relocate",
                    "signature": "build123d.Torus.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Torus.rotate",
                    "signature": "build123d.Torus.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.scale",
                    "signature": "build123d.Torus.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.shape_type",
                    "signature": "build123d.Torus.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Torus.shell",
                    "signature": "build123d.Torus.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Torus.shells",
                    "signature": "build123d.Torus.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Torus.show_topology",
                    "signature": "build123d.Torus.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Torus.solid",
                    "signature": "build123d.Torus.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Torus.solids",
                    "signature": "build123d.Torus.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Torus.split",
                    "signature": "build123d.Torus.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.split_by_perimeter",
                    "signature": "build123d.Torus.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Torus.tessellate",
                    "signature": "build123d.Torus.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Torus.to_arcs",
                    "signature": "build123d.Torus.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Torus.to_splines",
                    "signature": "build123d.Torus.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Torus.to_vtk_poly_data",
                    "signature": "build123d.Torus.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Torus.transform_geometry",
                    "signature": "build123d.Torus.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.transform_shape",
                    "signature": "build123d.Torus.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.transformed",
                    "signature": "build123d.Torus.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Torus.translate",
                    "signature": "build123d.Torus.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Torus.unwrap",
                    "signature": "build123d.Torus.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Torus.vertex",
                    "signature": "build123d.Torus.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Torus.vertices",
                    "signature": "build123d.Torus.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Torus.wire",
                    "signature": "build123d.Torus.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Torus.wires",
                    "signature": "build123d.Torus.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Transition",
            "signature": "build123d.Transition()",
            "methods": [],
            "variables": [
                "RIGHT",
                "ROUND",
                "TRANSFORMED",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Trapezoid",
            "signature": "build123d.Trapezoid(width: 'float', height: 'float', left_side_angle: 'float', right_side_angle: 'float' = None, rotation: 'float' = 0, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Trapezoid.bounding_box",
                    "signature": "build123d.Trapezoid.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Trapezoid.cast",
                    "signature": "build123d.Trapezoid.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.center",
                    "signature": "build123d.Trapezoid.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Trapezoid.chamfer",
                    "signature": "build123d.Trapezoid.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.clean",
                    "signature": "build123d.Trapezoid.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.closest_points",
                    "signature": "build123d.Trapezoid.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Trapezoid.combined_center",
                    "signature": "build123d.Trapezoid.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Trapezoid.compound",
                    "signature": "build123d.Trapezoid.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.compounds",
                    "signature": "build123d.Trapezoid.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Trapezoid.compute_mass",
                    "signature": "build123d.Trapezoid.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Trapezoid.copy",
                    "signature": "build123d.Trapezoid.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.copy_attributes_to",
                    "signature": "build123d.Trapezoid.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Trapezoid.cut",
                    "signature": "build123d.Trapezoid.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.distance",
                    "signature": "build123d.Trapezoid.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Trapezoid.distance_to",
                    "signature": "build123d.Trapezoid.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Trapezoid.distance_to_with_closest_points",
                    "signature": "build123d.Trapezoid.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Trapezoid.distances",
                    "signature": "build123d.Trapezoid.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Trapezoid.do_children_intersect",
                    "signature": "build123d.Trapezoid.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Trapezoid.dprism",
                    "signature": "build123d.Trapezoid.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Trapezoid.edge",
                    "signature": "build123d.Trapezoid.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Trapezoid.edges",
                    "signature": "build123d.Trapezoid.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Trapezoid.export_brep",
                    "signature": "build123d.Trapezoid.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.export_step",
                    "signature": "build123d.Trapezoid.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Trapezoid.export_stl",
                    "signature": "build123d.Trapezoid.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.extrude",
                    "signature": "build123d.Trapezoid.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.face",
                    "signature": "build123d.Trapezoid.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Trapezoid.faces",
                    "signature": "build123d.Trapezoid.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Trapezoid.faces_intersected_by_axis",
                    "signature": "build123d.Trapezoid.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Trapezoid.fillet",
                    "signature": "build123d.Trapezoid.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.find_intersection",
                    "signature": "build123d.Trapezoid.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Trapezoid.find_intersection_points",
                    "signature": "build123d.Trapezoid.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Trapezoid.first_level_shapes",
                    "signature": "build123d.Trapezoid.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Trapezoid.fix",
                    "signature": "build123d.Trapezoid.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.fuse",
                    "signature": "build123d.Trapezoid.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.get_type",
                    "signature": "build123d.Trapezoid.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Trapezoid.hash_code",
                    "signature": "build123d.Trapezoid.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Trapezoid.hollow",
                    "signature": "build123d.Trapezoid.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Trapezoid.intersect",
                    "signature": "build123d.Trapezoid.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.is_equal",
                    "signature": "build123d.Trapezoid.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.is_inside",
                    "signature": "build123d.Trapezoid.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.is_null",
                    "signature": "build123d.Trapezoid.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.is_same",
                    "signature": "build123d.Trapezoid.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.is_valid",
                    "signature": "build123d.Trapezoid.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Trapezoid.iter_path_reverse",
                    "signature": "build123d.Trapezoid.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Trapezoid.locate",
                    "signature": "build123d.Trapezoid.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.located",
                    "signature": "build123d.Trapezoid.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.make_compound",
                    "signature": "build123d.Trapezoid.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.make_text",
                    "signature": "build123d.Trapezoid.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Trapezoid.make_triad",
                    "signature": "build123d.Trapezoid.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.max_fillet",
                    "signature": "build123d.Trapezoid.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Trapezoid.mesh",
                    "signature": "build123d.Trapezoid.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Trapezoid.mirror",
                    "signature": "build123d.Trapezoid.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.move",
                    "signature": "build123d.Trapezoid.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.moved",
                    "signature": "build123d.Trapezoid.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.offset_3d",
                    "signature": "build123d.Trapezoid.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Trapezoid.project_faces",
                    "signature": "build123d.Trapezoid.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Trapezoid.project_to_viewport",
                    "signature": "build123d.Trapezoid.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Trapezoid.relocate",
                    "signature": "build123d.Trapezoid.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Trapezoid.rotate",
                    "signature": "build123d.Trapezoid.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.scale",
                    "signature": "build123d.Trapezoid.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.shape_type",
                    "signature": "build123d.Trapezoid.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Trapezoid.shell",
                    "signature": "build123d.Trapezoid.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Trapezoid.shells",
                    "signature": "build123d.Trapezoid.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Trapezoid.show_topology",
                    "signature": "build123d.Trapezoid.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Trapezoid.solid",
                    "signature": "build123d.Trapezoid.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Trapezoid.solids",
                    "signature": "build123d.Trapezoid.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Trapezoid.split",
                    "signature": "build123d.Trapezoid.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.split_by_perimeter",
                    "signature": "build123d.Trapezoid.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Trapezoid.tessellate",
                    "signature": "build123d.Trapezoid.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Trapezoid.to_arcs",
                    "signature": "build123d.Trapezoid.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Trapezoid.to_splines",
                    "signature": "build123d.Trapezoid.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Trapezoid.to_vtk_poly_data",
                    "signature": "build123d.Trapezoid.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Trapezoid.transform_geometry",
                    "signature": "build123d.Trapezoid.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.transform_shape",
                    "signature": "build123d.Trapezoid.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.transformed",
                    "signature": "build123d.Trapezoid.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.translate",
                    "signature": "build123d.Trapezoid.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Trapezoid.unwrap",
                    "signature": "build123d.Trapezoid.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Trapezoid.vertex",
                    "signature": "build123d.Trapezoid.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Trapezoid.vertices",
                    "signature": "build123d.Trapezoid.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Trapezoid.wire",
                    "signature": "build123d.Trapezoid.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Trapezoid.wires",
                    "signature": "build123d.Trapezoid.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Triangle",
            "signature": "build123d.Triangle(*, a: 'float' = None, b: 'float' = None, c: 'float' = None, A: 'float' = None, B: 'float' = None, C: 'float' = None, align: 'Union[None, Align, tuple[Align, Align]]' = None, rotation: 'float' = 0, mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Triangle.bounding_box",
                    "signature": "build123d.Triangle.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Triangle.cast",
                    "signature": "build123d.Triangle.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.center",
                    "signature": "build123d.Triangle.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Triangle.chamfer",
                    "signature": "build123d.Triangle.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.clean",
                    "signature": "build123d.Triangle.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.closest_points",
                    "signature": "build123d.Triangle.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Triangle.combined_center",
                    "signature": "build123d.Triangle.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Triangle.compound",
                    "signature": "build123d.Triangle.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.compounds",
                    "signature": "build123d.Triangle.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Triangle.compute_mass",
                    "signature": "build123d.Triangle.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Triangle.copy",
                    "signature": "build123d.Triangle.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.copy_attributes_to",
                    "signature": "build123d.Triangle.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Triangle.cut",
                    "signature": "build123d.Triangle.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.distance",
                    "signature": "build123d.Triangle.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Triangle.distance_to",
                    "signature": "build123d.Triangle.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Triangle.distance_to_with_closest_points",
                    "signature": "build123d.Triangle.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Triangle.distances",
                    "signature": "build123d.Triangle.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Triangle.do_children_intersect",
                    "signature": "build123d.Triangle.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Triangle.dprism",
                    "signature": "build123d.Triangle.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Triangle.edge",
                    "signature": "build123d.Triangle.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Triangle.edges",
                    "signature": "build123d.Triangle.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Triangle.export_brep",
                    "signature": "build123d.Triangle.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.export_step",
                    "signature": "build123d.Triangle.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Triangle.export_stl",
                    "signature": "build123d.Triangle.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.extrude",
                    "signature": "build123d.Triangle.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.face",
                    "signature": "build123d.Triangle.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Triangle.faces",
                    "signature": "build123d.Triangle.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Triangle.faces_intersected_by_axis",
                    "signature": "build123d.Triangle.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Triangle.fillet",
                    "signature": "build123d.Triangle.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.find_intersection",
                    "signature": "build123d.Triangle.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Triangle.find_intersection_points",
                    "signature": "build123d.Triangle.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Triangle.first_level_shapes",
                    "signature": "build123d.Triangle.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Triangle.fix",
                    "signature": "build123d.Triangle.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.fuse",
                    "signature": "build123d.Triangle.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.get_type",
                    "signature": "build123d.Triangle.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Triangle.hash_code",
                    "signature": "build123d.Triangle.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Triangle.hollow",
                    "signature": "build123d.Triangle.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Triangle.intersect",
                    "signature": "build123d.Triangle.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.is_equal",
                    "signature": "build123d.Triangle.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.is_inside",
                    "signature": "build123d.Triangle.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.is_null",
                    "signature": "build123d.Triangle.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.is_same",
                    "signature": "build123d.Triangle.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.is_valid",
                    "signature": "build123d.Triangle.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Triangle.iter_path_reverse",
                    "signature": "build123d.Triangle.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Triangle.locate",
                    "signature": "build123d.Triangle.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.located",
                    "signature": "build123d.Triangle.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.make_compound",
                    "signature": "build123d.Triangle.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.make_text",
                    "signature": "build123d.Triangle.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Triangle.make_triad",
                    "signature": "build123d.Triangle.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.max_fillet",
                    "signature": "build123d.Triangle.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Triangle.mesh",
                    "signature": "build123d.Triangle.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Triangle.mirror",
                    "signature": "build123d.Triangle.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.move",
                    "signature": "build123d.Triangle.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.moved",
                    "signature": "build123d.Triangle.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.offset_3d",
                    "signature": "build123d.Triangle.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Triangle.project_faces",
                    "signature": "build123d.Triangle.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Triangle.project_to_viewport",
                    "signature": "build123d.Triangle.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Triangle.relocate",
                    "signature": "build123d.Triangle.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Triangle.rotate",
                    "signature": "build123d.Triangle.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.scale",
                    "signature": "build123d.Triangle.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.shape_type",
                    "signature": "build123d.Triangle.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Triangle.shell",
                    "signature": "build123d.Triangle.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Triangle.shells",
                    "signature": "build123d.Triangle.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Triangle.show_topology",
                    "signature": "build123d.Triangle.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Triangle.solid",
                    "signature": "build123d.Triangle.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Triangle.solids",
                    "signature": "build123d.Triangle.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Triangle.split",
                    "signature": "build123d.Triangle.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.split_by_perimeter",
                    "signature": "build123d.Triangle.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Triangle.tessellate",
                    "signature": "build123d.Triangle.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Triangle.to_arcs",
                    "signature": "build123d.Triangle.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Triangle.to_splines",
                    "signature": "build123d.Triangle.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Triangle.to_vtk_poly_data",
                    "signature": "build123d.Triangle.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Triangle.transform_geometry",
                    "signature": "build123d.Triangle.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.transform_shape",
                    "signature": "build123d.Triangle.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.transformed",
                    "signature": "build123d.Triangle.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.translate",
                    "signature": "build123d.Triangle.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Triangle.unwrap",
                    "signature": "build123d.Triangle.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Triangle.vertex",
                    "signature": "build123d.Triangle.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Triangle.vertices",
                    "signature": "build123d.Triangle.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Triangle.wire",
                    "signature": "build123d.Triangle.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Triangle.wires",
                    "signature": "build123d.Triangle.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Unit",
            "signature": "build123d.Unit()",
            "methods": [],
            "variables": [
                "CM",
                "FT",
                "IN",
                "M",
                "MC",
                "MM",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Until",
            "signature": "build123d.Until()",
            "methods": [],
            "variables": [
                "FIRST",
                "LAST",
                "NEXT",
                "PREVIOUS",
                "name",
                "value"
            ]
        },
        {
            "name": "build123d.Vector",
            "signature": "build123d.Vector(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Vector.add",
                    "signature": "build123d.Vector.add(self: 'Vector', vec: 'VectorLike')"
                },
                {
                    "name": "build123d.Vector.center",
                    "signature": "build123d.Vector.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.cross",
                    "signature": "build123d.Vector.cross(self, vec: 'Vector') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.distance_to_plane",
                    "signature": "build123d.Vector.distance_to_plane(self, plane: 'Plane') -> 'float'"
                },
                {
                    "name": "build123d.Vector.dot",
                    "signature": "build123d.Vector.dot(self, vec: 'Vector') -> 'float'"
                },
                {
                    "name": "build123d.Vector.get_angle",
                    "signature": "build123d.Vector.get_angle(self, vec: 'Vector') -> 'float'"
                },
                {
                    "name": "build123d.Vector.get_signed_angle",
                    "signature": "build123d.Vector.get_signed_angle(self, vec: 'Vector', normal: 'Vector' = None) -> 'float'"
                },
                {
                    "name": "build123d.Vector.intersect",
                    "signature": "build123d.Vector.intersect(self, *args, **kwargs)"
                },
                {
                    "name": "build123d.Vector.multiply",
                    "signature": "build123d.Vector.multiply(self, scale: 'float') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.normalized",
                    "signature": "build123d.Vector.normalized(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.project_to_line",
                    "signature": "build123d.Vector.project_to_line(self, line: 'Vector') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.project_to_plane",
                    "signature": "build123d.Vector.project_to_plane(self, plane: 'Plane') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.reverse",
                    "signature": "build123d.Vector.reverse(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.rotate",
                    "signature": "build123d.Vector.rotate(self, axis: 'Axis', angle: 'float') -> 'Vector'"
                },
                {
                    "name": "build123d.Vector.signed_distance_from_plane",
                    "signature": "build123d.Vector.signed_distance_from_plane(self, plane: 'Plane') -> 'float'"
                },
                {
                    "name": "build123d.Vector.sub",
                    "signature": "build123d.Vector.sub(self: 'Vector', vec: 'VectorLike')"
                },
                {
                    "name": "build123d.Vector.to_dir",
                    "signature": "build123d.Vector.to_dir(self) -> 'gp_Dir'"
                },
                {
                    "name": "build123d.Vector.to_pnt",
                    "signature": "build123d.Vector.to_pnt(self) -> 'gp_Pnt'"
                },
                {
                    "name": "build123d.Vector.to_tuple",
                    "signature": "build123d.Vector.to_tuple(self) -> 'tuple[float, float, float]'"
                },
                {
                    "name": "build123d.Vector.transform",
                    "signature": "build123d.Vector.transform(self, affine_transform: 'Matrix', is_direction: 'bool' = False) -> 'Vector'"
                }
            ],
            "variables": [
                "X",
                "Y",
                "Z",
                "length",
                "wrapped"
            ]
        },
        {
            "name": "build123d.Vertex",
            "signature": "build123d.Vertex(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Vertex.bounding_box",
                    "signature": "build123d.Vertex.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Vertex.cast",
                    "signature": "build123d.Vertex.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.center",
                    "signature": "build123d.Vertex.center(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Vertex.clean",
                    "signature": "build123d.Vertex.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.closest_points",
                    "signature": "build123d.Vertex.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Vertex.combined_center",
                    "signature": "build123d.Vertex.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Vertex.compound",
                    "signature": "build123d.Vertex.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Vertex.compounds",
                    "signature": "build123d.Vertex.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Vertex.compute_mass",
                    "signature": "build123d.Vertex.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Vertex.copy",
                    "signature": "build123d.Vertex.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.copy_attributes_to",
                    "signature": "build123d.Vertex.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Vertex.cut",
                    "signature": "build123d.Vertex.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.distance",
                    "signature": "build123d.Vertex.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Vertex.distance_to",
                    "signature": "build123d.Vertex.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Vertex.distance_to_with_closest_points",
                    "signature": "build123d.Vertex.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Vertex.distances",
                    "signature": "build123d.Vertex.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Vertex.edge",
                    "signature": "build123d.Vertex.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Vertex.edges",
                    "signature": "build123d.Vertex.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Vertex.export_brep",
                    "signature": "build123d.Vertex.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Vertex.export_step",
                    "signature": "build123d.Vertex.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Vertex.export_stl",
                    "signature": "build123d.Vertex.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Vertex.extrude",
                    "signature": "build123d.Vertex.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.face",
                    "signature": "build123d.Vertex.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Vertex.faces",
                    "signature": "build123d.Vertex.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Vertex.faces_intersected_by_axis",
                    "signature": "build123d.Vertex.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Vertex.find_intersection",
                    "signature": "build123d.Vertex.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Vertex.find_intersection_points",
                    "signature": "build123d.Vertex.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Vertex.fix",
                    "signature": "build123d.Vertex.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.fuse",
                    "signature": "build123d.Vertex.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.hash_code",
                    "signature": "build123d.Vertex.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Vertex.intersect",
                    "signature": "build123d.Vertex.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Vertex.is_equal",
                    "signature": "build123d.Vertex.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Vertex.is_null",
                    "signature": "build123d.Vertex.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Vertex.is_same",
                    "signature": "build123d.Vertex.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Vertex.is_valid",
                    "signature": "build123d.Vertex.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Vertex.iter_path_reverse",
                    "signature": "build123d.Vertex.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Vertex.locate",
                    "signature": "build123d.Vertex.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.located",
                    "signature": "build123d.Vertex.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.mesh",
                    "signature": "build123d.Vertex.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Vertex.mirror",
                    "signature": "build123d.Vertex.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.move",
                    "signature": "build123d.Vertex.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.moved",
                    "signature": "build123d.Vertex.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.project_faces",
                    "signature": "build123d.Vertex.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Vertex.project_to_viewport",
                    "signature": "build123d.Vertex.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Vertex.relocate",
                    "signature": "build123d.Vertex.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Vertex.rotate",
                    "signature": "build123d.Vertex.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.scale",
                    "signature": "build123d.Vertex.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.shape_type",
                    "signature": "build123d.Vertex.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Vertex.shell",
                    "signature": "build123d.Vertex.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Vertex.shells",
                    "signature": "build123d.Vertex.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Vertex.show_topology",
                    "signature": "build123d.Vertex.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Vertex.solid",
                    "signature": "build123d.Vertex.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Vertex.solids",
                    "signature": "build123d.Vertex.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Vertex.split",
                    "signature": "build123d.Vertex.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.split_by_perimeter",
                    "signature": "build123d.Vertex.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Vertex.tessellate",
                    "signature": "build123d.Vertex.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Vertex.to_arcs",
                    "signature": "build123d.Vertex.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Vertex.to_splines",
                    "signature": "build123d.Vertex.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Vertex.to_tuple",
                    "signature": "build123d.Vertex.to_tuple(self) -> 'tuple[float, float, float]'"
                },
                {
                    "name": "build123d.Vertex.to_vtk_poly_data",
                    "signature": "build123d.Vertex.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Vertex.transform_geometry",
                    "signature": "build123d.Vertex.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.transform_shape",
                    "signature": "build123d.Vertex.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.transformed",
                    "signature": "build123d.Vertex.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.translate",
                    "signature": "build123d.Vertex.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Vertex.vertex",
                    "signature": "build123d.Vertex.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Vertex.vertices",
                    "signature": "build123d.Vertex.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Vertex.wire",
                    "signature": "build123d.Vertex.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Vertex.wires",
                    "signature": "build123d.Vertex.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Wedge",
            "signature": "build123d.Wedge(xsize: 'float', ysize: 'float', zsize: 'float', xmin: 'float', zmin: 'float', xmax: 'float', zmax: 'float', rotation: 'RotationLike' = (0, 0, 0), align: 'Union[Align, tuple[Align, Align, Align]]' = (<Align.CENTER>, <Align.CENTER>, <Align.CENTER>), mode: 'Mode' = <Mode.ADD>)",
            "methods": [
                {
                    "name": "build123d.Wedge.bounding_box",
                    "signature": "build123d.Wedge.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Wedge.cast",
                    "signature": "build123d.Wedge.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.center",
                    "signature": "build123d.Wedge.center(self, center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Wedge.chamfer",
                    "signature": "build123d.Wedge.chamfer(self, length: 'float', length2: 'Optional[float]', edge_list: 'Iterable[Edge]', face: 'Face' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.clean",
                    "signature": "build123d.Wedge.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.closest_points",
                    "signature": "build123d.Wedge.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Wedge.combined_center",
                    "signature": "build123d.Wedge.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Wedge.compound",
                    "signature": "build123d.Wedge.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.compounds",
                    "signature": "build123d.Wedge.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Wedge.compute_mass",
                    "signature": "build123d.Wedge.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Wedge.copy",
                    "signature": "build123d.Wedge.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.copy_attributes_to",
                    "signature": "build123d.Wedge.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Wedge.cut",
                    "signature": "build123d.Wedge.cut(self, *to_cut: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.distance",
                    "signature": "build123d.Wedge.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Wedge.distance_to",
                    "signature": "build123d.Wedge.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Wedge.distance_to_with_closest_points",
                    "signature": "build123d.Wedge.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Wedge.distances",
                    "signature": "build123d.Wedge.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Wedge.do_children_intersect",
                    "signature": "build123d.Wedge.do_children_intersect(self, include_parent: 'bool' = False, tolerance: 'float' = 1e-05) -> 'tuple[bool, tuple[Shape, Shape], float]'"
                },
                {
                    "name": "build123d.Wedge.dprism",
                    "signature": "build123d.Wedge.dprism(self, basis: 'Optional[Face]', bounds: 'list[Union[Face, Wire]]', depth: 'float' = None, taper: 'float' = 0, up_to_face: 'Face' = None, thru_all: 'bool' = True, additive: 'bool' = True) -> 'Solid'"
                },
                {
                    "name": "build123d.Wedge.edge",
                    "signature": "build123d.Wedge.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Wedge.edges",
                    "signature": "build123d.Wedge.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Wedge.export_brep",
                    "signature": "build123d.Wedge.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.export_step",
                    "signature": "build123d.Wedge.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Wedge.export_stl",
                    "signature": "build123d.Wedge.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.extrude",
                    "signature": "build123d.Wedge.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.face",
                    "signature": "build123d.Wedge.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Wedge.faces",
                    "signature": "build123d.Wedge.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Wedge.faces_intersected_by_axis",
                    "signature": "build123d.Wedge.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Wedge.fillet",
                    "signature": "build123d.Wedge.fillet(self, radius: 'float', edge_list: 'Iterable[Edge]') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.find_intersection",
                    "signature": "build123d.Wedge.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Wedge.find_intersection_points",
                    "signature": "build123d.Wedge.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Wedge.first_level_shapes",
                    "signature": "build123d.Wedge.first_level_shapes(self, _shapes: 'list[TopoDS_Shape]' = None) -> 'ShapeList[Shape]'"
                },
                {
                    "name": "build123d.Wedge.fix",
                    "signature": "build123d.Wedge.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.fuse",
                    "signature": "build123d.Wedge.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.get_type",
                    "signature": "build123d.Wedge.get_type(self, obj_type: 'Union[Type[Vertex], Type[Edge], Type[Face], Type[Shell], Type[Solid], Type[Wire]]') -> 'list[Union[Vertex, Edge, Face, Shell, Solid, Wire]]'"
                },
                {
                    "name": "build123d.Wedge.hash_code",
                    "signature": "build123d.Wedge.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Wedge.hollow",
                    "signature": "build123d.Wedge.hollow(self, faces: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Wedge.intersect",
                    "signature": "build123d.Wedge.intersect(self, *to_intersect: 'Shape') -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.is_equal",
                    "signature": "build123d.Wedge.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.is_inside",
                    "signature": "build123d.Wedge.is_inside(self, point: 'VectorLike', tolerance: 'float' = 1e-06) -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.is_null",
                    "signature": "build123d.Wedge.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.is_same",
                    "signature": "build123d.Wedge.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.is_valid",
                    "signature": "build123d.Wedge.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Wedge.iter_path_reverse",
                    "signature": "build123d.Wedge.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Wedge.locate",
                    "signature": "build123d.Wedge.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.located",
                    "signature": "build123d.Wedge.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.make_compound",
                    "signature": "build123d.Wedge.make_compound(shapes: 'Iterable[Shape]') -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.make_text",
                    "signature": "build123d.Wedge.make_text(txt: 'str', font_size: 'float', font: 'str' = 'Arial', font_path: 'Optional[str]' = None, font_style: 'FontStyle' = <FontStyle.REGULAR>, align: 'Union[Align, tuple[Align, Align]]' = (<Align.CENTER>, <Align.CENTER>), position_on_path: 'float' = 0.0, text_path: 'Union[Edge, Wire]' = None) -> \"'Compound'\""
                },
                {
                    "name": "build123d.Wedge.make_triad",
                    "signature": "build123d.Wedge.make_triad(axes_scale: 'float') -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.max_fillet",
                    "signature": "build123d.Wedge.max_fillet(self, edge_list: 'Iterable[Edge]', tolerance=0.1, max_iterations: 'int' = 10) -> 'float'"
                },
                {
                    "name": "build123d.Wedge.mesh",
                    "signature": "build123d.Wedge.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Wedge.mirror",
                    "signature": "build123d.Wedge.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.move",
                    "signature": "build123d.Wedge.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.moved",
                    "signature": "build123d.Wedge.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.offset_3d",
                    "signature": "build123d.Wedge.offset_3d(self, openings: 'Optional[Iterable[Face]]', thickness: 'float', tolerance: 'float' = 0.0001, kind: 'Kind' = <Kind.ARC>) -> 'Solid'"
                },
                {
                    "name": "build123d.Wedge.project_faces",
                    "signature": "build123d.Wedge.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Wedge.project_to_viewport",
                    "signature": "build123d.Wedge.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Wedge.relocate",
                    "signature": "build123d.Wedge.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Wedge.rotate",
                    "signature": "build123d.Wedge.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.scale",
                    "signature": "build123d.Wedge.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.shape_type",
                    "signature": "build123d.Wedge.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Wedge.shell",
                    "signature": "build123d.Wedge.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Wedge.shells",
                    "signature": "build123d.Wedge.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Wedge.show_topology",
                    "signature": "build123d.Wedge.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Wedge.solid",
                    "signature": "build123d.Wedge.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Wedge.solids",
                    "signature": "build123d.Wedge.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Wedge.split",
                    "signature": "build123d.Wedge.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.split_by_perimeter",
                    "signature": "build123d.Wedge.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Wedge.tessellate",
                    "signature": "build123d.Wedge.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Wedge.to_arcs",
                    "signature": "build123d.Wedge.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Wedge.to_splines",
                    "signature": "build123d.Wedge.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Wedge.to_vtk_poly_data",
                    "signature": "build123d.Wedge.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Wedge.transform_geometry",
                    "signature": "build123d.Wedge.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.transform_shape",
                    "signature": "build123d.Wedge.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.transformed",
                    "signature": "build123d.Wedge.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.translate",
                    "signature": "build123d.Wedge.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Wedge.unwrap",
                    "signature": "build123d.Wedge.unwrap(self, fully: 'bool' = True) -> 'Union[Self, Shape]'"
                },
                {
                    "name": "build123d.Wedge.vertex",
                    "signature": "build123d.Wedge.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Wedge.vertices",
                    "signature": "build123d.Wedge.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Wedge.wire",
                    "signature": "build123d.Wedge.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Wedge.wires",
                    "signature": "build123d.Wedge.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.Wire",
            "signature": "build123d.Wire(*args, **kwargs)",
            "methods": [
                {
                    "name": "build123d.Wire.bounding_box",
                    "signature": "build123d.Wire.bounding_box(self, tolerance: 'float' = None, optimal: 'bool' = True) -> 'BoundBox'"
                },
                {
                    "name": "build123d.Wire.cast",
                    "signature": "build123d.Wire.cast(obj: 'TopoDS_Shape', for_construction: 'bool' = False) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.center",
                    "signature": "build123d.Wire.center(self, center_of: 'CenterOf' = <CenterOf.GEOMETRY>) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.chamfer_2d",
                    "signature": "build123d.Wire.chamfer_2d(self, distance: 'float', distance2: 'float', vertices: 'Iterable[Vertex]', edge: 'Edge' = None) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.clean",
                    "signature": "build123d.Wire.clean(self) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.close",
                    "signature": "build123d.Wire.close(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.closest_points",
                    "signature": "build123d.Wire.closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[Vector, Vector]'"
                },
                {
                    "name": "build123d.Wire.combine",
                    "signature": "build123d.Wire.combine(wires: 'Iterable[Union[Wire, Edge]]', tol: 'float' = 1e-09) -> 'ShapeList[Wire]'"
                },
                {
                    "name": "build123d.Wire.combined_center",
                    "signature": "build123d.Wire.combined_center(objects: 'Iterable[Shape]', center_of: 'CenterOf' = <CenterOf.MASS>) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.common_plane",
                    "signature": "build123d.Wire.common_plane(self, *lines: 'Union[Edge, Wire]') -> 'Union[None, Plane]'"
                },
                {
                    "name": "build123d.Wire.compound",
                    "signature": "build123d.Wire.compound(self) -> 'Compound'"
                },
                {
                    "name": "build123d.Wire.compounds",
                    "signature": "build123d.Wire.compounds(self) -> 'ShapeList[Compound]'"
                },
                {
                    "name": "build123d.Wire.compute_mass",
                    "signature": "build123d.Wire.compute_mass(obj: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Wire.copy",
                    "signature": "build123d.Wire.copy(self) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.copy_attributes_to",
                    "signature": "build123d.Wire.copy_attributes_to(self, target: 'Shape', exceptions: 'Iterable[str]' = None)"
                },
                {
                    "name": "build123d.Wire.cut",
                    "signature": "build123d.Wire.cut(self, *to_cut: 'Shape') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.distance",
                    "signature": "build123d.Wire.distance(self, other: 'Shape') -> 'float'"
                },
                {
                    "name": "build123d.Wire.distance_to",
                    "signature": "build123d.Wire.distance_to(self, other: 'Union[Shape, VectorLike]') -> 'float'"
                },
                {
                    "name": "build123d.Wire.distance_to_with_closest_points",
                    "signature": "build123d.Wire.distance_to_with_closest_points(self, other: 'Union[Shape, VectorLike]') -> 'tuple[float, Vector, Vector]'"
                },
                {
                    "name": "build123d.Wire.distances",
                    "signature": "build123d.Wire.distances(self, *others: 'Shape') -> 'Iterator[float]'"
                },
                {
                    "name": "build123d.Wire.edge",
                    "signature": "build123d.Wire.edge(self) -> 'Edge'"
                },
                {
                    "name": "build123d.Wire.edges",
                    "signature": "build123d.Wire.edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Wire.end_point",
                    "signature": "build123d.Wire.end_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.export_brep",
                    "signature": "build123d.Wire.export_brep(self, file: 'Union[str, BytesIO]') -> 'bool'"
                },
                {
                    "name": "build123d.Wire.export_step",
                    "signature": "build123d.Wire.export_step(self, file_name: 'str', **kwargs) -> 'IFSelect_ReturnStatus'"
                },
                {
                    "name": "build123d.Wire.export_stl",
                    "signature": "build123d.Wire.export_stl(self, file_name: 'str', tolerance: 'float' = 0.001, angular_tolerance: 'float' = 0.1, ascii_format: 'bool' = False) -> 'bool'"
                },
                {
                    "name": "build123d.Wire.extrude",
                    "signature": "build123d.Wire.extrude(obj: 'Union[Vertex, Edge, Wire, Face, Shell]', direction: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.face",
                    "signature": "build123d.Wire.face(self) -> 'Face'"
                },
                {
                    "name": "build123d.Wire.faces",
                    "signature": "build123d.Wire.faces(self) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Wire.faces_intersected_by_axis",
                    "signature": "build123d.Wire.faces_intersected_by_axis(self, axis: 'Axis', tol: 'float' = 0.0001) -> 'ShapeList[Face]'"
                },
                {
                    "name": "build123d.Wire.fillet_2d",
                    "signature": "build123d.Wire.fillet_2d(self, radius: 'float', vertices: 'Iterable[Vertex]') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.find_intersection",
                    "signature": "build123d.Wire.find_intersection(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Wire.find_intersection_points",
                    "signature": "build123d.Wire.find_intersection_points(self, axis: 'Axis') -> 'list[tuple[Vector, Vector]]'"
                },
                {
                    "name": "build123d.Wire.fix",
                    "signature": "build123d.Wire.fix(self) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.fix_degenerate_edges",
                    "signature": "build123d.Wire.fix_degenerate_edges(self, precision: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.fuse",
                    "signature": "build123d.Wire.fuse(self, *to_fuse: 'Shape', glue: 'bool' = False, tol: 'float' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.hash_code",
                    "signature": "build123d.Wire.hash_code(self) -> 'int'"
                },
                {
                    "name": "build123d.Wire.intersect",
                    "signature": "build123d.Wire.intersect(self, *to_intersect: 'Union[Shape, Axis, Plane]') -> 'Shape'"
                },
                {
                    "name": "build123d.Wire.is_equal",
                    "signature": "build123d.Wire.is_equal(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Wire.is_null",
                    "signature": "build123d.Wire.is_null(self) -> 'bool'"
                },
                {
                    "name": "build123d.Wire.is_same",
                    "signature": "build123d.Wire.is_same(self, other: 'Shape') -> 'bool'"
                },
                {
                    "name": "build123d.Wire.is_valid",
                    "signature": "build123d.Wire.is_valid(self) -> 'bool'"
                },
                {
                    "name": "build123d.Wire.iter_path_reverse",
                    "signature": "build123d.Wire.iter_path_reverse(self)"
                },
                {
                    "name": "build123d.Wire.locate",
                    "signature": "build123d.Wire.locate(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.located",
                    "signature": "build123d.Wire.located(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.location_at",
                    "signature": "build123d.Wire.location_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'Location'"
                },
                {
                    "name": "build123d.Wire.locations",
                    "signature": "build123d.Wire.locations(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>, frame_method: 'FrameMethod' = <FrameMethod.FRENET>, planar: 'bool' = False) -> 'list[Location]'"
                },
                {
                    "name": "build123d.Wire.make_circle",
                    "signature": "build123d.Wire.make_circle(radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_convex_hull",
                    "signature": "build123d.Wire.make_convex_hull(edges: 'Iterable[Edge]', tolerance: 'float' = 0.001) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_ellipse",
                    "signature": "build123d.Wire.make_ellipse(x_radius: 'float', y_radius: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00)), start_angle: 'float' = 360.0, end_angle: 'float' = 360.0, angular_direction: 'AngularDirection' = <AngularDirection.COUNTER_CLOCKWISE>, closed: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_polygon",
                    "signature": "build123d.Wire.make_polygon(vertices: 'Iterable[VectorLike]', close: 'bool' = True) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_rect",
                    "signature": "build123d.Wire.make_rect(width: 'float', height: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.make_wire",
                    "signature": "build123d.Wire.make_wire(edges: 'Iterable[Edge]', sequenced: 'bool' = False) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.mesh",
                    "signature": "build123d.Wire.mesh(self, tolerance: 'float', angular_tolerance: 'float' = 0.1)"
                },
                {
                    "name": "build123d.Wire.mirror",
                    "signature": "build123d.Wire.mirror(self, mirror_plane: 'Plane' = None) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.move",
                    "signature": "build123d.Wire.move(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.moved",
                    "signature": "build123d.Wire.moved(self, loc: 'Location') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.normal",
                    "signature": "build123d.Wire.normal(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.offset_2d",
                    "signature": "build123d.Wire.offset_2d(self, distance: 'float', kind: 'Kind' = <Kind.ARC>, side: 'Side' = <Side.BOTH>, closed: 'bool' = True) -> 'Union[Edge, Wire]'"
                },
                {
                    "name": "build123d.Wire.order_edges",
                    "signature": "build123d.Wire.order_edges(self) -> 'ShapeList[Edge]'"
                },
                {
                    "name": "build123d.Wire.param_at",
                    "signature": "build123d.Wire.param_at(self, distance: 'float') -> 'float'"
                },
                {
                    "name": "build123d.Wire.param_at_point",
                    "signature": "build123d.Wire.param_at_point(self, point: 'VectorLike') -> 'float'"
                },
                {
                    "name": "build123d.Wire.perpendicular_line",
                    "signature": "build123d.Wire.perpendicular_line(self, length: 'float', u_value: 'float', plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'Edge'"
                },
                {
                    "name": "build123d.Wire.position_at",
                    "signature": "build123d.Wire.position_at(self, distance: 'float', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.positions",
                    "signature": "build123d.Wire.positions(self, distances: 'Iterable[float]', position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'list[Vector]'"
                },
                {
                    "name": "build123d.Wire.project",
                    "signature": "build123d.Wire.project(self, face: 'Face', direction: 'VectorLike', closest: 'bool' = True) -> 'Union[Mixin1D, list[Mixin1D]]'"
                },
                {
                    "name": "build123d.Wire.project_faces",
                    "signature": "build123d.Wire.project_faces(self, faces: 'Union[list[Face], Compound]', path: 'Union[Wire, Edge]', start: 'float' = 0) -> 'Compound'"
                },
                {
                    "name": "build123d.Wire.project_to_shape",
                    "signature": "build123d.Wire.project_to_shape(self, target_object: 'Shape', direction: 'VectorLike' = None, center: 'VectorLike' = None) -> 'list[Wire]'"
                },
                {
                    "name": "build123d.Wire.project_to_viewport",
                    "signature": "build123d.Wire.project_to_viewport(self, viewport_origin: 'VectorLike', viewport_up: 'VectorLike' = (0, 0, 1), look_at: 'VectorLike' = None) -> 'tuple[ShapeList[Edge], ShapeList[Edge]]'"
                },
                {
                    "name": "build123d.Wire.relocate",
                    "signature": "build123d.Wire.relocate(self, loc: 'Location')"
                },
                {
                    "name": "build123d.Wire.rotate",
                    "signature": "build123d.Wire.rotate(self, axis: 'Axis', angle: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.scale",
                    "signature": "build123d.Wire.scale(self, factor: 'float') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.shape_type",
                    "signature": "build123d.Wire.shape_type(self) -> 'Shapes'"
                },
                {
                    "name": "build123d.Wire.shell",
                    "signature": "build123d.Wire.shell(self) -> 'Shell'"
                },
                {
                    "name": "build123d.Wire.shells",
                    "signature": "build123d.Wire.shells(self) -> 'ShapeList[Shell]'"
                },
                {
                    "name": "build123d.Wire.show_topology",
                    "signature": "build123d.Wire.show_topology(self, limit_class: \"Literal['Compound', 'Edge', 'Face', 'Shell', 'Solid', 'Vertex', 'Wire']\" = 'Vertex', show_center: 'bool' = None) -> 'str'"
                },
                {
                    "name": "build123d.Wire.solid",
                    "signature": "build123d.Wire.solid(self) -> 'Solid'"
                },
                {
                    "name": "build123d.Wire.solids",
                    "signature": "build123d.Wire.solids(self) -> 'ShapeList[Solid]'"
                },
                {
                    "name": "build123d.Wire.split",
                    "signature": "build123d.Wire.split(self, tool: 'TrimmingTool', keep: 'Keep' = <Keep.TOP>) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.split_by_perimeter",
                    "signature": "build123d.Wire.split_by_perimeter(self, perimeter: 'Union[Edge, Wire]', keep: 'Keep' = <Keep.INSIDE>)"
                },
                {
                    "name": "build123d.Wire.start_point",
                    "signature": "build123d.Wire.start_point(self) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.stitch",
                    "signature": "build123d.Wire.stitch(self, other: 'Wire') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.tangent_angle_at",
                    "signature": "build123d.Wire.tangent_angle_at(self, location_param: 'float' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>, plane: 'Plane' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, 0.00, 1.00))) -> 'float'"
                },
                {
                    "name": "build123d.Wire.tangent_at",
                    "signature": "build123d.Wire.tangent_at(self, position: 'Union[float, VectorLike]' = 0.5, position_mode: 'PositionMode' = <PositionMode.PARAMETER>) -> 'Vector'"
                },
                {
                    "name": "build123d.Wire.tessellate",
                    "signature": "build123d.Wire.tessellate(self, tolerance: 'float', angular_tolerance: 'float' = 0.1) -> 'Tuple[list[Vector], list[Tuple[int, int, int]]]'"
                },
                {
                    "name": "build123d.Wire.to_arcs",
                    "signature": "build123d.Wire.to_arcs(self, tolerance: 'float' = 0.001) -> 'Face'"
                },
                {
                    "name": "build123d.Wire.to_splines",
                    "signature": "build123d.Wire.to_splines(self, degree: 'int' = 3, tolerance: 'float' = 0.001, nurbs: 'bool' = False) -> 'T'"
                },
                {
                    "name": "build123d.Wire.to_vtk_poly_data",
                    "signature": "build123d.Wire.to_vtk_poly_data(self, tolerance: 'float' = None, angular_tolerance: 'float' = None, normals: 'bool' = False) -> 'vtkPolyData'"
                },
                {
                    "name": "build123d.Wire.to_wire",
                    "signature": "build123d.Wire.to_wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.transform_geometry",
                    "signature": "build123d.Wire.transform_geometry(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.transform_shape",
                    "signature": "build123d.Wire.transform_shape(self, t_matrix: 'Matrix') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.transformed",
                    "signature": "build123d.Wire.transformed(self, rotate: 'VectorLike' = (0, 0, 0), offset: 'VectorLike' = (0, 0, 0)) -> 'Self'"
                },
                {
                    "name": "build123d.Wire.translate",
                    "signature": "build123d.Wire.translate(self, vector: 'VectorLike') -> 'Self'"
                },
                {
                    "name": "build123d.Wire.trim",
                    "signature": "build123d.Wire.trim(self: 'Wire', start: 'float', end: 'float') -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.vertex",
                    "signature": "build123d.Wire.vertex(self) -> 'Vertex'"
                },
                {
                    "name": "build123d.Wire.vertices",
                    "signature": "build123d.Wire.vertices(self) -> 'ShapeList[Vertex]'"
                },
                {
                    "name": "build123d.Wire.wire",
                    "signature": "build123d.Wire.wire(self) -> 'Wire'"
                },
                {
                    "name": "build123d.Wire.wires",
                    "signature": "build123d.Wire.wires(self) -> 'ShapeList[Wire]'"
                }
            ],
            "variables": [
                "ancestors",
                "anchestors",
                "area",
                "children",
                "color",
                "depth",
                "descendants",
                "geom_type",
                "height",
                "is_closed",
                "is_forward",
                "is_leaf",
                "is_manifold",
                "is_root",
                "leaves",
                "length",
                "location",
                "orientation",
                "parent",
                "path",
                "position",
                "radius",
                "root",
                "separator",
                "siblings",
                "size",
                "volume"
            ]
        },
        {
            "name": "build123d.WorkplaneList",
            "signature": "build123d.WorkplaneList(*workplanes: 'Union[Face, Plane, Location]')",
            "methods": [
                {
                    "name": "build123d.WorkplaneList.localize",
                    "signature": "build123d.WorkplaneList.localize(*points: 'VectorLike') -> 'Union[list[Vector], Vector]'"
                }
            ],
            "variables": []
        }
    ],
    "functions": [
        {
            "name": "build123d.add",
            "signature": "build123d.add(objects: Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound, build123d.build_common.Builder, Iterable[Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound, build123d.build_common.Builder]]], rotation: Union[float, tuple[float, float, float], build123d.geometry.Rotation] = None, clean: bool = True, mode: build123d.build_enums.Mode = <Mode.ADD>) -> build123d.topology.Compound"
        },
        {
            "name": "build123d.ansi_pattern",
            "signature": "build123d.ansi_pattern(*args)"
        },
        {
            "name": "build123d.bounding_box",
            "signature": "build123d.bounding_box(objects: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]] = None, mode: build123d.build_enums.Mode = <Mode.PRIVATE>) -> Union[build123d.topology.Sketch, build123d.topology.Part]"
        },
        {
            "name": "build123d.chamfer",
            "signature": "build123d.chamfer(objects: Union[build123d.topology.Edge, build123d.topology.Vertex, Iterable[Union[build123d.topology.Edge, build123d.topology.Vertex]]], length: float, length2: float = None, angle: float = None, reference: Union[build123d.topology.Edge, build123d.topology.Face] = None) -> Union[build123d.topology.Sketch, build123d.topology.Part]"
        },
        {
            "name": "build123d.delta",
            "signature": "build123d.delta(shapes_one: 'Iterable[Shape]', shapes_two: 'Iterable[Shape]') -> 'list[Shape]'"
        },
        {
            "name": "build123d.downcast",
            "signature": "build123d.downcast(obj: 'TopoDS_Shape') -> 'TopoDS_Shape'"
        },
        {
            "name": "build123d.edge",
            "signature": "build123d.edge(self, select: 'Select' = <Select.ALL>) -> 'Edge'"
        },
        {
            "name": "build123d.edges",
            "signature": "build123d.edges(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.edges_to_wires",
            "signature": "build123d.edges_to_wires(edges: 'Iterable[Edge]', tol: 'float' = 1e-06) -> 'list[Wire]'"
        },
        {
            "name": "build123d.export_brep",
            "signature": "build123d.export_brep(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes, _io.BytesIO]) -> bool"
        },
        {
            "name": "build123d.export_gltf",
            "signature": "build123d.export_gltf(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes], unit: build123d.build_enums.Unit = <Unit.MM>, binary: bool = False, linear_deflection: float = 0.001, angular_deflection: float = 0.1) -> bool"
        },
        {
            "name": "build123d.export_step",
            "signature": "build123d.export_step(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes], unit: build123d.build_enums.Unit = <Unit.MM>, write_pcurves: bool = True, precision_mode: build123d.build_enums.PrecisionMode = <PrecisionMode.AVERAGE>) -> bool"
        },
        {
            "name": "build123d.export_stl",
            "signature": "build123d.export_stl(to_export: build123d.topology.Shape, file_path: Union[os.PathLike, str, bytes], tolerance: float = 0.001, angular_tolerance: float = 0.1, ascii_format: bool = False) -> bool"
        },
        {
            "name": "build123d.extrude",
            "signature": "build123d.extrude(to_extrude: 'Union[Face, Sketch]' = None, amount: 'float' = None, dir: 'VectorLike' = None, until: 'Until' = None, target: 'Union[Compound, Solid]' = None, both: 'bool' = False, taper: 'float' = 0.0, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.face",
            "signature": "build123d.face(self, select: 'Select' = <Select.ALL>) -> 'Face'"
        },
        {
            "name": "build123d.faces",
            "signature": "build123d.faces(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Face]'"
        },
        {
            "name": "build123d.fillet",
            "signature": "build123d.fillet(objects: Union[build123d.topology.Edge, build123d.topology.Vertex, Iterable[Union[build123d.topology.Edge, build123d.topology.Vertex]]], radius: float) -> Union[build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Curve]"
        },
        {
            "name": "build123d.fix",
            "signature": "build123d.fix(obj: 'TopoDS_Shape') -> 'TopoDS_Shape'"
        },
        {
            "name": "build123d.flatten_sequence",
            "signature": "build123d.flatten_sequence(*obj: 'T') -> 'list[Any]'"
        },
        {
            "name": "build123d.full_round",
            "signature": "build123d.full_round(edge: 'Edge', invert: 'bool' = False, voronoi_point_count: 'int' = 100, mode: 'Mode' = <Mode.REPLACE>) -> 'tuple[Sketch, Vector, float]'"
        },
        {
            "name": "build123d.import_brep",
            "signature": "build123d.import_brep(file_name: Union[os.PathLike, str, bytes]) -> build123d.topology.Shape"
        },
        {
            "name": "build123d.import_step",
            "signature": "build123d.import_step(filename: Union[os.PathLike, str, bytes]) -> build123d.topology.Compound"
        },
        {
            "name": "build123d.import_stl",
            "signature": "build123d.import_stl(file_name: Union[os.PathLike, str, bytes]) -> build123d.topology.Face"
        },
        {
            "name": "build123d.import_svg",
            "signature": "build123d.import_svg(svg_file: Union[str, pathlib.Path, TextIO], *, flip_y: bool = True, ignore_visibility: bool = False, label_by: str = 'id', is_inkscape_label: bool = False) -> build123d.topology.ShapeList[typing.Union[build123d.topology.Wire, build123d.topology.Face]]"
        },
        {
            "name": "build123d.import_svg_as_buildline_code",
            "signature": "build123d.import_svg_as_buildline_code(file_name: Union[os.PathLike, str, bytes]) -> tuple[str, str]"
        },
        {
            "name": "build123d.isclose_b",
            "signature": "build123d.isclose_b(a: 'float', b: 'float', rel_tol=1e-09, abs_tol=1e-14) -> 'bool'"
        },
        {
            "name": "build123d.iso_pattern",
            "signature": "build123d.iso_pattern(*args)"
        },
        {
            "name": "build123d.loft",
            "signature": "build123d.loft(sections: 'Union[Face, Sketch, Iterable[Union[Vertex, Face, Sketch]]]' = None, ruled: 'bool' = False, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.make_brake_formed",
            "signature": "build123d.make_brake_formed(thickness: 'float', station_widths: 'Union[float, Iterable[float]]', line: 'Union[Edge, Wire, Curve]' = None, side: 'Side' = <Side.LEFT>, kind: 'Kind' = <Kind.ARC>, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.make_face",
            "signature": "build123d.make_face(edges: 'Union[Edge, Iterable[Edge]]' = None, mode: 'Mode' = <Mode.ADD>) -> 'Sketch'"
        },
        {
            "name": "build123d.make_hull",
            "signature": "build123d.make_hull(edges: 'Union[Edge, Iterable[Edge]]' = None, mode: 'Mode' = <Mode.ADD>) -> 'Sketch'"
        },
        {
            "name": "build123d.mirror",
            "signature": "build123d.mirror(objects: Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Compound, build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, Iterable[Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Compound, build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part]]] = None, about: build123d.geometry.Plane = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, -1.00, 0.00)), mode: build123d.build_enums.Mode = <Mode.ADD>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Compound]"
        },
        {
            "name": "build123d.modify_copyreg",
            "signature": "build123d.modify_copyreg()"
        },
        {
            "name": "build123d.new_edges",
            "signature": "build123d.new_edges(*objects: 'Shape', combined: 'Shape') -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.offset",
            "signature": "build123d.offset(objects: Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound, Iterable[Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Solid, build123d.topology.Compound]]] = None, amount: float = 0, openings: Union[build123d.topology.Face, list[build123d.topology.Face]] = None, kind: build123d.build_enums.Kind = <Kind.ARC>, side: build123d.build_enums.Side = <Side.BOTH>, closed: bool = True, min_edge_length: float = None, mode: build123d.build_enums.Mode = <Mode.REPLACE>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Compound]"
        },
        {
            "name": "build123d.pack",
            "signature": "build123d.pack(objects: 'Collection[Shape]', padding: 'float', align_z: 'bool' = False) -> 'Collection[Shape]'"
        },
        {
            "name": "build123d.polar",
            "signature": "build123d.polar(length: 'float', angle: 'float') -> 'tuple[float, float]'"
        },
        {
            "name": "build123d.project",
            "signature": "build123d.project(objects: Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Wire, build123d.geometry.Vector, build123d.topology.Vertex, Iterable[Union[build123d.topology.Edge, build123d.topology.Face, build123d.topology.Wire, build123d.geometry.Vector, build123d.topology.Vertex]]] = None, workplane: build123d.geometry.Plane = None, target: Union[build123d.topology.Solid, build123d.topology.Compound, build123d.topology.Part] = None, mode: build123d.build_enums.Mode = <Mode.ADD>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Compound, build123d.topology.ShapeList[build123d.geometry.Vector]]"
        },
        {
            "name": "build123d.project_workplane",
            "signature": "build123d.project_workplane(origin: 'Union[VectorLike, Vertex]', x_dir: 'Union[VectorLike, Vertex]', projection_dir: 'VectorLike', distance: 'float') -> 'Plane'"
        },
        {
            "name": "build123d.revolve",
            "signature": "build123d.revolve(profiles: 'Union[Face, Iterable[Face]]' = None, axis: 'Axis' = ((0.0, 0.0, 0.0),(0.0, 0.0, 1.0)), revolution_arc: 'float' = 360.0, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.scale",
            "signature": "build123d.scale(objects: Union[build123d.topology.Shape, Iterable[build123d.topology.Shape]] = None, by: Union[float, tuple[float, float, float]] = 1, mode: build123d.build_enums.Mode = <Mode.REPLACE>) -> Union[build123d.topology.Curve, build123d.topology.Sketch, build123d.topology.Part, build123d.topology.Compound]"
        },
        {
            "name": "build123d.section",
            "signature": "build123d.section(obj: 'Part' = None, section_by: 'Union[Plane, Iterable[Plane]]' = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, -1.00, 0.00)), height: 'float' = 0.0, clean: 'bool' = True, mode: 'Mode' = <Mode.PRIVATE>) -> 'Sketch'"
        },
        {
            "name": "build123d.shapetype",
            "signature": "build123d.shapetype(obj: 'TopoDS_Shape') -> 'TopAbs_ShapeEnum'"
        },
        {
            "name": "build123d.solid",
            "signature": "build123d.solid(self, select: 'Select' = <Select.ALL>) -> 'Solid'"
        },
        {
            "name": "build123d.solids",
            "signature": "build123d.solids(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Solid]'"
        },
        {
            "name": "build123d.sort_wires_by_build_order",
            "signature": "build123d.sort_wires_by_build_order(wire_list: 'list[Wire]') -> 'list[list[Wire]]'"
        },
        {
            "name": "build123d.split",
            "signature": "build123d.split(objects: Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, Iterable[Union[build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid]]] = None, bisect_by: Union[build123d.geometry.Plane, build123d.topology.Face] = Plane(o=(0.00, 0.00, 0.00), x=(1.00, 0.00, 0.00), z=(0.00, -1.00, 0.00)), keep: build123d.build_enums.Keep = <Keep.TOP>, mode: build123d.build_enums.Mode = <Mode.REPLACE>)"
        },
        {
            "name": "build123d.sweep",
            "signature": "build123d.sweep(sections: Union[build123d.topology.Compound, build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid, Iterable[Union[build123d.topology.Compound, build123d.topology.Edge, build123d.topology.Wire, build123d.topology.Face, build123d.topology.Solid]]] = None, path: Union[build123d.topology.Curve, build123d.topology.Edge, build123d.topology.Wire, Iterable[build123d.topology.Edge]] = None, multisection: bool = False, is_frenet: bool = False, transition: build123d.build_enums.Transition = <Transition.TRANSFORMED>, normal: Union[build123d.geometry.Vector, tuple[float, float], tuple[float, float, float], Iterable[float]] = None, binormal: Union[build123d.topology.Edge, build123d.topology.Wire] = None, clean: bool = True, mode: build123d.build_enums.Mode = <Mode.ADD>) -> Union[build123d.topology.Part, build123d.topology.Sketch]"
        },
        {
            "name": "build123d.thicken",
            "signature": "build123d.thicken(to_thicken: 'Union[Face, Sketch]' = None, amount: 'float' = None, normal_override: 'VectorLike' = None, both: 'bool' = False, clean: 'bool' = True, mode: 'Mode' = <Mode.ADD>) -> 'Part'"
        },
        {
            "name": "build123d.topo_explore_common_vertex",
            "signature": "build123d.topo_explore_common_vertex(edge1: 'Union[Edge, TopoDS_Edge]', edge2: 'Union[Edge, TopoDS_Edge]') -> 'Union[Vertex, None]'"
        },
        {
            "name": "build123d.topo_explore_connected_edges",
            "signature": "build123d.topo_explore_connected_edges(edge: 'Edge', parent: 'Shape' = None) -> 'ShapeList[Edge]'"
        },
        {
            "name": "build123d.trace",
            "signature": "build123d.trace(lines: 'Union[Curve, Edge, Wire, Iterable[Union[Curve, Edge, Wire]]]' = None, line_width: 'float' = 1, mode: 'Mode' = <Mode.ADD>) -> 'Sketch'"
        },
        {
            "name": "build123d.tuplify",
            "signature": "build123d.tuplify(obj: 'Any', dim: 'int') -> 'tuple'"
        },
        {
            "name": "build123d.unit_conversion_scale",
            "signature": "build123d.unit_conversion_scale(from_unit: build123d.build_enums.Unit, to_unit: build123d.build_enums.Unit) -> float"
        },
        {
            "name": "build123d.unwrapped_shapetype",
            "signature": "build123d.unwrapped_shapetype(obj: 'Shape') -> 'TopAbs_ShapeEnum'"
        },
        {
            "name": "build123d.validate_inputs",
            "signature": "build123d.validate_inputs(context: 'Builder', validating_class, objects: 'Iterable[Shape]' = None)"
        },
        {
            "name": "build123d.vertex",
            "signature": "build123d.vertex(self, select: 'Select' = <Select.ALL>) -> 'Vertex'"
        },
        {
            "name": "build123d.vertices",
            "signature": "build123d.vertices(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Vertex]'"
        },
        {
            "name": "build123d.wire",
            "signature": "build123d.wire(self, select: 'Select' = <Select.ALL>) -> 'Wire'"
        },
        {
            "name": "build123d.wires",
            "signature": "build123d.wires(self, select: 'Select' = <Select.ALL>) -> 'ShapeList[Wire]'"
        }
    ],
    "variables": [
        {
            "name": "K",
            "value": "~K",
            "type": "TypeVar"
        },
        {
            "name": "P",
            "value": "~P",
            "type": "ParamSpec"
        },
        {
            "name": "T",
            "value": "~T",
            "type": "TypeVar"
        },
        {
            "name": "T2",
            "value": "~T2",
            "type": "TypeVar"
        }
    ]
}